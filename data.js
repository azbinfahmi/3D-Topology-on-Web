
// Canvas+
var container;
const canvas = document.querySelector('canvas.webgl')
var scene = new THREE.Scene();
scene.background = new THREE.Color('skyblue');
var camera = new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight);

var renderer = new THREE.WebGLRenderer({antialias: true , powerPreference: "high-performance"});

renderer.shadowMap.enabled = true;
renderer.shadowMap.type = THREE.PCFSoftShadowMap;

renderer.setSize(window.innerWidth,window.innerHeight);
document.body.appendChild(renderer.domElement);


var points = new THREE.Geometry(); 
points.vertices.push( 
new THREE.Vector3(71.52505882213936 /10,  -11.65448969291768 /10,  36.7 /10),   //0
new THREE.Vector3(71.5247340792603 /10,  -11.654425347045475 /10,  39.90000000000002 /10),   //1
new THREE.Vector3(71.5247340792603 /10,  -11.654425347045475 /10,  36.7 /10),   //2
new THREE.Vector3(80.93584281904829 /10,  -34.1686366610381 /10,  36.7 /10),   //3
new THREE.Vector3(79.96704289713604 /10,  -33.96977059701268 /10,  36.7 /10),   //4
new THREE.Vector3(79.78325767720774 /10,  -34.86510237515072 /10,  36.7 /10),   //5
new THREE.Vector3(79.64511714538233 /10,  -35.53807057161647 /10,  36.7 /10),   //6
new THREE.Vector3(76.06183088229497 /10,  -34.80252753605365 /10,  36.7 /10),   //7
new THREE.Vector3(77.57815948565357 /10,  -27.415550578841685 /10,  36.7 /10),   //8
new THREE.Vector3(76.38405725635454 /10,  -27.170436592942178 /10,  36.7 /10),   //9
new THREE.Vector3(77.47148665391097 /10,  -21.872893643112732 /10,  36.7 /10),   //10
new THREE.Vector3(79.26312978556871 /10,  -22.24066516091765 /10,  36.7 /10),   //11
new THREE.Vector3(80.08573955678418 /10,  -18.233222835233235 /10,  36.7 /10),   //12
new THREE.Vector3(80.0957934528422 /10,  -18.184244072750392 /10,  36.7 /10),   //13
new THREE.Vector3(84.72428650706203 /10,  -19.134337250136937 /10,  36.7 /10),   //14
new THREE.Vector3(84.7393673511473 /10,  -19.060869106419855 /10,  36.7 /10),   //15
new THREE.Vector3(86.381135473647 /10,  -19.3978756818292 /10,  36.7 /10),   //16
new THREE.Vector3(83.25155870893147 /10,  -34.643984866592206 /10,  36.7 /10),   //17
new THREE.Vector3(77.57815948565357 /10,  -27.415550578841685 /10,  39.90000000000002 /10),   //18
new THREE.Vector3(76.38405725635454 /10,  -27.170436592942178 /10,  39.90000000000002 /10),   //19
new THREE.Vector3(76.06183088229497 /10,  -34.80252753605365 /10,  39.90000000000002 /10),   //20
new THREE.Vector3(86.381135473647 /10,  -19.3978756818292 /10,  39.90000000000002 /10),   //21
new THREE.Vector3(84.7393673511473 /10,  -19.060869106419855 /10,  39.90000000000002 /10),   //22
new THREE.Vector3(84.72428650706203 /10,  -19.134337250136937 /10,  39.90000000000002 /10),   //23
new THREE.Vector3(80.0957934528422 /10,  -18.184244072750392 /10,  39.90000000000002 /10),   //24
new THREE.Vector3(80.08573955678384 /10,  -18.233222835233214 /10,  39.90000000000002 /10),   //25
new THREE.Vector3(79.26312978556871 /10,  -22.24066516091765 /10,  39.90000000000002 /10),   //26
new THREE.Vector3(77.47148665391097 /10,  -21.872893643112732 /10,  39.90000000000002 /10),   //27
new THREE.Vector3(79.64511714538233 /10,  -35.53807057161647 /10,  39.90000000000002 /10),   //28
new THREE.Vector3(79.78325767720808 /10,  -34.8651023751506 /10,  39.90000000000002 /10),   //29
new THREE.Vector3(79.96704289713604 /10,  -33.96977059701268 /10,  39.90000000000002 /10),   //30
new THREE.Vector3(80.93584281904828 /10,  -34.168636661038065 /10,  39.90000000000002 /10),   //31
new THREE.Vector3(83.25155870893147 /10,  -34.643984866592206 /10,  39.90000000000002 /10),   //32
new THREE.Vector3(77.47148665391103 /10,  -21.872893643112935 /10,  39.90000000000002 /10),   //33
new THREE.Vector3(79.26312978556874 /10,  -22.240665160917736 /10,  39.90000000000002 /10),   //34
new THREE.Vector3(79.26312978556874 /10,  -22.240665160917736 /10,  36.7 /10),   //35
new THREE.Vector3(77.47148665391103 /10,  -21.872893643112935 /10,  36.7 /10),   //36
new THREE.Vector3(76.38405725635455 /10,  -27.170436592942117 /10,  39.90000000000002 /10),   //37
new THREE.Vector3(76.38405725635455 /10,  -27.170436592942117 /10,  36.7 /10),   //38
new THREE.Vector3(84.73936735114734 /10,  -19.060869106419844 /10,  39.90000000000002 /10),   //39
new THREE.Vector3(86.38113547364703 /10,  -19.397875681829195 /10,  39.90000000000002 /10),   //40
new THREE.Vector3(86.38113547364703 /10,  -19.397875681829195 /10,  36.7 /10),   //41
new THREE.Vector3(84.73936735114734 /10,  -19.060869106419844 /10,  36.7 /10),   //42
new THREE.Vector3(80.09579345284219 /10,  -18.184244072750367 /10,  36.7 /10),   //43
new THREE.Vector3(80.08573955678412 /10,  -18.23322283523322 /10,  36.7 /10),   //44
new THREE.Vector3(80.08573955678386 /10,  -18.233222835233207 /10,  39.90000000000002 /10),   //45
new THREE.Vector3(80.09579345284219 /10,  -18.184244072750367 /10,  39.90000000000002 /10),   //46
new THREE.Vector3(84.72428650706206 /10,  -19.134337250136937 /10,  39.90000000000002 /10),   //47
new THREE.Vector3(84.72428650706206 /10,  -19.134337250136937 /10,  36.7 /10),   //48
new THREE.Vector3(64.57582184098968 /10,  -11.932837016011115 /10,  36.7 /10),   //49
new THREE.Vector3(64.5858757370475 /10,  -11.883858253527974 /10,  36.7 /10),   //50
new THREE.Vector3(65.53114304854802 /10,  -7.278874984733785 /10,  36.7 /10),   //51
new THREE.Vector3(63.73949991757419 /10,  -6.9111034670690765 /10,  36.7 /10),   //52
new THREE.Vector3(64.70427178323177 /10,  -2.2111014194960843 /10,  36.7 /10),   //53
new THREE.Vector3(65.89837401253374 /10,  -2.456215405381426 /10,  36.7 /10),   //54
new THREE.Vector3(66.67976281410634 /10,  1.350414014560541 /10,  36.7 /10),   //55
new THREE.Vector3(70.26304907719401 /10,  0.6148709789977786 /10,  36.7 /10),   //56
new THREE.Vector3(69.93448775404329 /10,  -0.9857549788389409 /10,  36.7 /10),   //57
new THREE.Vector3(72.2502036439265 /10,  -1.4611031843931364 /10,  36.7 /10),   //58
new THREE.Vector3(73.21900356583838 /10,  -1.6599692484185293 /10,  36.7 /10),   //59
new THREE.Vector3(72.74526398361883 /10,  -3.9678485364742895 /10,  36.7 /10),   //60
new THREE.Vector3(73.08811532106972 /10,  -4.038225808894 /10,  36.7 /10),   //61
new THREE.Vector3(71.9872141978968 /10,  -9.401397888504897 /10,  36.7 /10),   //62
new THREE.Vector3(71.25327888586703 /10,  -12.9768519332563 /10,  36.7 /10),   //63
new THREE.Vector3(71.17385351175938 /10,  -13.363782185084125 /10,  36.7 /10),   //64
new THREE.Vector3(69.18923405112446 /10,  -12.956398337114543 /10,  36.7 /10),   //65
new THREE.Vector3(69.2043148952096 /10,  -12.882930193397707 /10,  36.7 /10),   //66
new THREE.Vector3(65.53114304854802 /10,  -7.278874984733785 /10,  39.90000000000002 /10),   //67
new THREE.Vector3(63.73949991757419 /10,  -6.9111034670690765 /10,  39.90000000000002 /10),   //68
new THREE.Vector3(64.58587573704733 /10,  -11.883858253528091 /10,  39.90000000000002 /10),   //69
new THREE.Vector3(72.74526398361883 /10,  -3.9678485364742895 /10,  39.90000000000002 /10),   //70
new THREE.Vector3(73.08811532106972 /10,  -4.038225808894 /10,  39.90000000000002 /10),   //71
new THREE.Vector3(65.89837401253374 /10,  -2.456215405381426 /10,  39.90000000000002 /10),   //72
new THREE.Vector3(64.70427178323177 /10,  -2.2111014194960843 /10,  39.90000000000002 /10),   //73
new THREE.Vector3(64.57582184098968 /10,  -11.932837016011115 /10,  39.90000000000002 /10),   //74
new THREE.Vector3(69.2043148952096 /10,  -12.882930193397707 /10,  39.90000000000002 /10),   //75
new THREE.Vector3(69.18923405112446 /10,  -12.956398337114543 /10,  39.90000000000002 /10),   //76
new THREE.Vector3(71.17385351175938 /10,  -13.363782185084125 /10,  39.90000000000002 /10),   //77
new THREE.Vector3(71.25327888586703 /10,  -12.9768519332563 /10,  39.90000000000002 /10),   //78
new THREE.Vector3(71.9872141978968 /10,  -9.401397888504897 /10,  39.90000000000002 /10),   //79
new THREE.Vector3(73.21900356583838 /10,  -1.6599692484185293 /10,  39.90000000000002 /10),   //80
new THREE.Vector3(72.2502036439265 /10,  -1.4611031843931364 /10,  39.90000000000002 /10),   //81
new THREE.Vector3(69.93448775404329 /10,  -0.9857549788389409 /10,  39.90000000000002 /10),   //82
new THREE.Vector3(70.26304907719401 /10,  0.6148709789977786 /10,  39.90000000000002 /10),   //83
new THREE.Vector3(66.67976281410634 /10,  1.350414014560541 /10,  39.90000000000002 /10),   //84
new THREE.Vector3(64.70427178323189 /10,  -2.211101419496114 /10,  39.90000000000002 /10),   //85
new THREE.Vector3(63.73949991757429 /10,  -6.911103467069104 /10,  39.90000000000002 /10),   //86
new THREE.Vector3(63.73949991757429 /10,  -6.911103467069104 /10,  36.7 /10),   //87
new THREE.Vector3(64.70427178323189 /10,  -2.211101419496114 /10,  36.7 /10),   //88
new THREE.Vector3(65.8983740125338 /10,  -2.4562154053815344 /10,  39.90000000000002 /10),   //89
new THREE.Vector3(65.8983740125338 /10,  -2.4562154053815344 /10,  36.7 /10),   //90
new THREE.Vector3(71.17385351175945 /10,  -13.363782185084078 /10,  39.90000000000002 /10),   //91
new THREE.Vector3(69.18923405112446 /10,  -12.95639833711455 /10,  39.90000000000002 /10),   //92
new THREE.Vector3(69.18923405112446 /10,  -12.95639833711455 /10,  36.7 /10),   //93
new THREE.Vector3(71.17385351175945 /10,  -13.363782185084078 /10,  36.7 /10),   //94
new THREE.Vector3(69.20431489520968 /10,  -12.882930193397664 /10,  39.90000000000002 /10),   //95
new THREE.Vector3(64.57582184098973 /10,  -11.932837016011106 /10,  39.90000000000002 /10),   //96
new THREE.Vector3(64.57582184098973 /10,  -11.932837016011106 /10,  36.7 /10),   //97
new THREE.Vector3(69.20431489520968 /10,  -12.882930193397664 /10,  36.7 /10),   //98
new THREE.Vector3(64.58587573704744 /10,  -11.88385825352809 /10,  39.90000000000002 /10),   //99
new THREE.Vector3(64.58587573704756 /10,  -11.883858253527983 /10,  36.7 /10),   //100
new THREE.Vector3(73.0881153210697 /10,  -4.0382258088939915 /10,  39.90000000000002 /10),   //101
new THREE.Vector3(71.98721419789676 /10,  -9.401397888504897 /10,  39.90000000000002 /10),   //102
new THREE.Vector3(71.98721419789676 /10,  -9.401397888504897 /10,  36.7 /10),   //103
new THREE.Vector3(73.0881153210697 /10,  -4.0382258088939915 /10,  36.7 /10),   //104
new THREE.Vector3(71.52473407926028 /10,  -11.654425347045498 /10,  39.90000000000002 /10),   //105
new THREE.Vector3(71.52473407926028 /10,  -11.654425347045498 /10,  36.7 /10),   //106
new THREE.Vector3(71.17385351175939 /10,  -13.363782185084105 /10,  36.7 /10),   //107
new THREE.Vector3(71.25327888586699 /10,  -12.976851933256304 /10,  36.7 /10),   //108
new THREE.Vector3(71.25327888586699 /10,  -12.976851933256304 /10,  39.90000000000002 /10),   //109
new THREE.Vector3(71.17385351175939 /10,  -13.363782185084105 /10,  39.90000000000002 /10),   //110
new THREE.Vector3(72.20836476207208 /10,  -13.172902907984241 /10,  36.7 /10),   //111
new THREE.Vector3(72.05252977792817 /10,  -13.932071754664248 /10,  36.7 /10),   //112
new THREE.Vector3(71.12193329085409 /10,  -13.74104772958481 /10,  36.7 /10),   //113
new THREE.Vector3(71.19834289669764 /10,  -13.36880915515949 /10,  36.7 /10),   //114
new THREE.Vector3(72.47981995562041 /10,  -11.850476321019313 /10,  36.7 /10),   //115
new THREE.Vector3(72.94229961825836 /10,  -9.597451083928771 /10,  36.7 /10),   //116
new THREE.Vector3(73.09314227119494 /10,  -4.013736417439407 /10,  36.7 /10),   //117
new THREE.Vector3(75.53032549209618 /10,  -4.514018285229473 /10,  36.7 /10),   //118
new THREE.Vector3(73.6110367326603 /10,  -13.864064052874106 /10,  36.7 /10),   //119
new THREE.Vector3(73.5865473553011 /10,  -13.859037126929824 /10,  36.7 /10),   //120
new THREE.Vector3(73.51013774945763 /10,  -14.23127570135518 /10,  36.7 /10),   //121
new THREE.Vector3(73.09314227119494 /10,  -4.013736417439407 /10,  39.90000000000002 /10),   //122
new THREE.Vector3(75.53032549209618 /10,  -4.514018285229473 /10,  39.90000000000002 /10),   //123
new THREE.Vector3(72.94229961825836 /10,  -9.597451083928771 /10,  39.90000000000002 /10),   //124
new THREE.Vector3(72.47981995562041 /10,  -11.850476321019313 /10,  39.90000000000002 /10),   //125
new THREE.Vector3(72.20836476207208 /10,  -13.172902907984241 /10,  39.90000000000002 /10),   //126
new THREE.Vector3(71.19834289669764 /10,  -13.36880915515949 /10,  39.90000000000002 /10),   //127
new THREE.Vector3(71.12193329085409 /10,  -13.74104772958481 /10,  39.90000000000002 /10),   //128
new THREE.Vector3(72.05252977792817 /10,  -13.932071754664248 /10,  39.90000000000002 /10),   //129
new THREE.Vector3(73.6110367326603 /10,  -13.864064052874106 /10,  39.90000000000002 /10),   //130
new THREE.Vector3(73.51013774945763 /10,  -14.23127570135518 /10,  39.90000000000002 /10),   //131
new THREE.Vector3(73.5865473553011 /10,  -13.859037126929824 /10,  39.90000000000002 /10),   //132
new THREE.Vector3(59.433377382897575 /10,  -18.792920445696417 /10,  36.7 /10),   //133
new THREE.Vector3(61.225020513643045 /10,  -19.16069196331404 /10,  36.7 /10),   //134
new THREE.Vector3(60.26024864798601 /10,  -23.860694010887162 /10,  36.7 /10),   //135
new THREE.Vector3(59.066146418684085 /10,  -23.61558002500204 /10,  36.7 /10),   //136
new THREE.Vector3(58.28475761711092 /10,  -27.42220944494367 /10,  36.7 /10),   //137
new THREE.Vector3(54.701471354251844 /10,  -26.686666409427758 /10,  36.7 /10),   //138
new THREE.Vector3(54.88525657417734 /10,  -25.79133463130406 /10,  36.7 /10),   //139
new THREE.Vector3(52.56954068475019 /10,  -25.31598642584323 /10,  36.7 /10),   //140
new THREE.Vector3(51.60074076215362 /10,  -25.11712036167752 /10,  36.7 /10),   //141
new THREE.Vector3(54.13351825690949 /10,  -12.778390517718863 /10,  36.7 /10),   //142
new THREE.Vector3(55.77528637170736 /10,  -13.115397134122542 /10,  36.7 /10),   //143
new THREE.Vector3(55.760205527621565 /10,  -13.188865277839557 /10,  36.7 /10),   //144
new THREE.Vector3(60.38869858207001 /10,  -14.138958455272904 /10,  36.7 /10),   //145
new THREE.Vector3(60.37864468601213 /10,  -14.187937217755746 /10,  36.7 /10),   //146
new THREE.Vector3(54.88525657417734 /10,  -25.79133463130406 /10,  39.90000000000002 /10),   //147
new THREE.Vector3(52.56954068475019 /10,  -25.31598642584323 /10,  39.90000000000002 /10),   //148
new THREE.Vector3(60.26024864798601 /10,  -23.860694010887162 /10,  39.90000000000002 /10),   //149
new THREE.Vector3(59.066146418684085 /10,  -23.61558002500204 /10,  39.90000000000002 /10),   //150
new THREE.Vector3(54.701471354251844 /10,  -26.686666409427758 /10,  39.90000000000002 /10),   //151
new THREE.Vector3(58.28475761711092 /10,  -27.42220944494367 /10,  39.90000000000002 /10),   //152
new THREE.Vector3(59.433377382897575 /10,  -18.792920445696417 /10,  39.90000000000002 /10),   //153
new THREE.Vector3(61.225020513643145 /10,  -19.160691963313834 /10,  39.90000000000002 /10),   //154
new THREE.Vector3(60.3786446860121 /10,  -14.187937217755968 /10,  39.90000000000002 /10),   //155
new THREE.Vector3(60.38869858207001 /10,  -14.138958455272904 /10,  39.90000000000002 /10),   //156
new THREE.Vector3(55.760205527621565 /10,  -13.188865277839557 /10,  39.90000000000002 /10),   //157
new THREE.Vector3(55.77528637170736 /10,  -13.115397134122542 /10,  39.90000000000002 /10),   //158
new THREE.Vector3(54.13351825690949 /10,  -12.778390517718863 /10,  39.90000000000002 /10),   //159
new THREE.Vector3(51.60074076215362 /10,  -25.11712036167752 /10,  39.90000000000002 /10),   //160
new THREE.Vector3(54.1335182569096 /10,  -12.778390517719096 /10,  39.90000000000002 /10),   //161
new THREE.Vector3(55.77528637170734 /10,  -13.115397134122704 /10,  39.90000000000002 /10),   //162
new THREE.Vector3(55.77528637170734 /10,  -13.115397134122704 /10,  36.7 /10),   //163
new THREE.Vector3(54.1335182569096 /10,  -12.778390517719096 /10,  36.7 /10),   //164
new THREE.Vector3(51.600740762153706 /10,  -25.117120361677507 /10,  39.90000000000002 /10),   //165
new THREE.Vector3(51.600740762153706 /10,  -25.117120361677507 /10,  36.7 /10),   //166
new THREE.Vector3(55.76020552762154 /10,  -13.188865277839561 /10,  39.90000000000002 /10),   //167
new THREE.Vector3(60.388698582069956 /10,  -14.138958455272913 /10,  39.90000000000002 /10),   //168
new THREE.Vector3(60.388698582069956 /10,  -14.138958455272913 /10,  36.7 /10),   //169
new THREE.Vector3(55.76020552762154 /10,  -13.188865277839561 /10,  36.7 /10),   //170
new THREE.Vector3(55.775286371707345 /10,  -13.115397134122539 /10,  39.90000000000002 /10),   //171
new THREE.Vector3(55.775286371707345 /10,  -13.115397134122539 /10,  36.7 /10),   //172
new THREE.Vector3(60.378644686012095 /10,  -14.187937217755977 /10,  39.90000000000002 /10),   //173
new THREE.Vector3(60.3786446860121 /10,  -14.187937217755746 /10,  36.7 /10),   //174
new THREE.Vector3(67.12775010056251 /10,  -31.334242284537197 /10,  36.7 /10),   //175
new THREE.Vector3(64.81203421045133 /10,  -30.858894078936043 /10,  36.7 /10),   //176
new THREE.Vector3(63.84323428876728 /10,  -30.660028014957508 /10,  36.7 /10),   //177
new THREE.Vector3(63.65944906883906 /10,  -31.555359793095672 /10,  36.7 /10),   //178
new THREE.Vector3(63.52130853701339 /10,  -32.22832798956135 /10,  36.7 /10),   //179
new THREE.Vector3(59.93802227392623 /10,  -31.492784953998555 /10,  36.7 /10),   //180
new THREE.Vector3(61.45435087728451 /10,  -24.1058079967864 /10,  36.7 /10),   //181
new THREE.Vector3(61.34767804554245 /10,  -18.563151061057802 /10,  36.7 /10),   //182
new THREE.Vector3(63.139321177200074 /10,  -18.9309225788626 /10,  36.7 /10),   //183
new THREE.Vector3(63.96193094841532 /10,  -14.923480253178209 /10,  36.7 /10),   //184
new THREE.Vector3(63.97198484447313 /10,  -14.87450149069531 /10,  36.7 /10),   //185
new THREE.Vector3(68.60047789869324 /10,  -15.824594668081748 /10,  36.7 /10),   //186
new THREE.Vector3(68.6155587427784 /10,  -15.751126524364675 /10,  36.7 /10),   //187
new THREE.Vector3(70.25732686527816 /10,  -16.088133099773977 /10,  36.7 /10),   //188
new THREE.Vector3(61.45435087728451 /10,  -24.1058079967864 /10,  39.90000000000002 /10),   //189
new THREE.Vector3(63.65944906883906 /10,  -31.555359793095672 /10,  39.90000000000002 /10),   //190
new THREE.Vector3(63.52130853701339 /10,  -32.22832798956135 /10,  39.90000000000002 /10),   //191
new THREE.Vector3(67.12775010056251 /10,  -31.334242284537197 /10,  39.90000000000002 /10),   //192
new THREE.Vector3(64.81203421045133 /10,  -30.858894078936043 /10,  39.90000000000002 /10),   //193
new THREE.Vector3(59.93802227392623 /10,  -31.492784953998555 /10,  39.90000000000002 /10),   //194
new THREE.Vector3(70.25732686527816 /10,  -16.088133099773977 /10,  39.90000000000002 /10),   //195
new THREE.Vector3(68.6155587427784 /10,  -15.751126524364675 /10,  39.90000000000002 /10),   //196
new THREE.Vector3(68.60047789869324 /10,  -15.824594668081748 /10,  39.90000000000002 /10),   //197
new THREE.Vector3(63.97198484447313 /10,  -14.87450149069531 /10,  39.90000000000002 /10),   //198
new THREE.Vector3(63.96193094841532 /10,  -14.923480253178209 /10,  39.90000000000002 /10),   //199
new THREE.Vector3(63.139321177200074 /10,  -18.9309225788626 /10,  39.90000000000002 /10),   //200
new THREE.Vector3(61.34767804554245 /10,  -18.563151061057802 /10,  39.90000000000002 /10),   //201
new THREE.Vector3(63.84323428876728 /10,  -30.660028014957508 /10,  39.90000000000002 /10),   //202
new THREE.Vector3(61.34767804554257 /10,  -18.563151061057898 /10,  36.7 /10),   //203
new THREE.Vector3(61.225020513643265 /10,  -19.160691963314118 /10,  36.7 /10),   //204
new THREE.Vector3(61.22502051364338 /10,  -19.160691963314054 /10,  39.90000000000002 /10),   //205
new THREE.Vector3(61.34767804554257 /10,  -18.563151061057898 /10,  39.90000000000002 /10),   //206
new THREE.Vector3(60.26024864798601 /10,  -23.860694010887148 /10,  39.90000000000002 /10),   //207
new THREE.Vector3(60.26024864798601 /10,  -23.860694010887148 /10,  36.7 /10),   //208
new THREE.Vector3(63.97198484447321 /10,  -14.874501490695305 /10,  36.7 /10),   //209
new THREE.Vector3(63.96193094841532 /10,  -14.9234802531782 /10,  36.7 /10),   //210
new THREE.Vector3(63.96193094841532 /10,  -14.9234802531782 /10,  39.90000000000002 /10),   //211
new THREE.Vector3(63.97198484447321 /10,  -14.874501490695305 /10,  39.90000000000002 /10),   //212
new THREE.Vector3(68.6004778986933 /10,  -15.824594668081774 /10,  39.90000000000002 /10),   //213
new THREE.Vector3(68.6004778986933 /10,  -15.824594668081774 /10,  36.7 /10),   //214
new THREE.Vector3(68.61555874277853 /10,  -15.75112652436469 /10,  39.90000000000002 /10),   //215
new THREE.Vector3(70.25732686527826 /10,  -16.088133099774 /10,  39.90000000000002 /10),   //216
new THREE.Vector3(70.25732686527826 /10,  -16.088133099774 /10,  36.7 /10),   //217
new THREE.Vector3(68.61555874277853 /10,  -15.75112652436469 /10,  36.7 /10),   //218
new THREE.Vector3(75.67984352248143 /10,  -21.505122125355072 /10,  36.7 /10),   //219
new THREE.Vector3(75.18995502704978 /10,  -26.92532260707143 /10,  36.7 /10),   //220
new THREE.Vector3(73.67362642369146 /10,  -34.31229956428324 /10,  36.7 /10),   //221
new THREE.Vector3(70.09034016083248 /10,  -33.57675652876732 /10,  36.7 /10),   //222
new THREE.Vector3(70.41226591258597 /10,  -32.008456554163594 /10,  36.7 /10),   //223
new THREE.Vector3(68.0965500224751 /10,  -31.533108348562486 /10,  36.7 /10),   //224
new THREE.Vector3(71.89909497961983 /10,  -16.42513971608384 /10,  36.7 /10),   //225
new THREE.Vector3(71.88401413553446 /10,  -16.498607859800916 /10,  36.7 /10),   //226
new THREE.Vector3(76.51250718975442 /10,  -17.4487010371875 /10,  36.7 /10),   //227
new THREE.Vector3(76.50245329369682 /10,  -17.49767979967039 /10,  36.7 /10),   //228
new THREE.Vector3(75.67984352248143 /10,  -21.505122125355072 /10,  39.90000000000002 /10),   //229
new THREE.Vector3(75.18995502704978 /10,  -26.92532260707143 /10,  39.90000000000002 /10),   //230
new THREE.Vector3(76.5024532936967 /10,  -17.49767979967039 /10,  39.90000000000002 /10),   //231
new THREE.Vector3(76.51250718975442 /10,  -17.4487010371875 /10,  39.90000000000002 /10),   //232
new THREE.Vector3(71.88401413553446 /10,  -16.498607859800916 /10,  39.90000000000002 /10),   //233
new THREE.Vector3(71.89909497961983 /10,  -16.42513971608384 /10,  39.90000000000002 /10),   //234
new THREE.Vector3(68.0965500224751 /10,  -31.533108348562486 /10,  39.90000000000002 /10),   //235
new THREE.Vector3(70.41226591258597 /10,  -32.008456554163594 /10,  39.90000000000002 /10),   //236
new THREE.Vector3(70.09034016083248 /10,  -33.57675652876732 /10,  39.90000000000002 /10),   //237
new THREE.Vector3(73.67362642369146 /10,  -34.31229956428324 /10,  39.90000000000002 /10),   //238
new THREE.Vector3(70.25732686527817 /10,  -16.0881330997742 /10,  36.7 /10),   //239
new THREE.Vector3(67.12775010056251 /10,  -31.3342422845372 /10,  36.7 /10),   //240
new THREE.Vector3(67.12775010056251 /10,  -31.3342422845372 /10,  39.90000000000002 /10),   //241
new THREE.Vector3(70.25732686527817 /10,  -16.0881330997742 /10,  39.90000000000002 /10),   //242
new THREE.Vector3(71.89909497961973 /10,  -16.42513971608412 /10,  39.90000000000002 /10),   //243
new THREE.Vector3(71.89909497961973 /10,  -16.42513971608412 /10,  36.7 /10),   //244
new THREE.Vector3(71.89909497961987 /10,  -16.425139716083855 /10,  39.90000000000002 /10),   //245
new THREE.Vector3(71.88401413553454 /10,  -16.49860785980093 /10,  39.90000000000002 /10),   //246
new THREE.Vector3(71.88401413553454 /10,  -16.49860785980093 /10,  36.7 /10),   //247
new THREE.Vector3(71.89909497961987 /10,  -16.425139716083855 /10,  36.7 /10),   //248
new THREE.Vector3(76.51250718975452 /10,  -17.44870103718752 /10,  39.90000000000002 /10),   //249
new THREE.Vector3(76.51250718975452 /10,  -17.44870103718752 /10,  36.7 /10),   //250
new THREE.Vector3(76.50245329369673 /10,  -17.49767979967039 /10,  39.90000000000002 /10),   //251
new THREE.Vector3(76.50245329369682 /10,  -17.497679799670383 /10,  36.7 /10),   //252
new THREE.Vector3(79.7406509940442 /10,  -10.818386951380484 /10,  36.7 /10),   //253
new THREE.Vector3(77.9490078626144 /10,  -10.450615433622538 /10,  36.7 /10),   //254
new THREE.Vector3(77.12639808301314 /10,  -14.458057800160798 /10,  36.7 /10),   //255
new THREE.Vector3(77.11634418695536 /10,  -14.50703656264373 /10,  36.7 /10),   //256
new THREE.Vector3(75.24339630971066 /10,  -14.122575577410379 /10,  36.7 /10),   //257
new THREE.Vector3(75.22831546562512 /10,  -14.19604372112742 /10,  36.7 /10),   //258
new THREE.Vector3(75.94535031924318 /10,  -2.492174980278194 /10,  36.7 /10),   //259
new THREE.Vector3(77.70368796632529 /10,  -2.8531098639359995 /10,  36.7 /10),   //260
new THREE.Vector3(78.64799843296439 /10,  -3.0469489647358383 /10,  36.7 /10),   //261
new THREE.Vector3(78.8239416139669 /10,  -2.1898206213366778 /10,  36.7 /10),   //262
new THREE.Vector3(81.40316324607856 /10,  -2.71925878769643 /10,  36.7 /10),   //263
new THREE.Vector3(80.72130801547164 /10,  -6.0409984590910835 /10,  36.7 /10),   //264
new THREE.Vector3(75.94535031924318 /10,  -2.492174980278194 /10,  39.90000000000002 /10),   //265
new THREE.Vector3(77.70368796632529 /10,  -2.8531098639359995 /10,  39.90000000000002 /10),   //266
new THREE.Vector3(78.8239416139669 /10,  -2.1898206213366778 /10,  39.90000000000002 /10),   //267
new THREE.Vector3(81.40316324607856 /10,  -2.71925878769643 /10,  39.90000000000002 /10),   //268
new THREE.Vector3(80.72130801547164 /10,  -6.0409984590910835 /10,  39.90000000000002 /10),   //269
new THREE.Vector3(79.7406509940442 /10,  -10.818386951380484 /10,  39.90000000000002 /10),   //270
new THREE.Vector3(77.9490078626144 /10,  -10.450615433622538 /10,  39.90000000000002 /10),   //271
new THREE.Vector3(75.22831546562512 /10,  -14.19604372112742 /10,  39.90000000000002 /10),   //272
new THREE.Vector3(75.24339630971066 /10,  -14.122575577410379 /10,  39.90000000000002 /10),   //273
new THREE.Vector3(77.11634418695536 /10,  -14.50703656264373 /10,  39.90000000000002 /10),   //274
new THREE.Vector3(77.12639808301314 /10,  -14.458057800160766 /10,  39.90000000000002 /10),   //275
new THREE.Vector3(78.64799843296439 /10,  -3.0469489647358383 /10,  39.90000000000002 /10),   //276
new THREE.Vector3(75.22831546562519 /10,  -14.196043721127435 /10,  39.90000000000002 /10),   //277
new THREE.Vector3(73.61103673266031 /10,  -13.864064052874095 /10,  39.90000000000002 /10),   //278
new THREE.Vector3(73.61103673266031 /10,  -13.864064052874095 /10,  36.7 /10),   //279
new THREE.Vector3(75.22831546562519 /10,  -14.196043721127435 /10,  36.7 /10),   //280
new THREE.Vector3(77.11634418695544 /10,  -14.507036562643728 /10,  39.90000000000002 /10),   //281
new THREE.Vector3(75.24339630971069 /10,  -14.122575577410387 /10,  39.90000000000002 /10),   //282
new THREE.Vector3(75.24339630971069 /10,  -14.122575577410387 /10,  36.7 /10),   //283
new THREE.Vector3(77.11634418695544 /10,  -14.507036562643728 /10,  36.7 /10),   //284
new THREE.Vector3(77.12639808301321 /10,  -14.458057800160821 /10,  36.7 /10),   //285
new THREE.Vector3(77.12639808301323 /10,  -14.45805780016078 /10,  39.90000000000002 /10),   //286
new THREE.Vector3(75.53032549209614 /10,  -4.514018285229531 /10,  39.90000000000002 /10),   //287
new THREE.Vector3(75.94535031924308 /10,  -2.4921749802782447 /10,  39.90000000000002 /10),   //288
new THREE.Vector3(75.94535031924308 /10,  -2.4921749802782447 /10,  36.7 /10),   //289
new THREE.Vector3(75.53032549209614 /10,  -4.514018285229531 /10,  36.7 /10),   //290
new THREE.Vector3(73.61103673266025 /10,  -13.86406405287411 /10,  39.90000000000002 /10),   //291
new THREE.Vector3(73.61103673266025 /10,  -13.86406405287411 /10,  36.7 /10),   //292
new THREE.Vector3(63.510169553929856 /10,  -1.965987433611043 /10,  36.7 /10),   //293
new THREE.Vector3(61.94785678682914 /10,  -6.54333194945165 /10,  36.7 /10),   //294
new THREE.Vector3(61.002589475328485 /10,  -11.148315218246168 /10,  36.7 /10),   //295
new THREE.Vector3(60.992535579270694 /10,  -11.197293980729269 /10,  36.7 /10),   //296
new THREE.Vector3(56.36404252482225 /10,  -10.247200803295442 /10,  36.7 /10),   //297
new THREE.Vector3(56.34896168073706 /10,  -10.320668947012493 /10,  36.7 /10),   //298
new THREE.Vector3(54.70719356593912 /10,  -9.983662330609068 /10,  36.7 /10),   //299
new THREE.Vector3(57.239971060694835 /10,  2.355067513349307 /10,  36.7 /10),   //300
new THREE.Vector3(59.55568630193228 /10,  1.879719440943114 /10,  36.7 /10),   //301
new THREE.Vector3(60.52448687271844 /10,  1.6808532437227772 /10,  36.7 /10),   //302
new THREE.Vector3(60.708272092643874 /10,  2.576185021846479 /10,  36.7 /10),   //303
new THREE.Vector3(64.29155835550307 /10,  1.8406419863307968 /10,  36.7 /10),   //304
new THREE.Vector3(60.708272092643874 /10,  2.576185021846479 /10,  39.90000000000002 /10),   //305
new THREE.Vector3(64.29155835550307 /10,  1.8406419863307968 /10,  39.90000000000002 /10),   //306
new THREE.Vector3(56.34896168073706 /10,  -10.320668947012493 /10,  39.90000000000002 /10),   //307
new THREE.Vector3(56.36404252482225 /10,  -10.247200803295442 /10,  39.90000000000002 /10),   //308
new THREE.Vector3(60.992535579270694 /10,  -11.197293980729269 /10,  39.90000000000002 /10),   //309
new THREE.Vector3(61.002589475328485 /10,  -11.148315218246168 /10,  39.90000000000002 /10),   //310
new THREE.Vector3(61.94785678682914 /10,  -6.54333194945165 /10,  39.90000000000002 /10),   //311
new THREE.Vector3(63.510169553929856 /10,  -1.965987433611043 /10,  39.90000000000002 /10),   //312
new THREE.Vector3(60.52448687271844 /10,  1.6808532437227772 /10,  39.90000000000002 /10),   //313
new THREE.Vector3(59.55568630193228 /10,  1.879719440943114 /10,  39.90000000000002 /10),   //314
new THREE.Vector3(57.239971060694835 /10,  2.355067513349307 /10,  39.90000000000002 /10),   //315
new THREE.Vector3(54.70719356593912 /10,  -9.983662330609068 /10,  39.90000000000002 /10),   //316
new THREE.Vector3(57.239971060694884 /10,  2.3550675133492653 /10,  39.90000000000002 /10),   //317
new THREE.Vector3(54.707193565939164 /10,  -9.98366233060901 /10,  39.90000000000002 /10),   //318
new THREE.Vector3(54.707193565939164 /10,  -9.98366233060901 /10,  36.7 /10),   //319
new THREE.Vector3(57.239971060694884 /10,  2.3550675133492653 /10,  36.7 /10),   //320
new THREE.Vector3(56.34896168073705 /10,  -10.320668947012498 /10,  39.90000000000002 /10),   //321
new THREE.Vector3(56.34896168073705 /10,  -10.320668947012498 /10,  36.7 /10),   //322
new THREE.Vector3(60.99253557927071 /10,  -11.197293980729253 /10,  39.90000000000002 /10),   //323
new THREE.Vector3(56.36404252482229 /10,  -10.247200803295447 /10,  39.90000000000002 /10),   //324
new THREE.Vector3(56.36404252482229 /10,  -10.247200803295447 /10,  36.7 /10),   //325
new THREE.Vector3(60.99253557927071 /10,  -11.197293980729253 /10,  36.7 /10),   //326
new THREE.Vector3(61.002589475328485 /10,  -11.148315218246134 /10,  36.7 /10),   //327
new THREE.Vector3(61.002589475328485 /10,  -11.148315218246134 /10,  39.90000000000002 /10),   //328
new THREE.Vector3(56.34896168073705 /10,  -10.320668947012534 /10,  39.90000000000002 /10),   //329
new THREE.Vector3(56.34896168073705 /10,  -10.320668947012534 /10,  36.7 /10),   //330
new THREE.Vector3(49.361851972292484 /10,  4.9052705623161446 /10,  36.7 /10),   //331
new THREE.Vector3(48.580463174863006 /10,  1.0986411625588728 /10,  36.7 /10),   //332
new THREE.Vector3(47.61569130920544 /10,  -3.6013608850140737 /10,  36.7 /10),   //333
new THREE.Vector3(47.493033777353126 /10,  -4.198901787042139 /10,  36.7 /10),   //334
new THREE.Vector3(45.70139064592339 /10,  -3.8311302692840092 /10,  36.7 /10),   //335
new THREE.Vector3(44.87878087284302 /10,  -7.8385726376364495 /10,  36.7 /10),   //336
new THREE.Vector3(44.86872697678515 /10,  -7.887551400119227 /10,  36.7 /10),   //337
new THREE.Vector3(41.93196037667412 /10,  -7.284719801822533 /10,  36.7 /10),   //338
new THREE.Vector3(41.91687953034765 /10,  -7.358187956458736 /10,  36.7 /10),   //339
new THREE.Vector3(38.60787433717548 /10,  -6.67894673882242 /10,  36.7 /10),   //340
new THREE.Vector3(38.63803602534591 /10,  -6.5320104513884 /10,  36.7 /10),   //341
new THREE.Vector3(38.80674040277969 /10,  -5.710146774480647 /10,  36.7 /10),   //342
new THREE.Vector3(39.81080503375269 /10,  -5.9162516436975165 /10,  36.7 /10),   //343
new THREE.Vector3(41.33618214404503 /10,  1.5148062020965993 /10,  36.7 /10),   //344
new THREE.Vector3(40.33211750656691 /10,  1.7209110396255956 /10,  36.7 /10),   //345
new THREE.Vector3(41.14065182513556 /10,  5.659783106768768 /10,  36.7 /10),   //346
new THREE.Vector3(42.10945174795985 /10,  5.460917042556216 /10,  36.7 /10),   //347
new THREE.Vector3(44.75234577474919 /10,  4.918408831900104 /10,  36.7 /10),   //348
new THREE.Vector3(44.936130994677455 /10,  5.813740610038116 /10,  36.7 /10),   //349
new THREE.Vector3(38.8067404073134 /10,  -5.710146775411352 /10,  39.90000000000002 /10),   //350
new THREE.Vector3(39.81080503375269 /10,  -5.9162516436975165 /10,  39.90000000000002 /10),   //351
new THREE.Vector3(41.33618214404503 /10,  1.5148062020965993 /10,  39.90000000000002 /10),   //352
new THREE.Vector3(40.33211750656691 /10,  1.7209110396255956 /10,  39.90000000000002 /10),   //353
new THREE.Vector3(41.14065182513556 /10,  5.659783106768768 /10,  39.90000000000002 /10),   //354
new THREE.Vector3(38.63803602534591 /10,  -6.5320104513884 /10,  39.90000000000002 /10),   //355
new THREE.Vector3(38.60787433717548 /10,  -6.67894673882242 /10,  39.90000000000002 /10),   //356
new THREE.Vector3(41.91687953034765 /10,  -7.358187956458736 /10,  39.90000000000002 /10),   //357
new THREE.Vector3(41.93196037667412 /10,  -7.284719801822533 /10,  39.90000000000002 /10),   //358
new THREE.Vector3(44.86872697678515 /10,  -7.887551400119227 /10,  39.90000000000002 /10),   //359
new THREE.Vector3(44.87878087284302 /10,  -7.8385726376364495 /10,  39.90000000000002 /10),   //360
new THREE.Vector3(45.70139064592339 /10,  -3.8311302692840092 /10,  39.90000000000002 /10),   //361
new THREE.Vector3(47.493033777353126 /10,  -4.198901787042139 /10,  39.90000000000002 /10),   //362
new THREE.Vector3(47.61569130920544 /10,  -3.6013608850140737 /10,  39.90000000000002 /10),   //363
new THREE.Vector3(48.580463174863006 /10,  1.0986411625588728 /10,  39.90000000000002 /10),   //364
new THREE.Vector3(49.361851972292484 /10,  4.9052705623161446 /10,  39.90000000000002 /10),   //365
new THREE.Vector3(44.936130994677455 /10,  5.813740610038116 /10,  39.90000000000002 /10),   //366
new THREE.Vector3(44.75234577474919 /10,  4.918408831900104 /10,  39.90000000000002 /10),   //367
new THREE.Vector3(42.1094517485224 /10,  5.460917045295967 /10,  39.90000000000002 /10),   //368
new THREE.Vector3(44.86872697678513 /10,  -7.887551400119184 /10,  36.7 /10),   //369
new THREE.Vector3(44.878780872842995 /10,  -7.838572637636448 /10,  36.7 /10),   //370
new THREE.Vector3(44.878780872842995 /10,  -7.838572637636448 /10,  39.90000000000002 /10),   //371
new THREE.Vector3(44.86872697678513 /10,  -7.887551400119184 /10,  39.90000000000002 /10),   //372
new THREE.Vector3(41.916879530347614 /10,  -7.358187956458725 /10,  39.90000000000002 /10),   //373
new THREE.Vector3(38.60787433717553 /10,  -6.67894673882242 /10,  39.90000000000002 /10),   //374
new THREE.Vector3(38.60787433717553 /10,  -6.67894673882242 /10,  36.7 /10),   //375
new THREE.Vector3(41.916879530347614 /10,  -7.358187956458725 /10,  36.7 /10),   //376
new THREE.Vector3(41.93196037667411 /10,  -7.284719801822481 /10,  39.90000000000002 /10),   //377
new THREE.Vector3(41.93196037667411 /10,  -7.284719801822481 /10,  36.7 /10),   //378
new THREE.Vector3(38.63803602534588 /10,  -6.532010451388337 /10,  39.90000000000002 /10),   //379
new THREE.Vector3(38.63803602534588 /10,  -6.532010451388337 /10,  36.7 /10),   //380
new THREE.Vector3(38.63803602534594 /10,  -6.532010451388393 /10,  36.7 /10),   //381
new THREE.Vector3(38.80674040277969 /10,  -5.710146774480656 /10,  36.7 /10),   //382
new THREE.Vector3(38.806740407313384 /10,  -5.710146775411356 /10,  39.90000000000002 /10),   //383
new THREE.Vector3(38.63803602534594 /10,  -6.532010451388393 /10,  39.90000000000002 /10),   //384
new THREE.Vector3(48.46206713456184 /10,  -8.574115672918214 /10,  36.7 /10),   //385
new THREE.Vector3(49.407334439950944 /10,  -3.969132402631598 /10,  36.7 /10),   //386
new THREE.Vector3(49.7745654041646 /10,  0.8535271766736755 /10,  36.7 /10),   //387
new THREE.Vector3(50.555954205737535 /10,  4.660156596615411 /10,  36.7 /10),   //388
new THREE.Vector3(54.13924046882521 /10,  3.9246135610526838 /10,  36.7 /10),   //389
new THREE.Vector3(53.95545524889973 /10,  3.029281782929086 /10,  36.7 /10),   //390
new THREE.Vector3(56.271170489908954 /10,  2.5539337105693956 /10,  36.7 /10),   //391
new THREE.Vector3(53.06542544275557 /10,  -9.646655755059534 /10,  36.7 /10),   //392
new THREE.Vector3(53.08050628684084 /10,  -9.573187611342334 /10,  36.7 /10),   //393
new THREE.Vector3(48.45201323239262 /10,  -8.62309443390898 /10,  36.7 /10),   //394
new THREE.Vector3(54.13924046882521 /10,  3.9246135610526838 /10,  39.90000000000002 /10),   //395
new THREE.Vector3(53.95545524889973 /10,  3.029281782929086 /10,  39.90000000000002 /10),   //396
new THREE.Vector3(49.407334439950944 /10,  -3.969132402631598 /10,  39.90000000000002 /10),   //397
new THREE.Vector3(50.555954205737535 /10,  4.660156596615411 /10,  39.90000000000002 /10),   //398
new THREE.Vector3(56.271170489908954 /10,  2.5539337105693956 /10,  39.90000000000002 /10),   //399
new THREE.Vector3(49.7745654041646 /10,  0.8535271766736755 /10,  39.90000000000002 /10),   //400
new THREE.Vector3(48.46206712840362 /10,  -8.57411567165424 /10,  39.90000000000002 /10),   //401
new THREE.Vector3(48.45201323239262 /10,  -8.62309443390898 /10,  39.90000000000002 /10),   //402
new THREE.Vector3(53.08050628684084 /10,  -9.573187611342334 /10,  39.90000000000002 /10),   //403
new THREE.Vector3(53.06542544275557 /10,  -9.646655755059534 /10,  39.90000000000002 /10),   //404
new THREE.Vector3(48.58046317486303 /10,  1.0986411625588965 /10,  39.90000000000002 /10),   //405
new THREE.Vector3(49.774565404164605 /10,  0.8535271766737066 /10,  39.90000000000002 /10),   //406
new THREE.Vector3(49.774565404164605 /10,  0.8535271766737066 /10,  36.7 /10),   //407
new THREE.Vector3(48.58046317486303 /10,  1.0986411625588965 /10,  36.7 /10),   //408
new THREE.Vector3(47.61569130920543 /10,  -3.6013608850140453 /10,  36.7 /10),   //409
new THREE.Vector3(47.61569130920543 /10,  -3.6013608850140453 /10,  39.90000000000002 /10),   //410
new THREE.Vector3(53.080506286840894 /10,  -9.57318761134237 /10,  39.90000000000002 /10),   //411
new THREE.Vector3(48.452013232392616 /10,  -8.62309443390897 /10,  39.90000000000002 /10),   //412
new THREE.Vector3(48.452013232392616 /10,  -8.62309443390897 /10,  36.7 /10),   //413
new THREE.Vector3(53.080506286840894 /10,  -9.57318761134237 /10,  36.7 /10),   //414
new THREE.Vector3(53.065425442755604 /10,  -9.646655755059523 /10,  39.90000000000002 /10),   //415
new THREE.Vector3(53.065425442755604 /10,  -9.646655755059523 /10,  36.7 /10),   //416
new THREE.Vector3(54.707193565939164 /10,  -9.983662330609082 /10,  39.90000000000002 /10),   //417
new THREE.Vector3(54.707193565939164 /10,  -9.983662330609082 /10,  36.7 /10),   //418
new THREE.Vector3(48.46206712840364 /10,  -8.574115671654258 /10,  39.90000000000002 /10),   //419
new THREE.Vector3(48.46206713456187 /10,  -8.57411567291824 /10,  36.7 /10),   //420
new THREE.Vector3(48.13243973043305 /10,  -25.33823787022173 /10,  36.7 /10),   //421
new THREE.Vector3(44.54915346734556 /10,  -24.602694834658774 /10,  36.7 /10),   //422
new THREE.Vector3(45.330542268918386 /10,  -20.796065414717003 /10,  36.7 /10),   //423
new THREE.Vector3(44.136440039616765 /10,  -20.5509514288318 /10,  36.7 /10),   //424
new THREE.Vector3(45.10121190527417 /10,  -15.85094938125866 /10,  36.7 /10),   //425
new THREE.Vector3(46.89285503601967 /10,  -16.218720898876253 /10,  36.7 /10),   //426
new THREE.Vector3(47.83812233936215 /10,  -11.61373767098252 /10,  36.7 /10),   //427
new THREE.Vector3(47.84817623541985 /10,  -11.564758908499748 /10,  36.7 /10),   //428
new THREE.Vector3(52.47666928964012 /10,  -12.51485208588646 /10,  36.7 /10),   //429
new THREE.Vector3(52.49175013372536 /10,  -12.441383942169445 /10,  36.7 /10),   //430
new THREE.Vector3(49.28502487295479 /10,  -24.641772156263656 /10,  36.7 /10),   //431
new THREE.Vector3(48.31622495035849 /10,  -24.442906092097754 /10,  36.7 /10),   //432
new THREE.Vector3(49.28502487295479 /10,  -24.641772156263656 /10,  39.90000000000002 /10),   //433
new THREE.Vector3(45.330542268918386 /10,  -20.796065414717003 /10,  39.90000000000002 /10),   //434
new THREE.Vector3(44.136440039616765 /10,  -20.5509514288318 /10,  39.90000000000002 /10),   //435
new THREE.Vector3(44.54915346734556 /10,  -24.602694834658774 /10,  39.90000000000002 /10),   //436
new THREE.Vector3(48.13243973043305 /10,  -25.33823787022173 /10,  39.90000000000002 /10),   //437
new THREE.Vector3(52.49175013372536 /10,  -12.441383942169445 /10,  39.90000000000002 /10),   //438
new THREE.Vector3(52.47666928964012 /10,  -12.51485208588646 /10,  39.90000000000002 /10),   //439
new THREE.Vector3(47.84817623541985 /10,  -11.564758908499748 /10,  39.90000000000002 /10),   //440
new THREE.Vector3(47.83812233936214 /10,  -11.613737670982607 /10,  39.90000000000002 /10),   //441
new THREE.Vector3(46.89285503601967 /10,  -16.218720898876253 /10,  39.90000000000002 /10),   //442
new THREE.Vector3(45.10121190527417 /10,  -15.85094938125866 /10,  39.90000000000002 /10),   //443
new THREE.Vector3(48.31622495035849 /10,  -24.442906092097754 /10,  39.90000000000002 /10),   //444
new THREE.Vector3(44.13644003961674 /10,  -20.55095142883187 /10,  39.90000000000002 /10),   //445
new THREE.Vector3(45.101211905274134 /10,  -15.850949381258784 /10,  39.90000000000002 /10),   //446
new THREE.Vector3(45.101211905274134 /10,  -15.850949381258784 /10,  36.7 /10),   //447
new THREE.Vector3(44.13644003961674 /10,  -20.55095142883187 /10,  36.7 /10),   //448
new THREE.Vector3(46.892855036019654 /10,  -16.218720898876345 /10,  39.90000000000002 /10),   //449
new THREE.Vector3(46.892855036019654 /10,  -16.218720898876345 /10,  36.7 /10),   //450
new THREE.Vector3(47.84817623541983 /10,  -11.564758908499739 /10,  36.7 /10),   //451
new THREE.Vector3(47.83812233936213 /10,  -11.613737670982466 /10,  36.7 /10),   //452
new THREE.Vector3(47.83812233936213 /10,  -11.613737670982578 /10,  39.90000000000002 /10),   //453
new THREE.Vector3(47.84817623541983 /10,  -11.564758908499739 /10,  39.90000000000002 /10),   //454
new THREE.Vector3(52.47666928964011 /10,  -12.514852085886416 /10,  39.90000000000002 /10),   //455
new THREE.Vector3(52.47666928964011 /10,  -12.514852085886416 /10,  36.7 /10),   //456
new THREE.Vector3(52.49175013372534 /10,  -12.441383942169383 /10,  39.90000000000002 /10),   //457
new THREE.Vector3(52.49175013372534 /10,  -12.441383942169383 /10,  36.7 /10),   //458
new THREE.Vector3(54.133518256909475 /10,  -12.778390517718844 /10,  39.90000000000002 /10),   //459
new THREE.Vector3(54.133518256909475 /10,  -12.778390517718844 /10,  36.7 /10),   //460
new THREE.Vector3(38.00970964854044 /10,  -9.468647935663727 /10,  36.7 /10),   //461
new THREE.Vector3(35.476932153784844 /10,  -21.80737777962233 /10,  36.7 /10),   //462
new THREE.Vector3(33.16121626458545 /10,  -21.332029574208402 /10,  36.7 /10),   //463
new THREE.Vector3(32.192416341760946 /10,  -21.133163509995935 /10,  36.7 /10),   //464
new THREE.Vector3(32.00863112183609 /10,  -22.028495288119668 /10,  36.7 /10),   //465
new THREE.Vector3(28.42534485897667 /10,  -21.2929522526038 /10,  36.7 /10),   //466
new THREE.Vector3(29.20673366054967 /10,  -17.486322832661887 /10,  36.7 /10),   //467
new THREE.Vector3(28.01263143124748 /10,  -17.241208846776654 /10,  36.7 /10),   //468
new THREE.Vector3(28.977403296905404 /10,  -12.541206799203884 /10,  36.7 /10),   //469
new THREE.Vector3(30.76904642765066 /10,  -12.908978316821115 /10,  36.7 /10),   //470
new THREE.Vector3(31.71431373076475 /10,  -8.30399508888061 /10,  36.7 /10),   //471
new THREE.Vector3(31.724367626822463 /10,  -8.25501632639764 /10,  36.7 /10),   //472
new THREE.Vector3(36.35286068127118 /10,  -9.205109503831139 /10,  36.7 /10),   //473
new THREE.Vector3(36.367941525356485 /10,  -9.131641360113944 /10,  36.7 /10),   //474
new THREE.Vector3(28.42534485897667 /10,  -21.2929522526038 /10,  39.90000000000002 /10),   //475
new THREE.Vector3(29.20673366054967 /10,  -17.486322832661887 /10,  39.90000000000002 /10),   //476
new THREE.Vector3(28.977403296905404 /10,  -12.541206799203884 /10,  39.90000000000002 /10),   //477
new THREE.Vector3(30.76904642765066 /10,  -12.908978316821115 /10,  39.90000000000002 /10),   //478
new THREE.Vector3(32.00863112183609 /10,  -22.028495288119668 /10,  39.90000000000002 /10),   //479
new THREE.Vector3(32.192416341760946 /10,  -21.133163509995935 /10,  39.90000000000002 /10),   //480
new THREE.Vector3(33.16121626458545 /10,  -21.332029574208402 /10,  39.90000000000002 /10),   //481
new THREE.Vector3(35.476932153784844 /10,  -21.80737777962233 /10,  39.90000000000002 /10),   //482
new THREE.Vector3(38.00970964854044 /10,  -9.468647935663727 /10,  39.90000000000002 /10),   //483
new THREE.Vector3(36.367941525356485 /10,  -9.131641360113944 /10,  39.90000000000002 /10),   //484
new THREE.Vector3(36.35286068127118 /10,  -9.205109503831139 /10,  39.90000000000002 /10),   //485
new THREE.Vector3(31.724367626822463 /10,  -8.25501632639764 /10,  39.90000000000002 /10),   //486
new THREE.Vector3(31.71431373076466 /10,  -8.303995088880638 /10,  39.90000000000002 /10),   //487
new THREE.Vector3(28.01263143124748 /10,  -17.241208846776654 /10,  39.90000000000002 /10),   //488
new THREE.Vector3(29.206733660549542 /10,  -17.48632283266183 /10,  39.90000000000002 /10),   //489
new THREE.Vector3(28.01263143124752 /10,  -17.241208846776598 /10,  39.90000000000002 /10),   //490
new THREE.Vector3(28.01263143124752 /10,  -17.241208846776598 /10,  36.7 /10),   //491
new THREE.Vector3(29.206733660549542 /10,  -17.48632283266183 /10,  36.7 /10),   //492
new THREE.Vector3(28.977403296905266 /10,  -12.541206799203703 /10,  39.90000000000002 /10),   //493
new THREE.Vector3(28.977403296905266 /10,  -12.541206799203703 /10,  36.7 /10),   //494
new THREE.Vector3(31.7243676268225 /10,  -8.255016326397618 /10,  36.7 /10),   //495
new THREE.Vector3(31.7143137307649 /10,  -8.30399508888059 /10,  36.7 /10),   //496
new THREE.Vector3(31.71431373076474 /10,  -8.303995088880619 /10,  39.90000000000002 /10),   //497
new THREE.Vector3(31.7243676268225 /10,  -8.255016326397618 /10,  39.90000000000002 /10),   //498
new THREE.Vector3(36.367941525356514 /10,  -9.131641360113921 /10,  39.90000000000002 /10),   //499
new THREE.Vector3(38.00970964854047 /10,  -9.468647935663702 /10,  39.90000000000002 /10),   //500
new THREE.Vector3(38.00970964854047 /10,  -9.468647935663702 /10,  36.7 /10),   //501
new THREE.Vector3(36.367941525356514 /10,  -9.131641360113921 /10,  36.7 /10),   //502
new THREE.Vector3(36.35286068127121 /10,  -9.205109503831093 /10,  39.90000000000002 /10),   //503
new THREE.Vector3(36.35286068127121 /10,  -9.205109503831093 /10,  36.7 /10),   //504
new THREE.Vector3(43.30956877452875 /10,  -15.483177863641352 /10,  36.7 /10),   //505
new THREE.Vector3(42.94233781031508 /10,  -20.30583744294691 /10,  36.7 /10),   //506
new THREE.Vector3(42.160949008741994 /10,  -24.11246686288851 /10,  36.7 /10),   //507
new THREE.Vector3(38.577662745654585 /10,  -23.376923827325644 /10,  36.7 /10),   //508
new THREE.Vector3(38.76144796558051 /10,  -22.48159204920198 /10,  36.7 /10),   //509
new THREE.Vector3(36.44573207638068 /10,  -22.00624384378805 /10,  36.7 /10),   //510
new THREE.Vector3(39.65147776333829 /10,  -9.805654552067336 /10,  36.7 /10),   //511
new THREE.Vector3(39.63639691925237 /10,  -9.879122695784208 /10,  36.7 /10),   //512
new THREE.Vector3(44.26488997370097 /10,  -10.829215873217983 /10,  36.7 /10),   //513
new THREE.Vector3(44.25483607764343 /10,  -10.878194635700535 /10,  36.7 /10),   //514
new THREE.Vector3(42.94233781031508 /10,  -20.30583744294691 /10,  39.90000000000002 /10),   //515
new THREE.Vector3(43.30956877452875 /10,  -15.483177863641352 /10,  39.90000000000002 /10),   //516
new THREE.Vector3(44.26488997370097 /10,  -10.829215873217983 /10,  39.90000000000002 /10),   //517
new THREE.Vector3(39.63639691925237 /10,  -9.879122695784208 /10,  39.90000000000002 /10),   //518
new THREE.Vector3(39.65147776333829 /10,  -9.805654552067336 /10,  39.90000000000002 /10),   //519
new THREE.Vector3(36.44573207638068 /10,  -22.00624384378805 /10,  39.90000000000002 /10),   //520
new THREE.Vector3(38.76144796558051 /10,  -22.48159204920198 /10,  39.90000000000002 /10),   //521
new THREE.Vector3(38.577662745654585 /10,  -23.376923827325644 /10,  39.90000000000002 /10),   //522
new THREE.Vector3(42.160949008741994 /10,  -24.11246686288851 /10,  39.90000000000002 /10),   //523
new THREE.Vector3(44.25483607764308 /10,  -10.878194635700845 /10,  39.90000000000002 /10),   //524
new THREE.Vector3(38.00970964854045 /10,  -9.4686479356638 /10,  39.90000000000002 /10),   //525
new THREE.Vector3(39.651477763338285 /10,  -9.805654552067297 /10,  39.90000000000002 /10),   //526
new THREE.Vector3(39.651477763338285 /10,  -9.805654552067297 /10,  36.7 /10),   //527
new THREE.Vector3(38.00970964854045 /10,  -9.4686479356638 /10,  36.7 /10),   //528
new THREE.Vector3(35.476932153784844 /10,  -21.80737777962223 /10,  39.90000000000002 /10),   //529
new THREE.Vector3(35.476932153784844 /10,  -21.80737777962223 /10,  36.7 /10),   //530
new THREE.Vector3(44.264889973701 /10,  -10.829215873217926 /10,  39.90000000000002 /10),   //531
new THREE.Vector3(44.25483607764311 /10,  -10.878194635700801 /10,  39.90000000000002 /10),   //532
new THREE.Vector3(44.254836077643475 /10,  -10.878194635700558 /10,  36.7 /10),   //533
new THREE.Vector3(44.264889973701 /10,  -10.829215873217926 /10,  36.7 /10),   //534
new THREE.Vector3(39.651477763338306 /10,  -9.805654552067331 /10,  39.90000000000002 /10),   //535
new THREE.Vector3(39.636396919252405 /10,  -9.87912269578419 /10,  39.90000000000002 /10),   //536
new THREE.Vector3(39.636396919252405 /10,  -9.87912269578419 /10,  36.7 /10),   //537
new THREE.Vector3(39.651477763338306 /10,  -9.805654552067331 /10,  36.7 /10),   //538
new THREE.Vector3(26.447745181791532 /10,  -2.9578099574277577 /10,  36.7 /10),   //539
new THREE.Vector3(27.37834166909359 /10,  -3.1488339825538665 /10,  36.7 /10),   //540
new THREE.Vector3(27.152129011997488 /10,  -4.250856117926181 /10,  36.7 /10),   //541
new THREE.Vector3(26.221532524695533 /10,  -4.059832092800032 /10,  36.7 /10),   //542
new THREE.Vector3(29.355935722155564 /10,  -1.8448509557622597 /10,  36.7 /10),   //543
new THREE.Vector3(29.019130212446104 /10,  -3.4856395005294654 /10,  36.7 /10),   //544
new THREE.Vector3(26.153872607322185 /10,  -2.897486581168058 /10,  36.7 /10),   //545
new THREE.Vector3(26.787268058930824 /10,  0.18817545506412697 /10,  36.7 /10),   //546
new THREE.Vector3(29.652525664054814 /10,  -0.3999774642973496 /10,  36.7 /10),   //547
new THREE.Vector3(28.807998387031464 /10,  -4.5141935109263 /10,  36.7 /10),   //548
new THREE.Vector3(28.792917547139293 /10,  -4.587661634216417 /10,  36.7 /10),   //549
new THREE.Vector3(22.450167807716348 /10,  -3.285682095151876 /10,  36.7 /10),   //550
new THREE.Vector3(22.661299624920243 /10,  -2.257128083069707 /10,  36.7 /10),   //551
new THREE.Vector3(26.13879176742986 /10,  -2.970954704458261 /10,  36.7 /10),   //552
new THREE.Vector3(31.04043849332434 /10,  0.6422307581264949 /10,  36.7 /10),   //553
new THREE.Vector3(29.913926954551677 /10,  0.8734703678000679 /10,  36.7 /10),   //554
new THREE.Vector3(27.390501826333985 /10,  3.126901224335873 /10,  36.7 /10),   //555
new THREE.Vector3(27.317033682431536 /10,  3.141982068459266 /10,  36.7 /10),   //556
new THREE.Vector3(27.54324634791678 /10,  4.244004244699829 /10,  36.7 /10),   //557
new THREE.Vector3(28.204459635511824 /10,  4.108276649134383 /10,  36.7 /10),   //558
new THREE.Vector3(28.194405739454034 /10,  4.059297886651721 /10,  36.7 /10),   //559
new THREE.Vector3(30.329879783516606 /10,  3.620948018566358 /10,  36.7 /10),   //560
new THREE.Vector3(31.347658461796385 /10,  3.4120280597383386 /10,  36.7 /10),   //561
new THREE.Vector3(31.357712357854396 /10,  3.4610068222211847 /10,  36.7 /10),   //562
new THREE.Vector3(31.60848362773292 /10,  3.4095308731800507 /10,  36.7 /10),   //563
new THREE.Vector3(31.387297910278207 /10,  2.3319980781876217 /10,  36.7 /10),   //564
new THREE.Vector3(35.978102000548674 /10,  -6.0625682066017355 /10,  36.7 /10),   //565
new THREE.Vector3(31.413281343427595 /10,  -5.125545095295747 /10,  36.7 /10),   //566
new THREE.Vector3(31.428362187509833 /10,  -5.0520769515929045 /10,  36.7 /10),   //567
new THREE.Vector3(31.976299522633933 /10,  -2.382734396428817 /10,  36.7 /10),   //568
new THREE.Vector3(32.534290755029986 /10,  0.3355869271336547 /10,  36.7 /10),   //569
new THREE.Vector3(32.9056395472028 /10,  2.0203273004027613 /10,  36.7 /10),   //570
new THREE.Vector3(33.12682526465746 /10,  3.097860095394601 /10,  36.7 /10),   //571
new THREE.Vector3(33.24927217085747 /10,  3.0727253552513702 /10,  36.7 /10),   //572
new THREE.Vector3(33.59702137851687 /10,  3.0013426944655293 /10,  36.7 /10),   //573
new THREE.Vector3(33.586967482458874 /10,  2.9523639319825845 /10,  36.7 /10),   //574
new THREE.Vector3(37.60812388797605 /10,  2.1269390644651267 /10,  36.7 /10),   //575
new THREE.Vector3(37.59304303969763 /10,  2.0534709003209866 /10,  36.7 /10),   //576
new THREE.Vector3(37.642021802223404 /10,  2.043417004254074 /10,  36.7 /10),   //577
new THREE.Vector3(37.09408446290649 /10,  -0.6259255713365028 /10,  36.7 /10),   //578
new THREE.Vector3(36.541120179754934 /10,  -3.3197575077348054 /10,  36.7 /10),   //579
new THREE.Vector3(35.9931828446311 /10,  -5.9891000628988005 /10,  36.7 /10),   //580
new THREE.Vector3(40.286874982938215 /10,  1.5005066157649067 /10,  36.7 /10),   //581
new THREE.Vector3(39.73893764362128 /10,  -1.1688359598261606 /10,  36.7 /10),   //582
new THREE.Vector3(39.185973360469866 /10,  -3.8626678962240995 /10,  36.7 /10),   //583
new THREE.Vector3(30.58625413297663 /10,  4.869906461799793 /10,  36.7 /10),   //584
new THREE.Vector3(33.373145718059654 /10,  4.297839776145197 /10,  36.7 /10),   //585
new THREE.Vector3(24.129168453479586 /10,  4.893771259435295 /10,  36.7 /10),   //586
new THREE.Vector3(26.751981184272893 /10,  4.355385125568909 /10,  36.7 /10),   //587
new THREE.Vector3(26.906264286285587 /10,  4.323715352947365 /10,  36.7 /10),   //588
new THREE.Vector3(26.916318182343485 /10,  4.372694115430015 /10,  36.7 /10),   //589
new THREE.Vector3(26.916318182343485 /10,  4.372694115430015 /10,  39.90000000000002 /10),   //590
new THREE.Vector3(27.54324634791678 /10,  4.244004244699829 /10,  39.90000000000002 /10),   //591
new THREE.Vector3(26.13879176742986 /10,  -2.970954704458261 /10,  39.90000000000002 /10),   //592
new THREE.Vector3(22.661299624920243 /10,  -2.257128083069707 /10,  39.90000000000002 /10),   //593
new THREE.Vector3(26.153872607320857 /10,  -2.897486581167821 /10,  39.90000000000002 /10),   //594
new THREE.Vector3(26.787268058872357 /10,  0.18817545507616845 /10,  39.90000000000002 /10),   //595
new THREE.Vector3(27.390501826333985 /10,  3.126901224335873 /10,  39.90000000000002 /10),   //596
new THREE.Vector3(27.317033682431536 /10,  3.141982068459266 /10,  39.90000000000002 /10),   //597
new THREE.Vector3(26.906264286285587 /10,  4.323715352947365 /10,  39.90000000000002 /10),   //598
new THREE.Vector3(24.129168453479586 /10,  4.893771259435295 /10,  39.90000000000002 /10),   //599
new THREE.Vector3(26.447745181791532 /10,  -2.9578099574277577 /10,  39.90000000000002 /10),   //600
new THREE.Vector3(26.221532524695533 /10,  -4.059832092800032 /10,  39.90000000000002 /10),   //601
new THREE.Vector3(22.450167807716348 /10,  -3.285682095151876 /10,  39.90000000000002 /10),   //602
new THREE.Vector3(28.204459635511824 /10,  4.108276649134383 /10,  39.90000000000002 /10),   //603
new THREE.Vector3(28.194405739454034 /10,  4.059297886651721 /10,  39.90000000000002 /10),   //604
new THREE.Vector3(31.357712357854396 /10,  3.4610068222211847 /10,  39.90000000000002 /10),   //605
new THREE.Vector3(31.60848362773292 /10,  3.4095308731800507 /10,  39.90000000000002 /10),   //606
new THREE.Vector3(31.347658461796385 /10,  3.4120280597383386 /10,  39.90000000000002 /10),   //607
new THREE.Vector3(30.329879783516606 /10,  3.620948018566358 /10,  39.90000000000002 /10),   //608
new THREE.Vector3(27.37834166909359 /10,  -3.1488339825538665 /10,  39.90000000000002 /10),   //609
new THREE.Vector3(27.152129011997488 /10,  -4.250856117926181 /10,  39.90000000000002 /10),   //610
new THREE.Vector3(29.913926954551677 /10,  0.8734703678000679 /10,  39.90000000000002 /10),   //611
new THREE.Vector3(29.652525664054814 /10,  -0.3999774642973496 /10,  39.90000000000002 /10),   //612
new THREE.Vector3(30.58625413297663 /10,  4.869906461799793 /10,  39.90000000000002 /10),   //613
new THREE.Vector3(33.373145718059654 /10,  4.297839776145197 /10,  39.90000000000002 /10),   //614
new THREE.Vector3(29.019130212446104 /10,  -3.4856395005294654 /10,  39.90000000000002 /10),   //615
new THREE.Vector3(29.355935726260977 /10,  -1.8448509566049207 /10,  39.90000000000002 /10),   //616
new THREE.Vector3(31.387297910278207 /10,  2.3319980781876217 /10,  39.90000000000002 /10),   //617
new THREE.Vector3(31.04043849332434 /10,  0.6422307581264949 /10,  39.90000000000002 /10),   //618
new THREE.Vector3(28.792917547139293 /10,  -4.587661634216417 /10,  39.90000000000002 /10),   //619
new THREE.Vector3(28.807998387305215 /10,  -4.514193510982494 /10,  39.90000000000002 /10),   //620
new THREE.Vector3(32.534290755029986 /10,  0.3355869271336547 /10,  39.90000000000002 /10),   //621
new THREE.Vector3(31.976299522633933 /10,  -2.382734396428817 /10,  39.90000000000002 /10),   //622
new THREE.Vector3(36.541120179754934 /10,  -3.3197575077348054 /10,  39.90000000000002 /10),   //623
new THREE.Vector3(35.9931828446311 /10,  -5.9891000628988005 /10,  39.90000000000002 /10),   //624
new THREE.Vector3(33.24927217085747 /10,  3.0727253552513702 /10,  39.90000000000002 /10),   //625
new THREE.Vector3(33.59702137851687 /10,  3.0013426944655293 /10,  39.90000000000002 /10),   //626
new THREE.Vector3(37.59304303969763 /10,  2.0534709003209866 /10,  39.90000000000002 /10),   //627
new THREE.Vector3(37.642021802223404 /10,  2.043417004254074 /10,  39.90000000000002 /10),   //628
new THREE.Vector3(33.586967482458874 /10,  2.9523639319825845 /10,  39.90000000000002 /10),   //629
new THREE.Vector3(37.60812388797605 /10,  2.1269390644651267 /10,  39.90000000000002 /10),   //630
new THREE.Vector3(33.12682526465746 /10,  3.097860095394601 /10,  39.90000000000002 /10),   //631
new THREE.Vector3(32.9056395472028 /10,  2.0203273004027613 /10,  39.90000000000002 /10),   //632
new THREE.Vector3(31.413281343427595 /10,  -5.125545095295747 /10,  39.90000000000002 /10),   //633
new THREE.Vector3(35.978102000548674 /10,  -6.0625682066017355 /10,  39.90000000000002 /10),   //634
new THREE.Vector3(37.09408446290649 /10,  -0.6259255713365028 /10,  39.90000000000002 /10),   //635
new THREE.Vector3(31.428362187509833 /10,  -5.0520769515929045 /10,  39.90000000000002 /10),   //636
new THREE.Vector3(39.73893764362128 /10,  -1.1688359598261606 /10,  39.90000000000002 /10),   //637
new THREE.Vector3(39.185973360469866 /10,  -3.8626678962240995 /10,  39.90000000000002 /10),   //638
new THREE.Vector3(40.286874982938215 /10,  1.5005066157649067 /10,  39.90000000000002 /10),   //639
new THREE.Vector3(22.435086963631385 /10,  -3.359150238869221 /10,  36.7 /10),   //640
new THREE.Vector3(20.817808226017238 /10,  -3.0271705909491753 /10,  36.7 /10),   //641
new THREE.Vector3(20.83288907010257 /10,  -2.953702447232096 /10,  36.7 /10),   //642
new THREE.Vector3(16.204396015654158 /10,  -2.003609269798581 /10,  36.7 /10),   //643
new THREE.Vector3(16.214449911711917 /10,  -1.9546305073157577 /10,  36.7 /10),   //644
new THREE.Vector3(17.159717223212787 /10,  2.650352761478582 /10,  36.7 /10),   //645
new THREE.Vector3(16.87368125111263 /10,  2.7090675142925225 /10,  36.7 /10),   //646
new THREE.Vector3(15.368074092467266 /10,  3.0181242790962566 /10,  36.7 /10),   //647
new THREE.Vector3(15.60071563063062 /10,  4.151465480928843 /10,  36.7 /10),   //648
new THREE.Vector3(16.332845958124704 /10,  7.718126326669145 /10,  36.7 /10),   //649
new THREE.Vector3(17.52694818719825 /10,  7.473012340830924 /10,  36.7 /10),   //650
new THREE.Vector3(18.308336988771366 /10,  11.279641760772712 /10,  36.7 /10),   //651
new THREE.Vector3(21.891623251858682 /10,  10.54409872521003 /10,  36.7 /10),   //652
new THREE.Vector3(21.70783803193047 /10,  9.648766947071856 /10,  36.7 /10),   //653
new THREE.Vector3(24.023553273167987 /10,  9.173418874665408 /10,  36.7 /10),   //654
new THREE.Vector3(24.96786446257706 /10,  8.979579625502199 /10,  36.7 /10),   //655
new THREE.Vector3(16.214449911711917 /10,  -1.9546305073157577 /10,  39.90000000000002 /10),   //656
new THREE.Vector3(17.159717223212787 /10,  2.650352761478582 /10,  39.90000000000002 /10),   //657
new THREE.Vector3(17.52694818719825 /10,  7.473012340830924 /10,  39.90000000000002 /10),   //658
new THREE.Vector3(16.332845958124704 /10,  7.718126326669145 /10,  39.90000000000002 /10),   //659
new THREE.Vector3(15.368074092467266 /10,  3.0181242790962566 /10,  39.90000000000002 /10),   //660
new THREE.Vector3(16.204396015654158 /10,  -2.003609269798581 /10,  39.90000000000002 /10),   //661
new THREE.Vector3(20.83288907010257 /10,  -2.953702447232096 /10,  39.90000000000002 /10),   //662
new THREE.Vector3(20.817808226017238 /10,  -3.0271705909491753 /10,  39.90000000000002 /10),   //663
new THREE.Vector3(22.435086963631385 /10,  -3.359150238869221 /10,  39.90000000000002 /10),   //664
new THREE.Vector3(24.96786446257706 /10,  8.979579625502199 /10,  39.90000000000002 /10),   //665
new THREE.Vector3(24.023553273167987 /10,  9.173418874665408 /10,  39.90000000000002 /10),   //666
new THREE.Vector3(21.70783803193047 /10,  9.648766947071856 /10,  39.90000000000002 /10),   //667
new THREE.Vector3(21.891623251858682 /10,  10.54409872521003 /10,  39.90000000000002 /10),   //668
new THREE.Vector3(18.308336988771366 /10,  11.279641760772712 /10,  39.90000000000002 /10),   //669
new THREE.Vector3(16.33284595812483 /10,  7.718126326669168 /10,  39.90000000000002 /10),   //670
new THREE.Vector3(15.368074092467308 /10,  3.0181242790962566 /10,  39.90000000000002 /10),   //671
new THREE.Vector3(15.368074092467308 /10,  3.0181242790962566 /10,  36.7 /10),   //672
new THREE.Vector3(15.600715630630734 /10,  4.151465480928803 /10,  36.7 /10),   //673
new THREE.Vector3(16.33284595812483 /10,  7.718126326669168 /10,  36.7 /10),   //674
new THREE.Vector3(17.159717223212812 /10,  2.6503527614786275 /10,  39.90000000000002 /10),   //675
new THREE.Vector3(16.873681251112615 /10,  2.7090675142925345 /10,  36.7 /10),   //676
new THREE.Vector3(17.159717223212812 /10,  2.6503527614786275 /10,  36.7 /10),   //677
new THREE.Vector3(22.435086963631374 /10,  -3.3591502388691987 /10,  36.7 /10),   //678
new THREE.Vector3(22.45016780771629 /10,  -3.285682095151882 /10,  36.7 /10),   //679
new THREE.Vector3(22.45016780771629 /10,  -3.285682095151882 /10,  39.90000000000002 /10),   //680
new THREE.Vector3(22.435086963631374 /10,  -3.3591502388691987 /10,  39.90000000000002 /10),   //681
new THREE.Vector3(20.832889070102652 /10,  -2.9537024472321134 /10,  39.90000000000002 /10),   //682
new THREE.Vector3(16.204396015654215 /10,  -2.003609269798575 /10,  39.90000000000002 /10),   //683
new THREE.Vector3(16.204396015654215 /10,  -2.003609269798575 /10,  36.7 /10),   //684
new THREE.Vector3(20.832889070102652 /10,  -2.9537024472321134 /10,  36.7 /10),   //685
new THREE.Vector3(20.8178082260173 /10,  -3.0271705909491584 /10,  39.90000000000002 /10),   //686
new THREE.Vector3(20.8178082260173 /10,  -3.0271705909491584 /10,  36.7 /10),   //687
new THREE.Vector3(16.21444991171202 /10,  -1.9546305073157522 /10,  39.90000000000002 /10),   //688
new THREE.Vector3(16.21444991171202 /10,  -1.9546305073157522 /10,  36.7 /10),   //689
new THREE.Vector3(22.661299624920268 /10,  -2.2571280830697003 /10,  39.90000000000002 /10),   //690
new THREE.Vector3(22.45016780771631 /10,  -3.2856820951518753 /10,  39.90000000000002 /10),   //691
new THREE.Vector3(22.45016780771631 /10,  -3.2856820951518753 /10,  36.7 /10),   //692
new THREE.Vector3(22.661299624920268 /10,  -2.2571280830697003 /10,  36.7 /10),   //693
new THREE.Vector3(24.129168453479576 /10,  4.89377125943532 /10,  39.90000000000002 /10),   //694
new THREE.Vector3(24.129168453479576 /10,  4.89377125943532 /10,  36.7 /10),   //695
new THREE.Vector3(26.76955043257817 /10,  -16.986040963420283 /10,  36.7 /10),   //696
new THREE.Vector3(26.532680641468072 /10,  -18.139980607448265 /10,  36.7 /10),   //697
new THREE.Vector3(22.99837314592395 /10,  -17.414491468982074 /10,  36.7 /10),   //698
new THREE.Vector3(23.15159452183736 /10,  -16.66805512878503 /10,  36.7 /10),   //699
new THREE.Vector3(20.835878634463146 /10,  -16.192706923745707 /10,  36.7 /10),   //700
new THREE.Vector3(19.86707871186679 /10,  -15.99384085957985 /10,  36.7 /10),   //701
new THREE.Vector3(21.8859010401711 /10,  -6.158905353608481 /10,  36.7 /10),   //702
new THREE.Vector3(23.52766915246 /10,  -6.495911969497009 /10,  36.7 /10),   //703
new THREE.Vector3(23.512588308375 /10,  -6.569380113214418 /10,  36.7 /10),   //704
new THREE.Vector3(28.141081362823012 /10,  -7.519473290647801 /10,  36.7 /10),   //705
new THREE.Vector3(28.13102746676509 /10,  -7.568452053130577 /10,  36.7 /10),   //706
new THREE.Vector3(27.5535316814264 /10,  -10.3817921495561 /10,  36.7 /10),   //707
new THREE.Vector3(26.822768510059976 /10,  -10.231788013162863 /10,  36.7 /10),   //708
new THREE.Vector3(26.577655122424257 /10,  -11.425890365223125 /10,  36.7 /10),   //709
new THREE.Vector3(29.100060828804217 /10,  -11.943665896947596 /10,  36.7 /10),   //710
new THREE.Vector3(29.100060828804217 /10,  -11.943665896947596 /10,  39.90000000000002 /10),   //711
new THREE.Vector3(26.532680641468072 /10,  -18.139980607448265 /10,  39.90000000000002 /10),   //712
new THREE.Vector3(22.99837314592395 /10,  -17.414491468982074 /10,  39.90000000000002 /10),   //713
new THREE.Vector3(26.76955043257817 /10,  -16.986040963420283 /10,  39.90000000000002 /10),   //714
new THREE.Vector3(27.5535316814264 /10,  -10.3817921495561 /10,  39.90000000000002 /10),   //715
new THREE.Vector3(26.822768510059976 /10,  -10.231788013162863 /10,  39.90000000000002 /10),   //716
new THREE.Vector3(26.577655122424257 /10,  -11.425890365223125 /10,  39.90000000000002 /10),   //717
new THREE.Vector3(23.15159452183736 /10,  -16.66805512878503 /10,  39.90000000000002 /10),   //718
new THREE.Vector3(20.835878634463146 /10,  -16.192706923745707 /10,  39.90000000000002 /10),   //719
new THREE.Vector3(28.13102746676511 /10,  -7.568452053130745 /10,  39.90000000000002 /10),   //720
new THREE.Vector3(28.141081362823012 /10,  -7.519473290647801 /10,  39.90000000000002 /10),   //721
new THREE.Vector3(23.512588308375 /10,  -6.569380113214418 /10,  39.90000000000002 /10),   //722
new THREE.Vector3(23.52766915246 /10,  -6.495911969497009 /10,  39.90000000000002 /10),   //723
new THREE.Vector3(21.8859010401711 /10,  -6.158905353608481 /10,  39.90000000000002 /10),   //724
new THREE.Vector3(19.86707871186679 /10,  -15.99384085957985 /10,  39.90000000000002 /10),   //725
new THREE.Vector3(21.885901040171007 /10,  -6.158905353608699 /10,  39.90000000000002 /10),   //726
new THREE.Vector3(23.52766915246 /10,  -6.495911969497193 /10,  39.90000000000002 /10),   //727
new THREE.Vector3(23.52766915246 /10,  -6.495911969497193 /10,  36.7 /10),   //728
new THREE.Vector3(21.885901040171007 /10,  -6.158905353608699 /10,  36.7 /10),   //729
new THREE.Vector3(19.867078711866686 /10,  -15.993840859579947 /10,  39.90000000000002 /10),   //730
new THREE.Vector3(19.867078711866686 /10,  -15.993840859579947 /10,  36.7 /10),   //731
new THREE.Vector3(28.141081362823023 /10,  -7.519473290647799 /10,  39.90000000000002 /10),   //732
new THREE.Vector3(28.131027466765147 /10,  -7.56845205313075 /10,  39.90000000000002 /10),   //733
new THREE.Vector3(28.1310274667651 /10,  -7.568452053130612 /10,  36.7 /10),   //734
new THREE.Vector3(28.141081362823023 /10,  -7.519473290647799 /10,  36.7 /10),   //735
new THREE.Vector3(23.52766915246015 /10,  -6.495911969497049 /10,  39.90000000000002 /10),   //736
new THREE.Vector3(23.512588308375022 /10,  -6.569380113214423 /10,  39.90000000000002 /10),   //737
new THREE.Vector3(23.512588308375022 /10,  -6.569380113214423 /10,  36.7 /10),   //738
new THREE.Vector3(23.52766915246015 /10,  -6.495911969497049 /10,  36.7 /10),   //739
new THREE.Vector3(17.55136282175563 /10,  -15.51849265397884 /10,  36.7 /10),   //740
new THREE.Vector3(16.582562899843495 /10,  -15.31962658995357 /10,  36.7 /10),   //741
new THREE.Vector3(16.490670289877908 /10,  -15.767292479029688 /10,  36.7 /10),   //742
new THREE.Vector3(13.50492492914646 /10,  -15.154406975386504 /10,  36.7 /10),   //743
new THREE.Vector3(13.909895862336485 /10,  -13.181542422683489 /10,  36.7 /10),   //744
new THREE.Vector3(11.585363796270538 /10,  -12.704384516057297 /10,  36.7 /10),   //745
new THREE.Vector3(10.739010779417958 /10,  -12.530653191941132 /10,  36.7 /10),   //746
new THREE.Vector3(7.271314395799908 /10,  -11.818837351076965 /10,  36.7 /10),   //747
new THREE.Vector3(7.57775714762419 /10,  -10.325964670696866 /10,  36.7 /10),   //748
new THREE.Vector3(5.337468551551636 /10,  -9.866099464986926 /10,  36.7 /10),   //749
new THREE.Vector3(6.101564640424691 /10,  -6.143713534234195 /10,  36.7 /10),   //750
new THREE.Vector3(7.445541894796546 /10,  -6.419592423205824 /10,  36.7 /10),   //751
new THREE.Vector3(8.065666203374558 /10,  -3.3985823545936094 /10,  36.7 /10),   //752
new THREE.Vector3(12.017272756050337 /10,  -4.209730708920204 /10,  36.7 /10),   //753
new THREE.Vector3(12.007218859992475 /10,  -4.258709471403004 /10,  36.7 /10),   //754
new THREE.Vector3(11.184609088777279 /10,  -8.266151797087453 /10,  36.7 /10),   //755
new THREE.Vector3(14.767895351865333 /10,  -9.00169483265055 /10,  36.7 /10),   //756
new THREE.Vector3(15.590505123080089 /10,  -4.994252506965864 /10,  36.7 /10),   //757
new THREE.Vector3(15.600559019137883 /10,  -4.945273744483139 /10,  36.7 /10),   //758
new THREE.Vector3(20.22905207358593 /10,  -5.895366921916401 /10,  36.7 /10),   //759
new THREE.Vector3(20.244132917671735 /10,  -5.821898778199772 /10,  36.7 /10),   //760
new THREE.Vector3(6.101564640424691 /10,  -6.143713534234195 /10,  39.90000000000002 /10),   //761
new THREE.Vector3(7.445541894796546 /10,  -6.419592423205824 /10,  39.90000000000002 /10),   //762
new THREE.Vector3(8.065666203374558 /10,  -3.3985823545936094 /10,  39.90000000000002 /10),   //763
new THREE.Vector3(5.337468551551636 /10,  -9.866099464986926 /10,  39.90000000000002 /10),   //764
new THREE.Vector3(11.184609088777279 /10,  -8.266151797087453 /10,  39.90000000000002 /10),   //765
new THREE.Vector3(14.767895351865333 /10,  -9.00169483265055 /10,  39.90000000000002 /10),   //766
new THREE.Vector3(7.271314395799908 /10,  -11.818837351076965 /10,  39.90000000000002 /10),   //767
new THREE.Vector3(7.57775714762419 /10,  -10.325964670696866 /10,  39.90000000000002 /10),   //768
new THREE.Vector3(13.50492492914646 /10,  -15.154406975386504 /10,  39.90000000000002 /10),   //769
new THREE.Vector3(13.909895862336485 /10,  -13.181542422683489 /10,  39.90000000000002 /10),   //770
new THREE.Vector3(16.490670289877908 /10,  -15.767292479029688 /10,  39.90000000000002 /10),   //771
new THREE.Vector3(11.585363796270538 /10,  -12.704384516057297 /10,  39.90000000000002 /10),   //772
new THREE.Vector3(10.739010779417958 /10,  -12.530653191941132 /10,  39.90000000000002 /10),   //773
new THREE.Vector3(17.55136282175563 /10,  -15.51849265397884 /10,  39.90000000000002 /10),   //774
new THREE.Vector3(16.582562899843495 /10,  -15.31962658995357 /10,  39.90000000000002 /10),   //775
new THREE.Vector3(20.244132917671735 /10,  -5.821898778199772 /10,  39.90000000000002 /10),   //776
new THREE.Vector3(20.22905207358593 /10,  -5.895366921916401 /10,  39.90000000000002 /10),   //777
new THREE.Vector3(15.600559019137883 /10,  -4.945273744483139 /10,  39.90000000000002 /10),   //778
new THREE.Vector3(15.59050512308002 /10,  -4.994252506965824 /10,  39.90000000000002 /10),   //779
new THREE.Vector3(12.00721885999274 /10,  -4.258709471403189 /10,  39.90000000000002 /10),   //780
new THREE.Vector3(12.017272756050337 /10,  -4.209730708920204 /10,  39.90000000000002 /10),   //781
new THREE.Vector3(12.017272756050211 /10,  -4.209730708920211 /10,  39.90000000000002 /10),   //782
new THREE.Vector3(12.007218859992673 /10,  -4.258709471403154 /10,  39.90000000000002 /10),   //783
new THREE.Vector3(12.007218859992348 /10,  -4.258709471402959 /10,  36.7 /10),   //784
new THREE.Vector3(12.017272756050211 /10,  -4.209730708920211 /10,  36.7 /10),   //785
new THREE.Vector3(8.065666203374443 /10,  -3.398582354593598 /10,  39.90000000000002 /10),   //786
new THREE.Vector3(8.065666203374443 /10,  -3.398582354593598 /10,  36.7 /10),   //787
new THREE.Vector3(20.22905207358596 /10,  -5.89536692191644 /10,  39.90000000000002 /10),   //788
new THREE.Vector3(20.24413291767173 /10,  -5.821898778199765 /10,  39.90000000000002 /10),   //789
new THREE.Vector3(20.24413291767173 /10,  -5.821898778199765 /10,  36.7 /10),   //790
new THREE.Vector3(20.22905207358596 /10,  -5.89536692191644 /10,  36.7 /10),   //791
new THREE.Vector3(15.600559019137915 /10,  -4.945273744483115 /10,  39.90000000000002 /10),   //792
new THREE.Vector3(15.600559019137915 /10,  -4.945273744483115 /10,  36.7 /10),   //793
new THREE.Vector3(21.88590104017107 /10,  -6.158905353608509 /10,  39.90000000000002 /10),   //794
new THREE.Vector3(21.88590104017107 /10,  -6.158905353608509 /10,  36.7 /10),   //795
new THREE.Vector3(15.590505123080144 /10,  -4.9942525069658865 /10,  36.7 /10),   //796
new THREE.Vector3(15.590505123080066 /10,  -4.994252506965846 /10,  39.90000000000002 /10),   //797
new THREE.Vector3(13.576430961493687 /10,  3.3858957967606185 /10,  36.7 /10),   //798
new THREE.Vector3(12.631163649993114 /10,  -1.2190874720339633 /10,  36.7 /10),   //799
new THREE.Vector3(12.621109753935563 /10,  -1.268066234516879 /10,  36.7 /10),   //800
new THREE.Vector3(7.992616699715388 /10,  -0.31797305713013785 /10,  36.7 /10),   //801
new THREE.Vector3(7.977535855630066 /10,  -0.3914412008471882 /10,  36.7 /10),   //802
new THREE.Vector3(6.335767740832205 /10,  -0.05443458444364783 /10,  36.7 /10),   //803
new THREE.Vector3(8.868545235584941 /10,  12.28429525950067 /10,  36.7 /10),   //804
new THREE.Vector3(11.184260476594229 /10,  11.808947187141065 /10,  36.7 /10),   //805
new THREE.Vector3(12.15306104738003 /10,  11.610080989921087 /10,  36.7 /10),   //806
new THREE.Vector3(12.336846267308296 /10,  12.505412768059054 /10,  36.7 /10),   //807
new THREE.Vector3(15.920132530395898 /10,  11.769869732496401 /10,  36.7 /10),   //808
new THREE.Vector3(15.138743728823036 /10,  7.963240312554255 /10,  36.7 /10),   //809
new THREE.Vector3(15.920132530395898 /10,  11.769869732496401 /10,  39.90000000000002 /10),   //810
new THREE.Vector3(12.336846267308296 /10,  12.505412768059054 /10,  39.90000000000002 /10),   //811
new THREE.Vector3(12.15306104738003 /10,  11.610080989921087 /10,  39.90000000000002 /10),   //812
new THREE.Vector3(11.184260476594229 /10,  11.808947187141065 /10,  39.90000000000002 /10),   //813
new THREE.Vector3(8.868545235584941 /10,  12.28429525950067 /10,  39.90000000000002 /10),   //814
new THREE.Vector3(6.335767740832205 /10,  -0.05443458444364783 /10,  39.90000000000002 /10),   //815
new THREE.Vector3(7.977535855630066 /10,  -0.3914412008471882 /10,  39.90000000000002 /10),   //816
new THREE.Vector3(7.992616699715388 /10,  -0.31797305713013785 /10,  39.90000000000002 /10),   //817
new THREE.Vector3(12.621109753935563 /10,  -1.268066234516879 /10,  39.90000000000002 /10),   //818
new THREE.Vector3(12.631163649993114 /10,  -1.2190874720339633 /10,  39.90000000000002 /10),   //819
new THREE.Vector3(13.576430961493687 /10,  3.3858957967606185 /10,  39.90000000000002 /10),   //820
new THREE.Vector3(15.138743728823036 /10,  7.963240312554255 /10,  39.90000000000002 /10),   //821
new THREE.Vector3(8.868545235584863 /10,  12.284295259500567 /10,  39.90000000000002 /10),   //822
new THREE.Vector3(6.335767740832033 /10,  -0.05443458444369989 /10,  39.90000000000002 /10),   //823
new THREE.Vector3(6.335767740832033 /10,  -0.05443458444369989 /10,  36.7 /10),   //824
new THREE.Vector3(8.868545235584863 /10,  12.284295259500567 /10,  36.7 /10),   //825
new THREE.Vector3(11.184260476594254 /10,  11.808947187140975 /10,  39.90000000000002 /10),   //826
new THREE.Vector3(11.184260476594254 /10,  11.808947187140975 /10,  36.7 /10),   //827
new THREE.Vector3(7.977535855629976 /10,  -0.3914412008471999 /10,  39.90000000000002 /10),   //828
new THREE.Vector3(6.3357677408321145 /10,  -0.05443458444367111 /10,  39.90000000000002 /10),   //829
new THREE.Vector3(6.3357677408321145 /10,  -0.05443458444367111 /10,  36.7 /10),   //830
new THREE.Vector3(7.977535855629976 /10,  -0.3914412008471999 /10,  36.7 /10),   //831
new THREE.Vector3(12.62110975393554 /10,  -1.2680662345168787 /10,  39.90000000000002 /10),   //832
new THREE.Vector3(7.992616699715296 /10,  -0.31797305713012075 /10,  39.90000000000002 /10),   //833
new THREE.Vector3(7.992616699715296 /10,  -0.31797305713012075 /10,  36.7 /10),   //834
new THREE.Vector3(12.62110975393554 /10,  -1.2680662345168787 /10,  36.7 /10),   //835
new THREE.Vector3(12.63116364999316 /10,  -1.2190874720339806 /10,  36.7 /10),   //836
new THREE.Vector3(12.63116364999316 /10,  -1.2190874720339806 /10,  39.90000000000002 /10),   //837
new THREE.Vector3(2.1845283804023574 /10,  14.589384342827923 /10,  36.7 /10),   //838
new THREE.Vector3(5.767814643490076 /10,  13.853841307264803 /10,  36.7 /10),   //839
new THREE.Vector3(5.5840294235613825 /10,  12.958509529127182 /10,  36.7 /10),   //840
new THREE.Vector3(7.899745313672772 /10,  12.483161323525993 /10,  36.7 /10),   //841
new THREE.Vector3(4.693999618332451 /10,  0.28257199096555197 /10,  36.7 /10),   //842
new THREE.Vector3(5.2310787457137415 /10,  2.899017482647534 /10,  36.7 /10),   //843
new THREE.Vector3(1.688934643010832 /10,  3.6261152455424783 /10,  36.7 /10),   //844
new THREE.Vector3(-2.912130300093053 /10,  4.5705782615773884 /10,  36.7 /10),   //845
new THREE.Vector3(-2.555216990059966 /10,  6.309324329610503 /10,  36.7 /10),   //846
new THREE.Vector3(-8.894048430349846 /10,  7.61049955737348 /10,  36.7 /10),   //847
new THREE.Vector3(-7.3700788659850085 /10,  15.034700374084926 /10,  36.7 /10),   //848
new THREE.Vector3(-4.827101517892109 /10,  14.512702090762586 /10,  36.7 /10),   //849
new THREE.Vector3(-3.858301595980274 /10,  14.313836026736812 /10,  36.7 /10),   //850
new THREE.Vector3(-3.682358414977275 /10,  15.170964370136296 /10,  36.7 /10),   //851
new THREE.Vector3(-0.3263336098720145 /10,  14.482071412294903 /10,  36.7 /10),   //852
new THREE.Vector3(-0.9852659574679582 /10,  11.27200331935617 /10,  36.7 /10),   //853
new THREE.Vector3(1.4029385009074635 /10,  10.78177534763281 /10,  36.7 /10),   //854
new THREE.Vector3(-2.912130300093053 /10,  4.5705782615773884 /10,  39.90000000000002 /10),   //855
new THREE.Vector3(-2.555216990059966 /10,  6.309324329610503 /10,  39.90000000000002 /10),   //856
new THREE.Vector3(-8.894048430349846 /10,  7.61049955737348 /10,  39.90000000000002 /10),   //857
new THREE.Vector3(-7.3700788659850085 /10,  15.034700374084926 /10,  39.90000000000002 /10),   //858
new THREE.Vector3(-4.827101517892109 /10,  14.512702090762586 /10,  39.90000000000002 /10),   //859
new THREE.Vector3(5.5840294235613825 /10,  12.958509529127182 /10,  39.90000000000002 /10),   //860
new THREE.Vector3(7.899745313672772 /10,  12.483161323525993 /10,  39.90000000000002 /10),   //861
new THREE.Vector3(5.767814643490076 /10,  13.853841307264803 /10,  39.90000000000002 /10),   //862
new THREE.Vector3(4.693999618332451 /10,  0.28257199096555197 /10,  39.90000000000002 /10),   //863
new THREE.Vector3(2.1845283804023574 /10,  14.589384342827923 /10,  39.90000000000002 /10),   //864
new THREE.Vector3(1.4029385009074635 /10,  10.78177534763281 /10,  39.90000000000002 /10),   //865
new THREE.Vector3(-0.9852659574679582 /10,  11.27200331935617 /10,  39.90000000000002 /10),   //866
new THREE.Vector3(-0.3263336098720145 /10,  14.482071412294903 /10,  39.90000000000002 /10),   //867
new THREE.Vector3(-3.682358414977275 /10,  15.170964370136296 /10,  39.90000000000002 /10),   //868
new THREE.Vector3(-3.858301595980274 /10,  14.313836026736812 /10,  39.90000000000002 /10),   //869
new THREE.Vector3(1.688934643010832 /10,  3.6261152455424783 /10,  39.90000000000002 /10),   //870
new THREE.Vector3(5.2310787457137415 /10,  2.899017482647534 /10,  39.90000000000002 /10),   //871
new THREE.Vector3(4.69399961833244 /10,  0.28257199096554597 /10,  39.90000000000002 /10),   //872
new THREE.Vector3(5.231078745713754 /10,  2.899017482647495 /10,  39.90000000000002 /10),   //873
new THREE.Vector3(5.231078745713754 /10,  2.899017482647495 /10,  36.7 /10),   //874
new THREE.Vector3(4.69399961833244 /10,  0.28257199096554597 /10,  36.7 /10),   //875
new THREE.Vector3(6.335767740832206 /10,  -0.05443458444367105 /10,  39.90000000000002 /10),   //876
new THREE.Vector3(6.335767740832206 /10,  -0.05443458444367105 /10,  36.7 /10),   //877
new THREE.Vector3(1.6889346430108567 /10,  3.6261152455424566 /10,  39.90000000000002 /10),   //878
new THREE.Vector3(1.6889346430108567 /10,  3.6261152455424566 /10,  36.7 /10),   //879
new THREE.Vector3(1.5164272066477171 /10,  -1.3171625112704022 /10,  36.7 /10),   //880
new THREE.Vector3(1.275133701273142 /10,  -2.49265281078673 /10,  36.7 /10),   //881
new THREE.Vector3(0.3690265955760138 /10,  -2.306655733764181 /10,  36.7 /10),   //882
new THREE.Vector3(0.6103201009505658 /10,  -1.1311654342477842 /10,  36.7 /10),   //883
new THREE.Vector3(1.9789064252840518 /10,  0.9358605628108948 /10,  36.7 /10),   //884
new THREE.Vector3(1.0727993195868772 /10,  1.1218576398335243 /10,  36.7 /10),   //885
new THREE.Vector3(1.0727993195868772 /10,  1.1218576398335243 /10,  39.90000000000002 /10),   //886
new THREE.Vector3(1.2589974703763767 /10,  2.028944300542212 /10,  39.90000000000002 /10),   //887
new THREE.Vector3(-1.153696369376003 /10,  2.5241992203224624 /10,  39.90000000000002 /10),   //888
new THREE.Vector3(-2.3193450740673214 /10,  -3.1543984811838697 /10,  39.90000000000002 /10),   //889
new THREE.Vector3(0.9994558713821751 /10,  -3.835650477986772 /10,  39.90000000000002 /10),   //890
new THREE.Vector3(1.275133701273142 /10,  -2.49265281078673 /10,  39.90000000000002 /10),   //891
new THREE.Vector3(0.3690265955760138 /10,  -2.306655733764181 /10,  39.90000000000002 /10),   //892
new THREE.Vector3(0.6103201009505658 /10,  -1.1311654342477842 /10,  39.90000000000002 /10),   //893
new THREE.Vector3(1.5164272066477171 /10,  -1.3171625112704022 /10,  39.90000000000002 /10),   //894
new THREE.Vector3(1.9789064252840518 /10,  0.9358605628108948 /10,  39.90000000000002 /10),   //895
new THREE.Vector3(-2.3193450740673214 /10,  -3.1543984811838697 /10,  36.7 /10),   //896
new THREE.Vector3(0.9994558713821751 /10,  -3.835650477986772 /10,  36.7 /10),   //897
new THREE.Vector3(-1.153696369376003 /10,  2.5241992203224624 /10,  36.7 /10),   //898
new THREE.Vector3(1.2589974703763767 /10,  2.028944300542212 /10,  36.7 /10),   //899
new THREE.Vector3(-6.903756181537441 /10,  -7.171625484871998 /10,  39.90000000000002 /10),   //900
new THREE.Vector3(-9.19498269027186 /10,  -6.701304227327561 /10,  39.90000000000002 /10),   //901
new THREE.Vector3(-9.19498269027186 /10,  -6.701304227327561 /10,  36.7 /10),   //902
new THREE.Vector3(-6.903756181537441 /10,  -7.171625484871998 /10,  36.7 /10),   //903
new THREE.Vector3(-11.725225560085805 /10,  -6.181919956987687 /10,  39.90000000000002 /10),   //904
new THREE.Vector3(-9.582941388197325 /10,  4.25447475223932 /10,  39.90000000000002 /10),   //905
new THREE.Vector3(-9.582941388197325 /10,  4.25447475223932 /10,  36.7 /10),   //906
new THREE.Vector3(-11.725225560085805 /10,  -6.181919956987687 /10,  36.7 /10),   //907
new THREE.Vector3(-10.163782612184008 /10,  -6.502438163302156 /10,  36.7 /10),   //908
new THREE.Vector3(-10.163782612184008 /10,  -6.502438163302156 /10,  39.90000000000002 /10),   //909
new THREE.Vector3(-3.2441099479077344 /10,  2.953299524476637 /10,  39.90000000000002 /10),   //910
new THREE.Vector3(-3.2441099479077344 /10,  2.953299524476637 /10,  36.7 /10),   //911
new THREE.Vector3(-3.519981341230923 /10,  -9.003442296546655 /10,  39.90000000000002 /10),   //912
new THREE.Vector3(-3.519981341230923 /10,  -9.003442296546655 /10,  36.7 /10),   //913
new THREE.Vector3(-7.127756985694352 /10,  -8.262872312927177 /10,  39.90000000000002 /10),   //914
new THREE.Vector3(-7.127756985694352 /10,  -8.262872312927177 /10,  36.7 /10),   //915
new THREE.Vector3(1.3569549951992232 /10,  2.0088365084558246 /10,  39.90000000000002 /10),   //916
new THREE.Vector3(1.3569549951992232 /10,  2.0088365084558246 /10,  36.7 /10),   //917
new THREE.Vector3(-1.1536963693761995 /10,  2.5241992203225037 /10,  39.90000000000002 /10),   //918
new THREE.Vector3(1.2589974703762963 /10,  2.0289443005421846 /10,  39.90000000000002 /10),   //919
new THREE.Vector3(1.2589974703762963 /10,  2.0289443005421846 /10,  36.7 /10),   //920
new THREE.Vector3(-1.1536963693761995 /10,  2.5241992203225037 /10,  36.7 /10),   //921
new THREE.Vector3(1.6889346430107628 /10,  3.626115245542416 /10,  39.90000000000002 /10),   //922
new THREE.Vector3(1.3569549951992466 /10,  2.0088365084558077 /10,  39.90000000000002 /10),   //923
new THREE.Vector3(1.3569549951992466 /10,  2.0088365084558077 /10,  36.7 /10),   //924
new THREE.Vector3(1.6889346430107628 /10,  3.626115245542416 /10,  36.7 /10),   //925
new THREE.Vector3(-2.9121303000931693 /10,  4.570578261577349 /10,  39.90000000000002 /10),   //926
new THREE.Vector3(-2.9121303000931693 /10,  4.570578261577349 /10,  36.7 /10),   //927
new THREE.Vector3(-2.3193450740675066 /10,  -3.154398481183806 /10,  39.90000000000002 /10),   //928
new THREE.Vector3(-2.3193450740675066 /10,  -3.154398481183806 /10,  36.7 /10),   //929
new THREE.Vector3(86.28028638735573 /10,  -3.214046485343906 /10,  39.90000000000002 /10),   //930
new THREE.Vector3(85.9561487784697 /10,  -4.793121787691921 /10,  39.90000000000002 /10),   //931
new THREE.Vector3(85.9561487784697 /10,  -4.793121787691921 /10,  36.7 /10),   //932
new THREE.Vector3(86.28028638735573 /10,  -3.214046485343906 /10,  36.7 /10),   //933
new THREE.Vector3(81.53229412570191 /10,  -11.18615846918537 /10,  39.90000000000002 /10),   //934
new THREE.Vector3(81.53229412570191 /10,  -11.18615846918537 /10,  36.7 /10),   //935
new THREE.Vector3(82.69700012426858 /10,  -2.478503449781057 /10,  39.90000000000002 /10),   //936
new THREE.Vector3(82.69700012426858 /10,  -2.478503449781057 /10,  36.7 /10),   //937
new THREE.Vector3(90.13673800066799 /10,  -8.681158149911887 /10,  39.90000000000002 /10),   //938
new THREE.Vector3(91.71091542684884 /10,  -9.004290369208997 /10,  39.90000000000002 /10),   //939
new THREE.Vector3(91.71091542684884 /10,  -9.004290369208997 /10,  36.7 /10),   //940
new THREE.Vector3(90.13673800066799 /10,  -8.681158149911887 /10,  36.7 /10),   //941
new THREE.Vector3(90.73066056126262 /10,  -13.77971971100579 /10,  39.90000000000002 /10),   //942
new THREE.Vector3(90.73066056126262 /10,  -13.77971971100579 /10,  36.7 /10),   //943
new THREE.Vector3(90.73353727063066 /10,  -5.773778809093083 /10,  39.90000000000002 /10),   //944
new THREE.Vector3(90.73353727063066 /10,  -5.773778809093083 /10,  36.7 /10),   //945
new THREE.Vector3(87.4480419586901 /10,  -5.099363477009102 /10,  39.90000000000002 /10),   //946
new THREE.Vector3(87.4480419586901 /10,  -5.099363477009102 /10,  36.7 /10),   //947
new THREE.Vector3(81.91541024477347 /10,  -6.286112444976367 /10,  39.90000000000002 /10),   //948
new THREE.Vector3(81.91541024477347 /10,  -6.286112444976367 /10,  36.7 /10),   //949
new THREE.Vector3(88.29439489913761 /10,  -5.273094785441458 /10,  36.7 /10),   //950
new THREE.Vector3(88.29439489913761 /10,  -5.273094785441458 /10,  39.90000000000002 /10),   //951
new THREE.Vector3(92.31169501417409 /10,  -14.104259475747309 /10,  39.90000000000002 /10),   //952
new THREE.Vector3(92.31169501417409 /10,  -14.104259475747309 /10,  36.7 /10),   //953
new THREE.Vector3(91.95498278206271 /10,  -15.842025968527086 /10,  39.90000000000002 /10),   //954
new THREE.Vector3(91.95498278206271 /10,  -15.842025968527086 /10,  36.7 /10),   //955
new THREE.Vector3(86.9548107784842 /10,  -16.60314751514629 /10,  39.90000000000002 /10),   //956
new THREE.Vector3(86.96989162256972 /10,  -16.529679371429246 /10,  39.90000000000002 /10),   //957
new THREE.Vector3(90.03596215506654 /10,  -17.159053259123866 /10,  39.90000000000002 /10),   //958
new THREE.Vector3(92.64653019834586 /10,  -17.69492590407484 /10,  39.90000000000002 /10),   //959
new THREE.Vector3(92.98353679418796 /10,  -16.05315778573974 /10,  39.90000000000002 /10),   //960
new THREE.Vector3(80.70968434610067 /10,  -15.193600835723702 /10,  39.90000000000002 /10),   //961
new THREE.Vector3(80.69963045004275 /10,  -15.24257959820647 /10,  39.90000000000002 /10),   //962
new THREE.Vector3(85.32812350426282 /10,  -16.192672775593017 /10,  39.90000000000002 /10),   //963
new THREE.Vector3(85.31304266017752 /10,  -16.266140919310036 /10,  39.90000000000002 /10),   //964
new THREE.Vector3(92.98353679418796 /10,  -16.05315778573974 /10,  36.7 /10),   //965
new THREE.Vector3(92.64653019834586 /10,  -17.69492590407484 /10,  36.7 /10),   //966
new THREE.Vector3(90.03596215393429 /10,  -17.15905326464043 /10,  36.7 /10),   //967
new THREE.Vector3(86.96989162256972 /10,  -16.529679371429246 /10,  36.7 /10),   //968
new THREE.Vector3(86.9548107784842 /10,  -16.60314751514629 /10,  36.7 /10),   //969
new THREE.Vector3(85.31304266017752 /10,  -16.266140919310036 /10,  36.7 /10),   //970
new THREE.Vector3(85.32812350426282 /10,  -16.192672775593017 /10,  36.7 /10),   //971
new THREE.Vector3(80.69963045004275 /10,  -15.24257959820647 /10,  36.7 /10),   //972
new THREE.Vector3(80.70968434610097 /10,  -15.193600835723753 /10,  36.7 /10),   //973
new THREE.Vector3(80.7213080154717 /10,  -6.040998459091191 /10,  39.90000000000002 /10),   //974
new THREE.Vector3(81.91541024477361 /10,  -6.286112444976471 /10,  39.90000000000002 /10),   //975
new THREE.Vector3(81.91541024477361 /10,  -6.286112444976471 /10,  36.7 /10),   //976
new THREE.Vector3(80.7213080154717 /10,  -6.040998459091191 /10,  36.7 /10),   //977
new THREE.Vector3(79.74065099404437 /10,  -10.818386951380516 /10,  36.7 /10),   //978
new THREE.Vector3(79.74065099404437 /10,  -10.818386951380516 /10,  39.90000000000002 /10),   //979
new THREE.Vector3(80.69963045004283 /10,  -15.24257959820649 /10,  39.90000000000002 /10),   //980
new THREE.Vector3(80.70968434610067 /10,  -15.193600835723725 /10,  39.90000000000002 /10),   //981
new THREE.Vector3(80.70968434610096 /10,  -15.19360083572375 /10,  36.7 /10),   //982
new THREE.Vector3(80.69963045004283 /10,  -15.24257959820649 /10,  36.7 /10),   //983
new THREE.Vector3(86.9548107784842 /10,  -16.6031475151463 /10,  39.90000000000002 /10),   //984
new THREE.Vector3(85.31304266017766 /10,  -16.266140919310086 /10,  39.90000000000002 /10),   //985
new THREE.Vector3(85.31304266017766 /10,  -16.266140919310086 /10,  36.7 /10),   //986
new THREE.Vector3(86.9548107784842 /10,  -16.6031475151463 /10,  36.7 /10),   //987
new THREE.Vector3(85.32812350426295 /10,  -16.192672775593046 /10,  39.90000000000002 /10),   //988
new THREE.Vector3(85.32812350426295 /10,  -16.192672775593046 /10,  36.7 /10),   //989
new THREE.Vector3(86.9698916225698 /10,  -16.529679371429243 /10,  39.90000000000002 /10),   //990
new THREE.Vector3(86.9698916225698 /10,  -16.529679371429243 /10,  36.7 /10),   //991
new THREE.Vector3(90.0359621539343 /10,  -17.159053264640434 /10,  36.7 /10),   //992
new THREE.Vector3(90.03596215506666 /10,  -17.15905325912388 /10,  39.90000000000002 /10),   //993
new THREE.Vector3(89.4321251567335 /10,  -20.100717739184415 /10,  36.7 /10),   //994
new THREE.Vector3(88.00782274390336 /10,  -19.808350441856064 /10,  36.7 /10),   //995
new THREE.Vector3(88.0229035879891 /10,  -19.73488229813911 /10,  36.7 /10),   //996
new THREE.Vector3(4.105243469410069 /10,  -2.585624319434296 /10,  36.7 /10),   //997
new THREE.Vector3(3.7334503932107683 /10,  -4.396858955945544 /10,  36.7 /10),   //998
new THREE.Vector3(3.7334503932106298 /10,  -4.396858955945452 /10,  39.90000000000002 /10),   //999
new THREE.Vector3(4.105243469410069 /10,  -2.585624319434296 /10,  39.90000000000002 /10),   //1000
new THREE.Vector3(89.43212515724615 /10,  -20.100717736686462 /10,  39.90000000000002 /10),   //1001
new THREE.Vector3(88.0229035879891 /10,  -19.73488229813911 /10,  39.90000000000002 /10),   //1002
new THREE.Vector3(88.00782274390336 /10,  -19.808350441856064 /10,  39.90000000000002 /10),   //1003
new THREE.Vector3(71.1983428966976 /10,  -13.368809155159484 /10,  39.90000000000002 /10),   //1004
new THREE.Vector3(71.17385351175942 /10,  -13.363782185084114 /10,  39.90000000000002 /10),   //1005
new THREE.Vector3(71.17385351175942 /10,  -13.363782185084114 /10,  36.7 /10),   //1006
new THREE.Vector3(71.1983428966976 /10,  -13.368809155159484 /10,  36.7 /10),   //1007
new THREE.Vector3(73.58654735530114 /10,  -13.859037126929826 /10,  39.90000000000002 /10),   //1008
new THREE.Vector3(73.51013774945756 /10,  -14.231275701355166 /10,  39.90000000000002 /10),   //1009
new THREE.Vector3(73.51013774945756 /10,  -14.231275701355166 /10,  36.7 /10),   //1010
new THREE.Vector3(73.58654735530114 /10,  -13.859037126929826 /10,  36.7 /10),   //1011
new THREE.Vector3(73.6110367326603 /10,  -13.864064052874113 /10,  39.90000000000002 /10),   //1012
new THREE.Vector3(73.6110367326603 /10,  -13.864064052874113 /10,  36.7 /10),   //1013
new THREE.Vector3(72.05252977792816 /10,  -13.932071754664245 /10,  39.90000000000002 /10),   //1014
new THREE.Vector3(71.12193329085409 /10,  -13.741047729584816 /10,  39.90000000000002 /10),   //1015
new THREE.Vector3(71.12193329085409 /10,  -13.741047729584816 /10,  36.7 /10),   //1016
new THREE.Vector3(72.05252977792816 /10,  -13.932071754664245 /10,  36.7 /10),   //1017
new THREE.Vector3(35.97810200054867 /10,  -6.062568206601717 /10,  39.90000000000002 /10),   //1018
new THREE.Vector3(31.413281343427595 /10,  -5.125545095295731 /10,  39.90000000000002 /10),   //1019
new THREE.Vector3(31.413281343427595 /10,  -5.125545095295731 /10,  36.7 /10),   //1020
new THREE.Vector3(35.97810200054867 /10,  -6.062568206601717 /10,  36.7 /10),   //1021
new THREE.Vector3(31.428362187509833 /10,  -5.052076951592894 /10,  39.90000000000002 /10),   //1022
new THREE.Vector3(31.428362187509833 /10,  -5.052076951592894 /10,  36.7 /10),   //1023
new THREE.Vector3(27.152129011997488 /10,  -4.250856117926175 /10,  39.90000000000002 /10),   //1024
new THREE.Vector3(26.221532524695554 /10,  -4.0598320928000255 /10,  39.90000000000002 /10),   //1025
new THREE.Vector3(26.221532524695554 /10,  -4.0598320928000255 /10,  36.7 /10),   //1026
new THREE.Vector3(27.152129011997488 /10,  -4.250856117926175 /10,  36.7 /10),   //1027
new THREE.Vector3(28.80799838703149 /10,  -4.514193510926302 /10,  36.7 /10),   //1028
new THREE.Vector3(28.792917547139282 /10,  -4.587661634216424 /10,  39.90000000000002 /10),   //1029
new THREE.Vector3(28.792917547139282 /10,  -4.587661634216424 /10,  36.7 /10),   //1030
new THREE.Vector3(38.63803602534593 /10,  -6.532010451388395 /10,  39.90000000000002 /10),   //1031
new THREE.Vector3(35.99318284463111 /10,  -5.989100062898793 /10,  39.90000000000002 /10),   //1032
new THREE.Vector3(35.99318284463111 /10,  -5.989100062898793 /10,  36.7 /10),   //1033
new THREE.Vector3(38.63803602534593 /10,  -6.532010451388395 /10,  36.7 /10),   //1034
new THREE.Vector3(38.60787433717553 /10,  -6.678946738822426 /10,  39.90000000000002 /10),   //1035
new THREE.Vector3(38.60787433717553 /10,  -6.678946738822426 /10,  36.7 /10),   //1036
new THREE.Vector3(1.2589974703763767 /10,  2.0289443005422068 /10,  39.90000000000002 /10),   //1037
new THREE.Vector3(1.0727993195868657 /10,  1.1218576398335307 /10,  39.90000000000002 /10),   //1038
new THREE.Vector3(1.0727993195868657 /10,  1.1218576398335307 /10,  36.7 /10),   //1039
new THREE.Vector3(1.2589974703763767 /10,  2.0289443005422068 /10,  36.7 /10),   //1040
new THREE.Vector3(1.516427206647694 /10,  -1.317162511270408 /10,  39.90000000000002 /10),   //1041
new THREE.Vector3(1.275133701273119 /10,  -2.4926528107867125 /10,  39.90000000000002 /10),   //1042
new THREE.Vector3(1.275133701273119 /10,  -2.4926528107867125 /10,  36.7 /10),   //1043
new THREE.Vector3(1.516427206647694 /10,  -1.317162511270408 /10,  36.7 /10),   //1044
new THREE.Vector3(0.9994558713821635 /10,  -3.8356504779867775 /10,  36.7 /10),   //1045
new THREE.Vector3(0.9994558713821635 /10,  -3.8356504779867775 /10,  39.90000000000002 /10),   //1046
new THREE.Vector3(1.9789064252840634 /10,  0.9358605628108956 /10,  39.90000000000002 /10),   //1047
new THREE.Vector3(1.9789064252840634 /10,  0.9358605628108956 /10,  36.7 /10),   //1048
new THREE.Vector3(1.3569549951992232 /10,  2.0088365084558193 /10,  39.90000000000002 /10),   //1049
new THREE.Vector3(1.3569549951992232 /10,  2.0088365084558193 /10,  36.7 /10),   //1050
new THREE.Vector3(1.688934643010832 /10,  3.6261152455424726 /10,  36.7 /10),   //1051
new THREE.Vector3(1.688934643010832 /10,  3.6261152455424726 /10,  39.90000000000002 /10),   //1052
new THREE.Vector3(92.02180337536005 /10,  -34.36988909431802 /10,  36.7 /10),   //1053
new THREE.Vector3(92.3789177633152 /10,  -32.63016345103148 /10,  36.7 /10),   //1054
new THREE.Vector3(93.11359920051446 /10,  -32.78097189189089 /10,  36.7 /10),   //1055
new THREE.Vector3(93.18706734418888 /10,  -32.796052735967606 /10,  36.7 /10),   //1056
new THREE.Vector3(92.82995295623391 /10,  -34.53577837925404 /10,  36.7 /10),   //1057
new THREE.Vector3(93.18706734418888 /10,  -32.796052735967606 /10,  39.90000000000002 /10),   //1058
new THREE.Vector3(92.82995295623391 /10,  -34.53577837925404 /10,  39.90000000000002 /10),   //1059
new THREE.Vector3(92.02180337536005 /10,  -34.36988909431802 /10,  39.90000000000002 /10),   //1060
new THREE.Vector3(93.11359920051446 /10,  -32.78097189189089 /10,  39.90000000000002 /10),   //1061
new THREE.Vector3(92.3789177633152 /10,  -32.63016345103148 /10,  39.90000000000002 /10),   //1062
new THREE.Vector3(83.25155870893148 /10,  -34.643984866592206 /10,  36.7 /10),   //1063
new THREE.Vector3(84.2203586308435 /10,  -34.84285093061759 /10,  36.7 /10),   //1064
new THREE.Vector3(84.0365734109152 /10,  -35.73818270875555 /10,  36.7 /10),   //1065
new THREE.Vector3(83.06777348900316 /10,  -35.539316644730285 /10,  36.7 /10),   //1066
new THREE.Vector3(84.2203586308435 /10,  -34.84285093061759 /10,  39.90000000000002 /10),   //1067
new THREE.Vector3(83.25155870893148 /10,  -34.643984866592206 /10,  39.90000000000002 /10),   //1068
new THREE.Vector3(84.0365734109152 /10,  -35.73818270875555 /10,  39.90000000000002 /10),   //1069
new THREE.Vector3(83.06777348900316 /10,  -35.539316644730285 /10,  39.90000000000002 /10),   //1070
new THREE.Vector3(93.05293095499603 /10,  -29.346627214375435 /10,  39.90000000000002 /10),   //1071
new THREE.Vector3(93.78761239219557 /10,  -29.497435655235098 /10,  39.90000000000002 /10),   //1072
new THREE.Vector3(93.78761239219557 /10,  -29.497435655235098 /10,  36.7 /10),   //1073
new THREE.Vector3(93.05293095499603 /10,  -29.346627214375435 /10,  36.7 /10),   //1074
new THREE.Vector3(86.21414876920127 /10,  -36.8864991108224 /10,  39.90000000000002 /10),   //1075
new THREE.Vector3(92.5598372359943 /10,  -38.18908188398316 /10,  39.90000000000002 /10),   //1076
new THREE.Vector3(93.29035332351786 /10,  -34.63028500218702 /10,  39.90000000000002 /10),   //1077
new THREE.Vector3(92.82995295623351 /10,  -34.535778379254076 /10,  39.90000000000002 /10),   //1078
new THREE.Vector3(92.02180337535967 /10,  -34.36988909431803 /10,  39.90000000000002 /10),   //1079
new THREE.Vector3(92.37891776331496 /10,  -32.6301634510315 /10,  39.90000000000002 /10),   //1080
new THREE.Vector3(93.11359920051406 /10,  -32.780971891890914 /10,  39.90000000000002 /10),   //1081
new THREE.Vector3(93.89504528875418 /10,  -25.24416606905868 /10,  39.90000000000002 /10),   //1082
new THREE.Vector3(92.99873393533444 /10,  -25.060179771202424 /10,  39.90000000000002 /10),   //1083
new THREE.Vector3(93.83139760680073 /10,  -21.003758662608178 /10,  39.90000000000002 /10),   //1084
new THREE.Vector3(84.2203586308435 /10,  -34.8428509306176 /10,  39.90000000000002 /10),   //1085
new THREE.Vector3(86.53607452095478 /10,  -35.31819913621863 /10,  39.90000000000002 /10),   //1086
new THREE.Vector3(84.22035863084349 /10,  -34.842850930617594 /10,  36.7 /10),   //1087
new THREE.Vector3(86.53607452095478 /10,  -35.31819913621863 /10,  36.7 /10),   //1088
new THREE.Vector3(86.21414876920127 /10,  -36.88649911082239 /10,  36.7 /10),   //1089
new THREE.Vector3(92.5598372359943 /10,  -38.18908188398316 /10,  36.7 /10),   //1090
new THREE.Vector3(93.89504528875418 /10,  -25.24416606905868 /10,  36.7 /10),   //1091
new THREE.Vector3(92.99873393533446 /10,  -25.060179771202407 /10,  36.7 /10),   //1092
new THREE.Vector3(93.29035332351786 /10,  -34.63028500218702 /10,  36.7 /10),   //1093
new THREE.Vector3(92.82995295623363 /10,  -34.53577837925405 /10,  36.7 /10),   //1094
new THREE.Vector3(93.8313976068006 /10,  -21.00375866260829 /10,  36.7 /10),   //1095
new THREE.Vector3(93.11359920051406 /10,  -32.780971891890914 /10,  36.7 /10),   //1096
new THREE.Vector3(92.37891776331496 /10,  -32.6301634510315 /10,  36.7 /10),   //1097
new THREE.Vector3(92.02180337535967 /10,  -34.36988909431803 /10,  36.7 /10),   //1098
new THREE.Vector3(83.25155870893147 /10,  -34.64398486659221 /10,  39.90000000000002 /10),   //1099
new THREE.Vector3(83.25155870893147 /10,  -34.64398486659221 /10,  36.7 /10),   //1100
new THREE.Vector3(86.38113547364699 /10,  -19.39787568182932 /10,  36.7 /10),   //1101
new THREE.Vector3(86.38113547364699 /10,  -19.39787568182932 /10,  39.90000000000002 /10),   //1102
new THREE.Vector3(86.38113547364712 /10,  -19.397875681829216 /10,  39.90000000000002 /10),   //1103
new THREE.Vector3(88.02290358798915 /10,  -19.734882298139105 /10,  39.90000000000002 /10),   //1104
new THREE.Vector3(88.02290358798915 /10,  -19.734882298139105 /10,  36.7 /10),   //1105
new THREE.Vector3(86.38113547364712 /10,  -19.397875681829216 /10,  36.7 /10),   //1106
new THREE.Vector3(88.00782274390345 /10,  -19.808350441856078 /10,  39.90000000000002 /10),   //1107
new THREE.Vector3(88.00782274390345 /10,  -19.808350441856078 /10,  36.7 /10),   //1108
new THREE.Vector3(89.43212515724616 /10,  -20.10071773668648 /10,  39.90000000000002 /10),   //1109
new THREE.Vector3(89.4321251567335 /10,  -20.10071773918441 /10,  36.7 /10),   //1110
new THREE.Vector3(79.96704289713607 /10,  -33.969770597012676 /10,  39.90000000000002 /10),   //1111
new THREE.Vector3(79.78325767720777 /10,  -34.86510237515065 /10,  39.90000000000002 /10),   //1112
new THREE.Vector3(79.78325767720776 /10,  -34.86510237515069 /10,  36.7 /10),   //1113
new THREE.Vector3(79.96704289713607 /10,  -33.969770597012676 /10,  36.7 /10),   //1114
new THREE.Vector3(80.93584281904829 /10,  -34.16863666103808 /10,  36.7 /10),   //1115
new THREE.Vector3(80.9358428190483 /10,  -34.168636661038036 /10,  39.90000000000002 /10),   //1116
new THREE.Vector3(80.75205759912002 /10,  -35.063968439176044 /10,  36.7 /10),   //1117
new THREE.Vector3(80.75205759911998 /10,  -35.06396843917604 /10,  39.90000000000002 /10),   //1118
new THREE.Vector3(67.12775010056264 /10,  -31.3342422845372 /10,  39.90000000000002 /10),   //1119
new THREE.Vector3(67.12775010056264 /10,  -31.3342422845372 /10,  36.7 /10),   //1120
new THREE.Vector3(68.09655002247521 /10,  -31.533108348562486 /10,  36.7 /10),   //1121
new THREE.Vector3(68.09655002247521 /10,  -31.533108348562486 /10,  39.90000000000002 /10),   //1122
new THREE.Vector3(67.91276480254669 /10,  -32.42844012670059 /10,  36.7 /10),   //1123
new THREE.Vector3(66.94396488063465 /10,  -32.22957406267519 /10,  36.7 /10),   //1124
new THREE.Vector3(67.91276480254669 /10,  -32.42844012670059 /10,  39.90000000000002 /10),   //1125
new THREE.Vector3(66.94396488063465 /10,  -32.22957406267519 /10,  39.90000000000002 /10),   //1126
new THREE.Vector3(63.84323428876726 /10,  -30.660028014957494 /10,  36.7 /10),   //1127
new THREE.Vector3(64.81203421045133 /10,  -30.858894078936025 /10,  36.7 /10),   //1128
new THREE.Vector3(64.62824899052309 /10,  -31.754225857074157 /10,  36.7 /10),   //1129
new THREE.Vector3(63.65944906883906 /10,  -31.555359793095654 /10,  36.7 /10),   //1130
new THREE.Vector3(63.84323428876726 /10,  -30.660028014957494 /10,  39.90000000000002 /10),   //1131
new THREE.Vector3(63.65944906883906 /10,  -31.555359793095654 /10,  39.90000000000002 /10),   //1132
new THREE.Vector3(64.81203421045133 /10,  -30.858894078936025 /10,  39.90000000000002 /10),   //1133
new THREE.Vector3(64.62824899052309 /10,  -31.754225857074157 /10,  39.90000000000002 /10),   //1134
new THREE.Vector3(51.4169555422283 /10,  -26.01245213980141 /10,  36.7 /10),   //1135
new THREE.Vector3(51.600740762153535 /10,  -25.117120361677525 /10,  36.7 /10),   //1136
new THREE.Vector3(52.5695406847501 /10,  -25.315986425843324 /10,  36.7 /10),   //1137
new THREE.Vector3(52.38575546482475 /10,  -26.211318203967117 /10,  36.7 /10),   //1138
new THREE.Vector3(51.4169555422283 /10,  -26.01245213980141 /10,  39.90000000000002 /10),   //1139
new THREE.Vector3(51.600740762153535 /10,  -25.117120361677525 /10,  39.90000000000002 /10),   //1140
new THREE.Vector3(52.38575546482475 /10,  -26.211318203967117 /10,  39.90000000000002 /10),   //1141
new THREE.Vector3(52.5695406847501 /10,  -25.315986425843324 /10,  39.90000000000002 /10),   //1142
new THREE.Vector3(49.10123965302954 /10,  -25.537103934387616 /10,  36.7 /10),   //1143
new THREE.Vector3(48.13243973043306 /10,  -25.338237870221764 /10,  36.7 /10),   //1144
new THREE.Vector3(48.31622495035848 /10,  -24.4429060920979 /10,  36.7 /10),   //1145
new THREE.Vector3(49.28502487295481 /10,  -24.641772156263787 /10,  36.7 /10),   //1146
new THREE.Vector3(48.13243973043306 /10,  -25.338237870221764 /10,  39.90000000000002 /10),   //1147
new THREE.Vector3(48.31622495035848 /10,  -24.4429060920979 /10,  39.90000000000002 /10),   //1148
new THREE.Vector3(49.10123965302954 /10,  -25.537103934387616 /10,  39.90000000000002 /10),   //1149
new THREE.Vector3(49.28502487295481 /10,  -24.641772156263787 /10,  39.90000000000002 /10),   //1150
new THREE.Vector3(36.44573207638065 /10,  -22.006243843788056 /10,  36.7 /10),   //1151
new THREE.Vector3(36.26194685645573 /10,  -22.90157562191195 /10,  36.7 /10),   //1152
new THREE.Vector3(35.2931469338592 /10,  -22.70270955774606 /10,  36.7 /10),   //1153
new THREE.Vector3(35.476932153784595 /10,  -21.807377779622296 /10,  36.7 /10),   //1154
new THREE.Vector3(35.2931469338592 /10,  -22.70270955774606 /10,  39.90000000000002 /10),   //1155
new THREE.Vector3(35.476932153784595 /10,  -21.807377779622296 /10,  39.90000000000002 /10),   //1156
new THREE.Vector3(36.26194685645573 /10,  -22.90157562191195 /10,  39.90000000000002 /10),   //1157
new THREE.Vector3(36.44573207638065 /10,  -22.006243843788056 /10,  39.90000000000002 /10),   //1158
new THREE.Vector3(33.161216264585356 /10,  -21.33202957420848 /10,  36.7 /10),   //1159
new THREE.Vector3(32.97743104466046 /10,  -22.227361352332284 /10,  36.7 /10),   //1160
new THREE.Vector3(32.008631121836004 /10,  -22.0284952881197 /10,  36.7 /10),   //1161
new THREE.Vector3(32.19241634176098 /10,  -21.133163509995885 /10,  36.7 /10),   //1162
new THREE.Vector3(32.97743104466046 /10,  -22.227361352332284 /10,  39.90000000000002 /10),   //1163
new THREE.Vector3(32.008631121836004 /10,  -22.0284952881197 /10,  39.90000000000002 /10),   //1164
new THREE.Vector3(33.161216264585356 /10,  -21.33202957420848 /10,  39.90000000000002 /10),   //1165
new THREE.Vector3(32.19241634176098 /10,  -21.133163509995885 /10,  39.90000000000002 /10),   //1166
new THREE.Vector3(20.835878634463132 /10,  -16.19270692374572 /10,  36.7 /10),   //1167
new THREE.Vector3(20.682657258549224 /10,  -16.939143263942803 /10,  36.7 /10),   //1168
new THREE.Vector3(19.713857335952824 /10,  -16.740277199777005 /10,  36.7 /10),   //1169
new THREE.Vector3(19.867078711866586 /10,  -15.993840859579889 /10,  36.7 /10),   //1170
new THREE.Vector3(20.835878634463132 /10,  -16.19270692374572 /10,  39.90000000000002 /10),   //1171
new THREE.Vector3(19.867078711866586 /10,  -15.993840859579889 /10,  39.90000000000002 /10),   //1172
new THREE.Vector3(20.682657258549224 /10,  -16.939143263942803 /10,  39.90000000000002 /10),   //1173
new THREE.Vector3(19.713857335952824 /10,  -16.740277199777005 /10,  39.90000000000002 /10),   //1174
new THREE.Vector3(16.582562899843417 /10,  -15.319626589953527 /10,  36.7 /10),   //1175
new THREE.Vector3(17.55136282175556 /10,  -15.518492653978878 /10,  36.7 /10),   //1176
new THREE.Vector3(17.398141445841492 /10,  -16.264928994175946 /10,  36.7 /10),   //1177
new THREE.Vector3(16.55178843012958 /10,  -16.091197670293862 /10,  36.7 /10),   //1178
new THREE.Vector3(16.61311719607778 /10,  -15.79242721917294 /10,  36.7 /10),   //1179
new THREE.Vector3(16.49067028987801 /10,  -15.767292479029718 /10,  36.7 /10),   //1180
new THREE.Vector3(17.55136282175556 /10,  -15.518492653978878 /10,  39.90000000000002 /10),   //1181
new THREE.Vector3(16.582562899843417 /10,  -15.319626589953527 /10,  39.90000000000002 /10),   //1182
new THREE.Vector3(17.398141445841492 /10,  -16.264928994175946 /10,  39.90000000000002 /10),   //1183
new THREE.Vector3(16.55178843012958 /10,  -16.091197670293862 /10,  39.90000000000002 /10),   //1184
new THREE.Vector3(16.49067028987801 /10,  -15.767292479029718 /10,  39.90000000000002 /10),   //1185
new THREE.Vector3(16.61311719607778 /10,  -15.79242721917294 /10,  39.90000000000002 /10),   //1186
new THREE.Vector3(11.585363796270586 /10,  -12.704384516057289 /10,  36.7 /10),   //1187
new THREE.Vector3(11.42791978405505 /10,  -13.47139193628988 /10,  36.7 /10),   //1188
new THREE.Vector3(10.581566767202345 /10,  -13.29766061217372 /10,  36.7 /10),   //1189
new THREE.Vector3(10.739010779418061 /10,  -12.530653191941115 /10,  36.7 /10),   //1190
new THREE.Vector3(10.581566767202345 /10,  -13.29766061217372 /10,  39.90000000000002 /10),   //1191
new THREE.Vector3(11.42791978405505 /10,  -13.47139193628988 /10,  39.90000000000002 /10),   //1192
new THREE.Vector3(11.585363796270586 /10,  -12.704384516057289 /10,  39.90000000000002 /10),   //1193
new THREE.Vector3(10.739010779418061 /10,  -12.530653191941115 /10,  39.90000000000002 /10),   //1194
new THREE.Vector3(-9.194982690271884 /10,  -6.701304227327651 /10,  36.7 /10),   //1195
new THREE.Vector3(-9.378767910200219 /10,  -7.59663600546573 /10,  36.7 /10),   //1196
new THREE.Vector3(-10.200631544534982 /10,  -7.427931629640382 /10,  36.7 /10),   //1197
new THREE.Vector3(-10.155389012275942 /10,  -7.207527198474842 /10,  36.7 /10),   //1198
new THREE.Vector3(-10.302325299853269 /10,  -7.177365510274754 /10,  36.7 /10),   //1199
new THREE.Vector3(-10.163782612184008 /10,  -6.502438163302283 /10,  36.7 /10),   //1200
new THREE.Vector3(-9.194982690271884 /10,  -6.701304227327651 /10,  39.90000000000002 /10),   //1201
new THREE.Vector3(-9.378767910200219 /10,  -7.59663600546573 /10,  39.90000000000002 /10),   //1202
new THREE.Vector3(-10.302325299853269 /10,  -7.177365510274754 /10,  39.90000000000002 /10),   //1203
new THREE.Vector3(-10.163782612184008 /10,  -6.502438163302283 /10,  39.90000000000002 /10),   //1204
new THREE.Vector3(-10.155389012275942 /10,  -7.207527198474842 /10,  39.90000000000002 /10),   //1205
new THREE.Vector3(-10.200631544534982 /10,  -7.427931629640382 /10,  39.90000000000002 /10),   //1206
new THREE.Vector3(88.47838119699333 /10,  -4.376783432021816 /10,  36.7 /10),   //1207
new THREE.Vector3(88.29439489913769 /10,  -5.273094785441601 /10,  36.7 /10),   //1208
new THREE.Vector3(87.44804195869004 /10,  -5.099363477009205 /10,  36.7 /10),   //1209
new THREE.Vector3(87.63202825654618 /10,  -4.203052123589399 /10,  36.7 /10),   //1210
new THREE.Vector3(88.47838119699333 /10,  -4.376783432021816 /10,  39.90000000000002 /10),   //1211
new THREE.Vector3(87.63202825654618 /10,  -4.203052123589399 /10,  39.90000000000002 /10),   //1212
new THREE.Vector3(87.44804195869004 /10,  -5.099363477009205 /10,  39.90000000000002 /10),   //1213
new THREE.Vector3(88.29439489913769 /10,  -5.273094785441601 /10,  39.90000000000002 /10),   //1214
new THREE.Vector3(77.87963114732803 /10,  -1.9959815205365008 /10,  36.7 /10),   //1215
new THREE.Vector3(78.82394161396695 /10,  -2.1898206213364584 /10,  36.7 /10),   //1216
new THREE.Vector3(78.64799843296439 /10,  -3.046948964735814 /10,  36.7 /10),   //1217
new THREE.Vector3(77.70368796632532 /10,  -2.853109863935984 /10,  36.7 /10),   //1218
new THREE.Vector3(77.70368796632532 /10,  -2.853109863935984 /10,  39.90000000000002 /10),   //1219
new THREE.Vector3(77.87963114732803 /10,  -1.9959815205365008 /10,  39.90000000000002 /10),   //1220
new THREE.Vector3(78.64799843296439 /10,  -3.046948964735814 /10,  39.90000000000002 /10),   //1221
new THREE.Vector3(78.82394161396695 /10,  -2.1898206213364584 /10,  39.90000000000002 /10),   //1222
new THREE.Vector3(73.40278877800935 /10,  -0.764637468702758 /10,  36.7 /10),   //1223
new THREE.Vector3(73.21900356583838 /10,  -1.6599692484184314 /10,  36.7 /10),   //1224
new THREE.Vector3(72.25020364392651 /10,  -1.4611031843930566 /10,  36.7 /10),   //1225
new THREE.Vector3(72.4339888638516 /10,  -0.5657714062692392 /10,  36.7 /10),   //1226
new THREE.Vector3(72.25020364392651 /10,  -1.4611031843930566 /10,  39.90000000000002 /10),   //1227
new THREE.Vector3(73.21900356583838 /10,  -1.6599692484184314 /10,  39.90000000000002 /10),   //1228
new THREE.Vector3(73.40278877800935 /10,  -0.764637468702758 /10,  39.90000000000002 /10),   //1229
new THREE.Vector3(72.4339888638516 /10,  -0.5657714062692392 /10,  39.90000000000002 /10),   //1230
new THREE.Vector3(59.73947152185779 /10,  2.7750512190667544 /10,  36.7 /10),   //1231
new THREE.Vector3(60.708272092643796 /10,  2.5761850218465656 /10,  36.7 /10),   //1232
new THREE.Vector3(60.52448687271842 /10,  1.6808532437228647 /10,  36.7 /10),   //1233
new THREE.Vector3(59.55568630193227 /10,  1.8797194409430809 /10,  36.7 /10),   //1234
new THREE.Vector3(59.55568630193227 /10,  1.8797194409430809 /10,  39.90000000000002 /10),   //1235
new THREE.Vector3(59.73947152185779 /10,  2.7750512190667544 /10,  39.90000000000002 /10),   //1236
new THREE.Vector3(60.708272092643796 /10,  2.5761850218465656 /10,  39.90000000000002 /10),   //1237
new THREE.Vector3(60.52448687271842 /10,  1.6808532437228647 /10,  39.90000000000002 /10),   //1238
new THREE.Vector3(56.45495570983414 /10,  3.4492654886932885 /10,  36.7 /10),   //1239
new THREE.Vector3(57.423756280620275 /10,  3.2503992914733697 /10,  36.7 /10),   //1240
new THREE.Vector3(57.23997106069478 /10,  2.3550675133493413 /10,  36.7 /10),   //1241
new THREE.Vector3(56.27117048990884 /10,  2.5539337105694897 /10,  36.7 /10),   //1242
new THREE.Vector3(56.27117048990884 /10,  2.5539337105694897 /10,  39.90000000000002 /10),   //1243
new THREE.Vector3(56.45495570983414 /10,  3.4492654886932885 /10,  39.90000000000002 /10),   //1244
new THREE.Vector3(57.423756280620275 /10,  3.2503992914733697 /10,  39.90000000000002 /10),   //1245
new THREE.Vector3(57.23997106069478 /10,  2.3550675133493413 /10,  39.90000000000002 /10),   //1246
new THREE.Vector3(42.293236967888475 /10,  6.356248820694155 /10,  36.7 /10),   //1247
new THREE.Vector3(42.10945174796003 /10,  5.460917042556135 /10,  36.7 /10),   //1248
new THREE.Vector3(41.140651825135684 /10,  5.659783106768704 /10,  36.7 /10),   //1249
new THREE.Vector3(41.32443704506396 /10,  6.555114884906724 /10,  36.7 /10),   //1250
new THREE.Vector3(41.32443704506396 /10,  6.555114884906724 /10,  39.90000000000002 /10),   //1251
new THREE.Vector3(42.293236967888475 /10,  6.356248820694155 /10,  39.90000000000002 /10),   //1252
new THREE.Vector3(41.140651825135684 /10,  5.659783106768704 /10,  39.90000000000002 /10),   //1253
new THREE.Vector3(42.10945174852256 /10,  5.460917045295797 /10,  39.90000000000002 /10),   //1254
new THREE.Vector3(25.151649682505376 /10,  9.87491140364026 /10,  36.7 /10),   //1255
new THREE.Vector3(24.96786446257711 /10,  8.979579625502293 /10,  36.7 /10),   //1256
new THREE.Vector3(24.023553273167856 /10,  9.173418874665494 /10,  36.7 /10),   //1257
new THREE.Vector3(24.207338493096096 /10,  10.068750652803505 /10,  36.7 /10),   //1258
new THREE.Vector3(24.023553273167856 /10,  9.173418874665494 /10,  39.90000000000002 /10),   //1259
new THREE.Vector3(24.96786446257711 /10,  8.979579625502293 /10,  39.90000000000002 /10),   //1260
new THREE.Vector3(25.151649682505376 /10,  9.87491140364026 /10,  39.90000000000002 /10),   //1261
new THREE.Vector3(24.207338493096096 /10,  10.068750652803505 /10,  39.90000000000002 /10),   //1262
new THREE.Vector3(11.184260476594297 /10,  11.808947187141051 /10,  36.7 /10),   //1263
new THREE.Vector3(11.368045696522437 /10,  12.70427896527919 /10,  36.7 /10),   //1264
new THREE.Vector3(12.336846267308287 /10,  12.50541276805905 /10,  36.7 /10),   //1265
new THREE.Vector3(12.153061047380064 /10,  11.61008098992109 /10,  36.7 /10),   //1266
new THREE.Vector3(11.368045696522437 /10,  12.70427896527919 /10,  39.90000000000002 /10),   //1267
new THREE.Vector3(12.336846267308287 /10,  12.50541276805905 /10,  39.90000000000002 /10),   //1268
new THREE.Vector3(11.184260476594297 /10,  11.808947187141051 /10,  39.90000000000002 /10),   //1269
new THREE.Vector3(12.153061047380064 /10,  11.61008098992109 /10,  39.90000000000002 /10),   //1270
new THREE.Vector3(9.052330455512989 /10,  13.179627037638689 /10,  36.7 /10),   //1271
new THREE.Vector3(8.868545235584943 /10,  12.284295259500658 /10,  36.7 /10),   //1272
new THREE.Vector3(7.899745313672726 /10,  12.483161323526003 /10,  36.7 /10),   //1273
new THREE.Vector3(8.08353053360127 /10,  13.378493101663562 /10,  36.7 /10),   //1274
new THREE.Vector3(9.052330455512989 /10,  13.179627037638689 /10,  39.90000000000002 /10),   //1275
new THREE.Vector3(8.868545235584943 /10,  12.284295259500658 /10,  39.90000000000002 /10),   //1276
new THREE.Vector3(7.899745313672726 /10,  12.483161323526003 /10,  39.90000000000002 /10),   //1277
new THREE.Vector3(8.08353053360127 /10,  13.378493101663562 /10,  39.90000000000002 /10),   //1278
new THREE.Vector3(-4.8271015178925945 /10,  14.512702090762467 /10,  36.7 /10),   //1279
new THREE.Vector3(-4.651158336889825 /10,  15.36983043416192 /10,  36.7 /10),   //1280
new THREE.Vector3(-3.6823584149775863 /10,  15.170964370136302 /10,  36.7 /10),   //1281
new THREE.Vector3(-3.858301595980296 /10,  14.313836026736821 /10,  36.7 /10),   //1282
new THREE.Vector3(-4.651158336889825 /10,  15.36983043416192 /10,  39.90000000000002 /10),   //1283
new THREE.Vector3(-3.6823584149775863 /10,  15.170964370136302 /10,  39.90000000000002 /10),   //1284
new THREE.Vector3(-4.8271015178925945 /10,  14.512702090762467 /10,  39.90000000000002 /10),   //1285
new THREE.Vector3(-3.858301595980296 /10,  14.313836026736821 /10,  39.90000000000002 /10),   //1286
new THREE.Vector3(71.5250588224913 /10,  -11.654489691201201 /10,  39.90000000000002 /10),   //1287
new THREE.Vector3(71.5247340796126 /10,  -11.654425345329452 /10,  43.10000000000003 /10),   //1288
new THREE.Vector3(71.5247340796126 /10,  -11.654425345329452 /10,  39.90000000000002 /10),   //1289
new THREE.Vector3(80.93584281940049 /10,  -34.16863665932174 /10,  39.90000000000002 /10),   //1290
new THREE.Vector3(79.96704289748834 /10,  -33.96977059529633 /10,  39.90000000000002 /10),   //1291
new THREE.Vector3(79.78325767756004 /10,  -34.865102373434354 /10,  39.90000000000002 /10),   //1292
new THREE.Vector3(79.64511714573462 /10,  -35.538070569900135 /10,  39.90000000000002 /10),   //1293
new THREE.Vector3(76.06183088264726 /10,  -34.802527534337294 /10,  39.90000000000002 /10),   //1294
new THREE.Vector3(77.57815948600589 /10,  -27.415550577125344 /10,  39.90000000000002 /10),   //1295
new THREE.Vector3(76.38405725670681 /10,  -27.170436591225815 /10,  39.90000000000002 /10),   //1296
new THREE.Vector3(77.47148665426326 /10,  -21.872893641396296 /10,  39.90000000000002 /10),   //1297
new THREE.Vector3(79.26312978592101 /10,  -22.240665159201313 /10,  39.90000000000002 /10),   //1298
new THREE.Vector3(80.08573955713612 /10,  -18.233222833516823 /10,  39.90000000000002 /10),   //1299
new THREE.Vector3(80.09579345319437 /10,  -18.184244071034048 /10,  39.90000000000002 /10),   //1300
new THREE.Vector3(84.72428650741435 /10,  -19.134337248420564 /10,  39.90000000000002 /10),   //1301
new THREE.Vector3(84.73936735149964 /10,  -19.060869104703443 /10,  39.90000000000002 /10),   //1302
new THREE.Vector3(86.38113547399931 /10,  -19.39787568011249 /10,  39.90000000000002 /10),   //1303
new THREE.Vector3(83.25155870928376 /10,  -34.643984864875854 /10,  39.90000000000002 /10),   //1304
new THREE.Vector3(77.57815948600589 /10,  -27.415550577125344 /10,  43.10000000000003 /10),   //1305
new THREE.Vector3(76.38405725670681 /10,  -27.170436591225815 /10,  43.10000000000003 /10),   //1306
new THREE.Vector3(83.25155870928376 /10,  -34.643984864875854 /10,  43.10000000000003 /10),   //1307
new THREE.Vector3(80.9358428194006 /10,  -34.16863665932172 /10,  43.10000000000003 /10),   //1308
new THREE.Vector3(76.06183088264726 /10,  -34.802527534337294 /10,  43.10000000000003 /10),   //1309
new THREE.Vector3(86.38113547399931 /10,  -19.39787568011249 /10,  43.10000000000003 /10),   //1310
new THREE.Vector3(84.73936735149964 /10,  -19.060869104703443 /10,  43.10000000000003 /10),   //1311
new THREE.Vector3(84.72428650741435 /10,  -19.134337248420564 /10,  43.10000000000003 /10),   //1312
new THREE.Vector3(80.09579345319437 /10,  -18.184244071034048 /10,  43.10000000000003 /10),   //1313
new THREE.Vector3(80.08573955713612 /10,  -18.233222833516823 /10,  43.10000000000003 /10),   //1314
new THREE.Vector3(79.26312978592101 /10,  -22.240665159201313 /10,  43.10000000000003 /10),   //1315
new THREE.Vector3(77.47148665426326 /10,  -21.872893641396296 /10,  43.10000000000003 /10),   //1316
new THREE.Vector3(79.64511714573462 /10,  -35.538070569900135 /10,  43.10000000000003 /10),   //1317
new THREE.Vector3(79.78325767756004 /10,  -34.865102373434354 /10,  43.10000000000003 /10),   //1318
new THREE.Vector3(79.96704289748834 /10,  -33.96977059529633 /10,  43.10000000000003 /10),   //1319
new THREE.Vector3(76.38405725670683 /10,  -27.170436591225894 /10,  43.10000000000003 /10),   //1320
new THREE.Vector3(77.4714866542633 /10,  -21.87289364139664 /10,  43.10000000000003 /10),   //1321
new THREE.Vector3(77.4714866542633 /10,  -21.87289364139664 /10,  39.90000000000002 /10),   //1322
new THREE.Vector3(76.38405725670683 /10,  -27.170436591225894 /10,  39.90000000000002 /10),   //1323
new THREE.Vector3(79.26312978592105 /10,  -22.240665159201484 /10,  43.10000000000003 /10),   //1324
new THREE.Vector3(79.26312978592105 /10,  -22.240665159201484 /10,  39.90000000000002 /10),   //1325
new THREE.Vector3(80.0957934531943 /10,  -18.184244071034005 /10,  39.90000000000002 /10),   //1326
new THREE.Vector3(80.08573955713612 /10,  -18.23322283351678 /10,  39.90000000000002 /10),   //1327
new THREE.Vector3(80.08573955713612 /10,  -18.23322283351678 /10,  43.10000000000003 /10),   //1328
new THREE.Vector3(80.0957934531943 /10,  -18.184244071034005 /10,  43.10000000000003 /10),   //1329
new THREE.Vector3(84.72428650741436 /10,  -19.13433724842055 /10,  43.10000000000003 /10),   //1330
new THREE.Vector3(84.72428650741436 /10,  -19.13433724842055 /10,  39.90000000000002 /10),   //1331
new THREE.Vector3(84.73936735149962 /10,  -19.060869104703432 /10,  43.10000000000003 /10),   //1332
new THREE.Vector3(84.73936735149962 /10,  -19.060869104703432 /10,  39.90000000000002 /10),   //1333
new THREE.Vector3(86.38113547399932 /10,  -19.397875680112488 /10,  43.10000000000003 /10),   //1334
new THREE.Vector3(86.38113547399932 /10,  -19.397875680112488 /10,  39.90000000000002 /10),   //1335
new THREE.Vector3(64.57582184134188 /10,  -11.932837014294941 /10,  39.90000000000002 /10),   //1336
new THREE.Vector3(64.58587573739963 /10,  -11.883858251811777 /10,  39.90000000000002 /10),   //1337
new THREE.Vector3(65.53114304889989 /10,  -7.278874983017201 /10,  39.90000000000002 /10),   //1338
new THREE.Vector3(63.73949991792644 /10,  -6.911103465353007 /10,  39.90000000000002 /10),   //1339
new THREE.Vector3(64.70427178358393 /10,  -2.211101417779829 /10,  39.90000000000002 /10),   //1340
new THREE.Vector3(65.89837401288584 /10,  -2.4562154036650496 /10,  39.90000000000002 /10),   //1341
new THREE.Vector3(66.6797628144586 /10,  1.350414016276819 /10,  39.90000000000002 /10),   //1342
new THREE.Vector3(70.26304907754599 /10,  0.6148709807137102 /10,  39.90000000000002 /10),   //1343
new THREE.Vector3(69.9344877543955 /10,  -0.9857549771225879 /10,  39.90000000000002 /10),   //1344
new THREE.Vector3(72.2502036442787 /10,  -1.4611031826769048 /10,  39.90000000000002 /10),   //1345
new THREE.Vector3(73.21900356619061 /10,  -1.6599692467022398 /10,  39.90000000000002 /10),   //1346
new THREE.Vector3(72.74526398397094 /10,  -3.9678485347581676 /10,  39.90000000000002 /10),   //1347
new THREE.Vector3(73.08811532142192 /10,  -4.038225807177861 /10,  39.90000000000002 /10),   //1348
new THREE.Vector3(71.98721419824899 /10,  -9.401397886788383 /10,  39.90000000000002 /10),   //1349
new THREE.Vector3(71.25327888621885 /10,  -12.976851931539763 /10,  39.90000000000002 /10),   //1350
new THREE.Vector3(71.17385351211146 /10,  -13.363782183367555 /10,  39.90000000000002 /10),   //1351
new THREE.Vector3(69.18923405147665 /10,  -12.956398335398115 /10,  39.90000000000002 /10),   //1352
new THREE.Vector3(69.20431489556192 /10,  -12.882930191681197 /10,  39.90000000000002 /10),   //1353
new THREE.Vector3(64.58587573739963 /10,  -11.883858251811777 /10,  43.10000000000003 /10),   //1354
new THREE.Vector3(65.53114304889989 /10,  -7.278874983017201 /10,  43.10000000000003 /10),   //1355
new THREE.Vector3(72.74526398397094 /10,  -3.9678485347581676 /10,  43.10000000000003 /10),   //1356
new THREE.Vector3(73.08811532142192 /10,  -4.038225807177861 /10,  43.10000000000003 /10),   //1357
new THREE.Vector3(65.89837401288584 /10,  -2.4562154036650496 /10,  43.10000000000003 /10),   //1358
new THREE.Vector3(64.70427178358393 /10,  -2.211101417779829 /10,  43.10000000000003 /10),   //1359
new THREE.Vector3(63.73949991792644 /10,  -6.911103465353007 /10,  43.10000000000003 /10),   //1360
new THREE.Vector3(64.57582184134188 /10,  -11.932837014294941 /10,  43.10000000000003 /10),   //1361
new THREE.Vector3(69.20431489556192 /10,  -12.882930191681197 /10,  43.10000000000003 /10),   //1362
new THREE.Vector3(69.18923405147665 /10,  -12.956398335398115 /10,  43.10000000000003 /10),   //1363
new THREE.Vector3(71.17385351211146 /10,  -13.363782183367555 /10,  43.10000000000003 /10),   //1364
new THREE.Vector3(71.25327888621885 /10,  -12.976851931539763 /10,  43.10000000000003 /10),   //1365
new THREE.Vector3(71.98721419824899 /10,  -9.401397886788383 /10,  43.10000000000003 /10),   //1366
new THREE.Vector3(73.21900356619061 /10,  -1.6599692467022398 /10,  43.10000000000003 /10),   //1367
new THREE.Vector3(72.2502036442787 /10,  -1.4611031826769048 /10,  43.10000000000003 /10),   //1368
new THREE.Vector3(69.9344877543955 /10,  -0.9857549771225879 /10,  43.10000000000003 /10),   //1369
new THREE.Vector3(70.26304907754599 /10,  0.6148709807137102 /10,  43.10000000000003 /10),   //1370
new THREE.Vector3(66.6797628144586 /10,  1.350414016276819 /10,  43.10000000000003 /10),   //1371
new THREE.Vector3(64.57582184134195 /10,  -11.932837014294805 /10,  43.10000000000003 /10),   //1372
new THREE.Vector3(64.58587573739969 /10,  -11.883858251811747 /10,  43.10000000000003 /10),   //1373
new THREE.Vector3(64.58587573739969 /10,  -11.883858251811747 /10,  39.90000000000002 /10),   //1374
new THREE.Vector3(64.57582184134195 /10,  -11.932837014294805 /10,  39.90000000000002 /10),   //1375
new THREE.Vector3(69.18923405147669 /10,  -12.956398335398143 /10,  43.10000000000003 /10),   //1376
new THREE.Vector3(69.20431489556199 /10,  -12.882930191681165 /10,  43.10000000000003 /10),   //1377
new THREE.Vector3(69.20431489556199 /10,  -12.882930191681165 /10,  39.90000000000002 /10),   //1378
new THREE.Vector3(69.18923405147669 /10,  -12.956398335398143 /10,  39.90000000000002 /10),   //1379
new THREE.Vector3(71.17385351211152 /10,  -13.363782183367567 /10,  43.10000000000003 /10),   //1380
new THREE.Vector3(71.17385351211152 /10,  -13.363782183367567 /10,  39.90000000000002 /10),   //1381
new THREE.Vector3(73.08811532142194 /10,  -4.038225807177822 /10,  43.10000000000003 /10),   //1382
new THREE.Vector3(71.98721419824903 /10,  -9.401397886788395 /10,  43.10000000000003 /10),   //1383
new THREE.Vector3(71.98721419824903 /10,  -9.401397886788395 /10,  39.90000000000002 /10),   //1384
new THREE.Vector3(73.08811532142194 /10,  -4.038225807177822 /10,  39.90000000000002 /10),   //1385
new THREE.Vector3(71.17385351211149 /10,  -13.363782183367585 /10,  39.90000000000002 /10),   //1386
new THREE.Vector3(71.25327888621891 /10,  -12.976851931539805 /10,  39.90000000000002 /10),   //1387
new THREE.Vector3(71.25327888621891 /10,  -12.976851931539805 /10,  43.10000000000003 /10),   //1388
new THREE.Vector3(71.17385351211149 /10,  -13.363782183367585 /10,  43.10000000000003 /10),   //1389
new THREE.Vector3(71.52473407961264 /10,  -11.654425345329388 /10,  39.90000000000002 /10),   //1390
new THREE.Vector3(71.52473407961264 /10,  -11.654425345329388 /10,  43.10000000000003 /10),   //1391
new THREE.Vector3(72.20836476242415 /10,  -13.172902906267828 /10,  39.90000000000002 /10),   //1392
new THREE.Vector3(72.05252977828032 /10,  -13.932071752947806 /10,  39.90000000000002 /10),   //1393
new THREE.Vector3(71.12193329120633 /10,  -13.741047727868564 /10,  39.90000000000002 /10),   //1394
new THREE.Vector3(71.19834289704971 /10,  -13.36880915344321 /10,  39.90000000000002 /10),   //1395
new THREE.Vector3(72.47981995597256 /10,  -11.850476319303128 /10,  39.90000000000002 /10),   //1396
new THREE.Vector3(72.94229961861062 /10,  -9.59745108221244 /10,  39.90000000000002 /10),   //1397
new THREE.Vector3(73.09314227154725 /10,  -4.013736415723112 /10,  39.90000000000002 /10),   //1398
new THREE.Vector3(75.53032549244837 /10,  -4.514018283513311 /10,  39.90000000000002 /10),   //1399
new THREE.Vector3(73.61103673301253 /10,  -13.864064051157978 /10,  39.90000000000002 /10),   //1400
new THREE.Vector3(73.58654735565334 /10,  -13.859037125213394 /10,  39.90000000000002 /10),   //1401
new THREE.Vector3(73.51013774980962 /10,  -14.231275699638894 /10,  39.90000000000002 /10),   //1402
new THREE.Vector3(73.09314227154725 /10,  -4.013736415723112 /10,  43.10000000000003 /10),   //1403
new THREE.Vector3(75.53032549244837 /10,  -4.514018283513311 /10,  43.10000000000003 /10),   //1404
new THREE.Vector3(72.94229961861062 /10,  -9.59745108221244 /10,  43.10000000000003 /10),   //1405
new THREE.Vector3(72.47981995597256 /10,  -11.850476319303128 /10,  43.10000000000003 /10),   //1406
new THREE.Vector3(72.20836476242415 /10,  -13.172902906267828 /10,  43.10000000000003 /10),   //1407
new THREE.Vector3(71.19834289704971 /10,  -13.36880915344321 /10,  43.10000000000003 /10),   //1408
new THREE.Vector3(71.12193329120633 /10,  -13.741047727868564 /10,  43.10000000000003 /10),   //1409
new THREE.Vector3(72.05252977828032 /10,  -13.932071752947806 /10,  43.10000000000003 /10),   //1410
new THREE.Vector3(73.61103673301253 /10,  -13.864064051157978 /10,  43.10000000000003 /10),   //1411
new THREE.Vector3(73.51013774980962 /10,  -14.231275699638894 /10,  43.10000000000003 /10),   //1412
new THREE.Vector3(73.58654735565334 /10,  -13.859037125213394 /10,  43.10000000000003 /10),   //1413
new THREE.Vector3(59.43337738324989 /10,  -18.79292044398006 /10,  39.90000000000002 /10),   //1414
new THREE.Vector3(61.22502051399538 /10,  -19.160691961597607 /10,  39.90000000000002 /10),   //1415
new THREE.Vector3(60.26024864833813 /10,  -23.860694009170775 /10,  39.90000000000002 /10),   //1416
new THREE.Vector3(59.06614641903639 /10,  -23.615580023285716 /10,  39.90000000000002 /10),   //1417
new THREE.Vector3(58.284757617463235 /10,  -27.422209443227324 /10,  39.90000000000002 /10),   //1418
new THREE.Vector3(54.70147135460416 /10,  -26.68666640771141 /10,  39.90000000000002 /10),   //1419
new THREE.Vector3(54.88525657452958 /10,  -25.791334629587713 /10,  39.90000000000002 /10),   //1420
new THREE.Vector3(52.56954068510243 /10,  -25.315986424126997 /10,  39.90000000000002 /10),   //1421
new THREE.Vector3(51.6007407625059 /10,  -25.117120359961167 /10,  39.90000000000002 /10),   //1422
new THREE.Vector3(54.13351825726178 /10,  -12.77839051600269 /10,  39.90000000000002 /10),   //1423
new THREE.Vector3(55.775286372059696 /10,  -13.115397132406105 /10,  39.90000000000002 /10),   //1424
new THREE.Vector3(55.76020552797386 /10,  -13.188865276123224 /10,  39.90000000000002 /10),   //1425
new THREE.Vector3(60.38869858242227 /10,  -14.138958453556459 /10,  39.90000000000002 /10),   //1426
new THREE.Vector3(60.378644686364396 /10,  -14.18793721603948 /10,  39.90000000000002 /10),   //1427
new THREE.Vector3(54.88525657452958 /10,  -25.791334629587713 /10,  43.10000000000003 /10),   //1428
new THREE.Vector3(52.56954068510243 /10,  -25.315986424126997 /10,  43.10000000000003 /10),   //1429
new THREE.Vector3(60.26024864833813 /10,  -23.860694009170775 /10,  43.10000000000003 /10),   //1430
new THREE.Vector3(59.06614641903639 /10,  -23.615580023285716 /10,  43.10000000000003 /10),   //1431
new THREE.Vector3(54.70147135460416 /10,  -26.68666640771141 /10,  43.10000000000003 /10),   //1432
new THREE.Vector3(58.284757617463235 /10,  -27.422209443227324 /10,  43.10000000000003 /10),   //1433
new THREE.Vector3(59.43337738324989 /10,  -18.79292044398006 /10,  43.10000000000003 /10),   //1434
new THREE.Vector3(61.22502051399538 /10,  -19.160691961597607 /10,  43.10000000000003 /10),   //1435
new THREE.Vector3(60.378644686364396 /10,  -14.18793721603948 /10,  43.10000000000003 /10),   //1436
new THREE.Vector3(60.38869858242227 /10,  -14.138958453556459 /10,  43.10000000000003 /10),   //1437
new THREE.Vector3(55.76020552797386 /10,  -13.188865276123224 /10,  43.10000000000003 /10),   //1438
new THREE.Vector3(55.775286372059696 /10,  -13.115397132406105 /10,  43.10000000000003 /10),   //1439
new THREE.Vector3(54.13351825726178 /10,  -12.77839051600269 /10,  43.10000000000003 /10),   //1440
new THREE.Vector3(51.6007407625059 /10,  -25.117120359961167 /10,  43.10000000000003 /10),   //1441
new THREE.Vector3(51.600740762505886 /10,  -25.11712035996117 /10,  43.10000000000003 /10),   //1442
new THREE.Vector3(54.133518257261734 /10,  -12.778390516002844 /10,  43.10000000000003 /10),   //1443
new THREE.Vector3(54.133518257261734 /10,  -12.778390516002844 /10,  39.90000000000002 /10),   //1444
new THREE.Vector3(51.600740762505886 /10,  -25.11712035996117 /10,  39.90000000000002 /10),   //1445
new THREE.Vector3(55.775286372059526 /10,  -13.115397132406374 /10,  43.10000000000003 /10),   //1446
new THREE.Vector3(55.775286372059526 /10,  -13.115397132406374 /10,  39.90000000000002 /10),   //1447
new THREE.Vector3(60.388698582422236 /10,  -14.138958453556482 /10,  43.10000000000003 /10),   //1448
new THREE.Vector3(60.37864468636441 /10,  -14.187937216039424 /10,  43.10000000000003 /10),   //1449
new THREE.Vector3(60.37864468636441 /10,  -14.187937216039424 /10,  39.90000000000002 /10),   //1450
new THREE.Vector3(60.388698582422236 /10,  -14.138958453556482 /10,  39.90000000000002 /10),   //1451
new THREE.Vector3(55.7752863720596 /10,  -13.115397132406061 /10,  43.10000000000003 /10),   //1452
new THREE.Vector3(55.76020552797383 /10,  -13.18886527612314 /10,  43.10000000000003 /10),   //1453
new THREE.Vector3(55.76020552797383 /10,  -13.18886527612314 /10,  39.90000000000002 /10),   //1454
new THREE.Vector3(55.7752863720596 /10,  -13.115397132406061 /10,  39.90000000000002 /10),   //1455
new THREE.Vector3(67.12775010091482 /10,  -31.33424228282084 /10,  39.90000000000002 /10),   //1456
new THREE.Vector3(64.8120342108036 /10,  -30.858894077219716 /10,  39.90000000000002 /10),   //1457
new THREE.Vector3(63.84323428911959 /10,  -30.660028013241195 /10,  39.90000000000002 /10),   //1458
new THREE.Vector3(63.659449069191346 /10,  -31.555359791379313 /10,  39.90000000000002 /10),   //1459
new THREE.Vector3(63.52130853736567 /10,  -32.22832798784504 /10,  39.90000000000002 /10),   //1460
new THREE.Vector3(59.93802227427855 /10,  -31.492784952282207 /10,  39.90000000000002 /10),   //1461
new THREE.Vector3(61.45435087763686 /10,  -24.105807995070098 /10,  39.90000000000002 /10),   //1462
new THREE.Vector3(61.34767804589468 /10,  -18.563151059341543 /10,  39.90000000000002 /10),   //1463
new THREE.Vector3(63.139321177552205 /10,  -18.930922577146347 /10,  39.90000000000002 /10),   //1464
new THREE.Vector3(63.96193094876743 /10,  -14.923480251461827 /10,  39.90000000000002 /10),   //1465
new THREE.Vector3(63.97198484482538 /10,  -14.874501488979096 /10,  39.90000000000002 /10),   //1466
new THREE.Vector3(68.60047789904549 /10,  -15.824594666365444 /10,  39.90000000000002 /10),   //1467
new THREE.Vector3(68.61555874313072 /10,  -15.751126522648619 /10,  39.90000000000002 /10),   //1468
new THREE.Vector3(70.25732686563046 /10,  -16.08813309805762 /10,  39.90000000000002 /10),   //1469
new THREE.Vector3(61.45435087763686 /10,  -24.105807995070098 /10,  43.10000000000003 /10),   //1470
new THREE.Vector3(63.659449069191346 /10,  -31.555359791379313 /10,  43.10000000000003 /10),   //1471
new THREE.Vector3(63.52130853736567 /10,  -32.22832798784504 /10,  43.10000000000003 /10),   //1472
new THREE.Vector3(67.12775010091482 /10,  -31.33424228282084 /10,  43.10000000000003 /10),   //1473
new THREE.Vector3(64.8120342108036 /10,  -30.858894077219716 /10,  43.10000000000003 /10),   //1474
new THREE.Vector3(59.93802227427855 /10,  -31.492784952282207 /10,  43.10000000000003 /10),   //1475
new THREE.Vector3(70.25732686563046 /10,  -16.08813309805762 /10,  43.10000000000003 /10),   //1476
new THREE.Vector3(68.61555874313072 /10,  -15.751126522648619 /10,  43.10000000000003 /10),   //1477
new THREE.Vector3(68.60047789904549 /10,  -15.824594666365444 /10,  43.10000000000003 /10),   //1478
new THREE.Vector3(63.97198484482538 /10,  -14.874501488979096 /10,  43.10000000000003 /10),   //1479
new THREE.Vector3(63.96193094876743 /10,  -14.923480251461827 /10,  43.10000000000003 /10),   //1480
new THREE.Vector3(63.139321177552205 /10,  -18.930922577146347 /10,  43.10000000000003 /10),   //1481
new THREE.Vector3(61.34767804589468 /10,  -18.563151059341543 /10,  43.10000000000003 /10),   //1482
new THREE.Vector3(63.84323428911959 /10,  -30.660028013241195 /10,  43.10000000000003 /10),   //1483
new THREE.Vector3(61.34767804589465 /10,  -18.563151059341475 /10,  39.90000000000002 /10),   //1484
new THREE.Vector3(61.22502051399538 /10,  -19.16069196159766 /10,  39.90000000000002 /10),   //1485
new THREE.Vector3(61.22502051399538 /10,  -19.160691961597703 /10,  43.10000000000003 /10),   //1486
new THREE.Vector3(61.34767804589465 /10,  -18.563151059341475 /10,  43.10000000000003 /10),   //1487
new THREE.Vector3(60.26024864833813 /10,  -23.86069400917072 /10,  43.10000000000003 /10),   //1488
new THREE.Vector3(60.26024864833813 /10,  -23.86069400917072 /10,  39.90000000000002 /10),   //1489
new THREE.Vector3(68.60047789904537 /10,  -15.824594666365495 /10,  43.10000000000003 /10),   //1490
new THREE.Vector3(68.61555874313063 /10,  -15.751126522648503 /10,  43.10000000000003 /10),   //1491
new THREE.Vector3(68.61555874313063 /10,  -15.751126522648503 /10,  39.90000000000002 /10),   //1492
new THREE.Vector3(68.60047789904537 /10,  -15.824594666365495 /10,  39.90000000000002 /10),   //1493
new THREE.Vector3(63.97198484482533 /10,  -14.874501488979012 /10,  43.10000000000003 /10),   //1494
new THREE.Vector3(63.97198484482533 /10,  -14.874501488979012 /10,  39.90000000000002 /10),   //1495
new THREE.Vector3(70.25732686563038 /10,  -16.08813309805766 /10,  43.10000000000003 /10),   //1496
new THREE.Vector3(70.25732686563038 /10,  -16.08813309805766 /10,  39.90000000000002 /10),   //1497
new THREE.Vector3(63.96193094876732 /10,  -14.923480251461815 /10,  39.90000000000002 /10),   //1498
new THREE.Vector3(63.96193094876732 /10,  -14.923480251461815 /10,  43.10000000000003 /10),   //1499
new THREE.Vector3(75.6798435228337 /10,  -21.505122123638504 /10,  39.90000000000002 /10),   //1500
new THREE.Vector3(75.18995502740208 /10,  -26.92532260535508 /10,  39.90000000000002 /10),   //1501
new THREE.Vector3(73.6736264240438 /10,  -34.312299562566885 /10,  39.90000000000002 /10),   //1502
new THREE.Vector3(70.09034016118474 /10,  -33.576756527050975 /10,  39.90000000000002 /10),   //1503
new THREE.Vector3(70.41226591293828 /10,  -32.00845655244722 /10,  39.90000000000002 /10),   //1504
new THREE.Vector3(68.09655002282723 /10,  -31.53310834684614 /10,  39.90000000000002 /10),   //1505
new THREE.Vector3(71.899094979972 /10,  -16.425139714367475 /10,  39.90000000000002 /10),   //1506
new THREE.Vector3(71.88401413588673 /10,  -16.49860785808465 /10,  39.90000000000002 /10),   //1507
new THREE.Vector3(76.51250719010666 /10,  -17.44870103547111 /10,  39.90000000000002 /10),   //1508
new THREE.Vector3(76.50245329404889 /10,  -17.497679797953996 /10,  39.90000000000002 /10),   //1509
new THREE.Vector3(75.6798435228337 /10,  -21.505122123638504 /10,  43.10000000000003 /10),   //1510
new THREE.Vector3(76.50245329404889 /10,  -17.497679797953996 /10,  43.10000000000003 /10),   //1511
new THREE.Vector3(70.41226591293828 /10,  -32.00845655244722 /10,  43.10000000000003 /10),   //1512
new THREE.Vector3(68.09655002282723 /10,  -31.53310834684614 /10,  43.10000000000003 /10),   //1513
new THREE.Vector3(75.18995502740208 /10,  -26.92532260535508 /10,  43.10000000000003 /10),   //1514
new THREE.Vector3(76.51250719010666 /10,  -17.44870103547111 /10,  43.10000000000003 /10),   //1515
new THREE.Vector3(71.88401413588673 /10,  -16.49860785808465 /10,  43.10000000000003 /10),   //1516
new THREE.Vector3(71.899094979972 /10,  -16.425139714367475 /10,  43.10000000000003 /10),   //1517
new THREE.Vector3(70.09034016118474 /10,  -33.576756527050975 /10,  43.10000000000003 /10),   //1518
new THREE.Vector3(73.6736264240438 /10,  -34.312299562566885 /10,  43.10000000000003 /10),   //1519
new THREE.Vector3(70.25732686563046 /10,  -16.088133098057924 /10,  39.90000000000002 /10),   //1520
new THREE.Vector3(67.12775010091487 /10,  -31.334242282820853 /10,  39.90000000000002 /10),   //1521
new THREE.Vector3(67.12775010091487 /10,  -31.334242282820853 /10,  43.10000000000003 /10),   //1522
new THREE.Vector3(70.25732686563046 /10,  -16.088133098057924 /10,  43.10000000000003 /10),   //1523
new THREE.Vector3(71.89909497997205 /10,  -16.425139714367813 /10,  43.10000000000003 /10),   //1524
new THREE.Vector3(71.89909497997205 /10,  -16.425139714367813 /10,  39.90000000000002 /10),   //1525
new THREE.Vector3(71.88401413588673 /10,  -16.498607858084675 /10,  43.10000000000003 /10),   //1526
new THREE.Vector3(76.51250719010666 /10,  -17.448701035471156 /10,  43.10000000000003 /10),   //1527
new THREE.Vector3(76.51250719010666 /10,  -17.448701035471156 /10,  39.90000000000002 /10),   //1528
new THREE.Vector3(71.88401413588673 /10,  -16.498607858084675 /10,  39.90000000000002 /10),   //1529
new THREE.Vector3(71.899094979972 /10,  -16.425139714367518 /10,  43.10000000000003 /10),   //1530
new THREE.Vector3(71.899094979972 /10,  -16.425139714367518 /10,  39.90000000000002 /10),   //1531
new THREE.Vector3(76.50245329404889 /10,  -17.497679797953992 /10,  43.10000000000003 /10),   //1532
new THREE.Vector3(76.50245329404889 /10,  -17.497679797953992 /10,  39.90000000000002 /10),   //1533
new THREE.Vector3(79.7406509943963 /10,  -10.81838694966409 /10,  39.90000000000002 /10),   //1534
new THREE.Vector3(77.94900786296672 /10,  -10.450615431906312 /10,  39.90000000000002 /10),   //1535
new THREE.Vector3(77.12639808336546 /10,  -14.45805779844451 /10,  39.90000000000002 /10),   //1536
new THREE.Vector3(77.1163441873074 /10,  -14.507036560927169 /10,  39.90000000000002 /10),   //1537
new THREE.Vector3(75.2433963100628 /10,  -14.122575575693904 /10,  39.90000000000002 /10),   //1538
new THREE.Vector3(75.22831546597709 /10,  -14.196043719411128 /10,  39.90000000000002 /10),   //1539
new THREE.Vector3(75.94535031959516 /10,  -2.492174978561847 /10,  39.90000000000002 /10),   //1540
new THREE.Vector3(77.70368796667749 /10,  -2.853109862219531 /10,  39.90000000000002 /10),   //1541
new THREE.Vector3(78.6479984333164 /10,  -3.0469489630197684 /10,  39.90000000000002 /10),   //1542
new THREE.Vector3(78.82394161431918 /10,  -2.1898206196204284 /10,  39.90000000000002 /10),   //1543
new THREE.Vector3(81.40316324643064 /10,  -2.719258785980077 /10,  39.90000000000002 /10),   //1544
new THREE.Vector3(80.72130801582381 /10,  -6.040998457375094 /10,  39.90000000000002 /10),   //1545
new THREE.Vector3(75.94535031959516 /10,  -2.492174978561847 /10,  43.10000000000003 /10),   //1546
new THREE.Vector3(77.70368796667749 /10,  -2.853109862219531 /10,  43.10000000000003 /10),   //1547
new THREE.Vector3(78.82394161431918 /10,  -2.1898206196204284 /10,  43.10000000000003 /10),   //1548
new THREE.Vector3(81.40316324643064 /10,  -2.719258785980077 /10,  43.10000000000003 /10),   //1549
new THREE.Vector3(80.72130801582381 /10,  -6.040998457375094 /10,  43.10000000000003 /10),   //1550
new THREE.Vector3(79.7406509943963 /10,  -10.81838694966409 /10,  43.10000000000003 /10),   //1551
new THREE.Vector3(77.94900786296672 /10,  -10.450615431906312 /10,  43.10000000000003 /10),   //1552
new THREE.Vector3(75.22831546597709 /10,  -14.196043719411128 /10,  43.10000000000003 /10),   //1553
new THREE.Vector3(75.2433963100628 /10,  -14.122575575693904 /10,  43.10000000000003 /10),   //1554
new THREE.Vector3(77.1163441873074 /10,  -14.507036560927169 /10,  43.10000000000003 /10),   //1555
new THREE.Vector3(77.12639808336549 /10,  -14.458057798444463 /10,  43.10000000000003 /10),   //1556
new THREE.Vector3(78.6479984333164 /10,  -3.0469489630197684 /10,  43.10000000000003 /10),   //1557
new THREE.Vector3(79.74065099439646 /10,  -10.81838694966411 /10,  39.90000000000002 /10),   //1558
new THREE.Vector3(80.72130801582395 /10,  -6.040998457375022 /10,  39.90000000000002 /10),   //1559
new THREE.Vector3(80.72130801582395 /10,  -6.040998457375022 /10,  43.10000000000003 /10),   //1560
new THREE.Vector3(79.74065099439646 /10,  -10.81838694966411 /10,  43.10000000000003 /10),   //1561
new THREE.Vector3(77.11634418730745 /10,  -14.507036560927242 /10,  39.90000000000002 /10),   //1562
new THREE.Vector3(77.12639808336552 /10,  -14.458057798444532 /10,  39.90000000000002 /10),   //1563
new THREE.Vector3(77.12639808336552 /10,  -14.458057798444479 /10,  43.10000000000003 /10),   //1564
new THREE.Vector3(77.11634418730745 /10,  -14.507036560927242 /10,  43.10000000000003 /10),   //1565
new THREE.Vector3(75.24339631006279 /10,  -14.122575575693906 /10,  43.10000000000003 /10),   //1566
new THREE.Vector3(75.24339631006279 /10,  -14.122575575693906 /10,  39.90000000000002 /10),   //1567
new THREE.Vector3(75.22831546597713 /10,  -14.196043719411104 /10,  43.10000000000003 /10),   //1568
new THREE.Vector3(73.61103673301251 /10,  -13.864064051157964 /10,  43.10000000000003 /10),   //1569
new THREE.Vector3(73.61103673301251 /10,  -13.864064051157964 /10,  39.90000000000002 /10),   //1570
new THREE.Vector3(75.22831546597713 /10,  -14.196043719411104 /10,  39.90000000000002 /10),   //1571
new THREE.Vector3(75.53032549244837 /10,  -4.51401828351326 /10,  43.10000000000003 /10),   //1572
new THREE.Vector3(73.61103673301251 /10,  -13.864064051157978 /10,  43.10000000000003 /10),   //1573
new THREE.Vector3(73.61103673301251 /10,  -13.864064051157978 /10,  39.90000000000002 /10),   //1574
new THREE.Vector3(75.53032549244837 /10,  -4.51401828351326 /10,  39.90000000000002 /10),   //1575
new THREE.Vector3(75.9453503195952 /10,  -2.492174978561902 /10,  43.10000000000003 /10),   //1576
new THREE.Vector3(75.9453503195952 /10,  -2.492174978561902 /10,  39.90000000000002 /10),   //1577
new THREE.Vector3(63.51016955428209 /10,  -1.9659874318946957 /10,  39.90000000000002 /10),   //1578
new THREE.Vector3(61.94785678718139 /10,  -6.543331947735217 /10,  39.90000000000002 /10),   //1579
new THREE.Vector3(61.0025894756807 /10,  -11.148315216529793 /10,  39.90000000000002 /10),   //1580
new THREE.Vector3(60.99253557962292 /10,  -11.197293979012494 /10,  39.90000000000002 /10),   //1581
new THREE.Vector3(56.36404252517455 /10,  -10.247200801579043 /10,  39.90000000000002 /10),   //1582
new THREE.Vector3(56.34896168108931 /10,  -10.320668945296514 /10,  39.90000000000002 /10),   //1583
new THREE.Vector3(54.70719356629139 /10,  -9.983662328892697 /10,  39.90000000000002 /10),   //1584
new THREE.Vector3(57.23997106104714 /10,  2.3550675150655853 /10,  39.90000000000002 /10),   //1585
new THREE.Vector3(59.55568630228455 /10,  1.879719442659548 /10,  39.90000000000002 /10),   //1586
new THREE.Vector3(60.52448687307068 /10,  1.680853245439136 /10,  39.90000000000002 /10),   //1587
new THREE.Vector3(60.7082720929961 /10,  2.576185023562878 /10,  39.90000000000002 /10),   //1588
new THREE.Vector3(64.29155835585522 /10,  1.8406419880469016 /10,  39.90000000000002 /10),   //1589
new THREE.Vector3(60.7082720929961 /10,  2.576185023562878 /10,  43.10000000000003 /10),   //1590
new THREE.Vector3(64.29155835585522 /10,  1.8406419880469016 /10,  43.10000000000003 /10),   //1591
new THREE.Vector3(56.34896168108931 /10,  -10.320668945296514 /10,  43.10000000000003 /10),   //1592
new THREE.Vector3(56.36404252517455 /10,  -10.247200801579043 /10,  43.10000000000003 /10),   //1593
new THREE.Vector3(60.99253557962292 /10,  -11.197293979012494 /10,  43.10000000000003 /10),   //1594
new THREE.Vector3(61.0025894756807 /10,  -11.148315216529793 /10,  43.10000000000003 /10),   //1595
new THREE.Vector3(61.94785678718139 /10,  -6.543331947735217 /10,  43.10000000000003 /10),   //1596
new THREE.Vector3(63.51016955428209 /10,  -1.9659874318946957 /10,  43.10000000000003 /10),   //1597
new THREE.Vector3(60.52448687307068 /10,  1.680853245439136 /10,  43.10000000000003 /10),   //1598
new THREE.Vector3(59.55568630228455 /10,  1.879719442659548 /10,  43.10000000000003 /10),   //1599
new THREE.Vector3(57.23997106104714 /10,  2.3550675150655853 /10,  43.10000000000003 /10),   //1600
new THREE.Vector3(54.70719356629139 /10,  -9.983662328892697 /10,  43.10000000000003 /10),   //1601
new THREE.Vector3(57.239971061047044 /10,  2.355067515065669 /10,  43.10000000000003 /10),   //1602
new THREE.Vector3(54.70719356629131 /10,  -9.98366232889281 /10,  43.10000000000003 /10),   //1603
new THREE.Vector3(54.70719356629131 /10,  -9.98366232889281 /10,  39.90000000000002 /10),   //1604
new THREE.Vector3(57.239971061047044 /10,  2.355067515065669 /10,  39.90000000000002 /10),   //1605
new THREE.Vector3(59.555686302284485 /10,  1.8797194426592896 /10,  43.10000000000003 /10),   //1606
new THREE.Vector3(59.555686302284485 /10,  1.8797194426592896 /10,  39.90000000000002 /10),   //1607
new THREE.Vector3(63.73949991792633 /10,  -6.911103465352739 /10,  43.10000000000003 /10),   //1608
new THREE.Vector3(61.94785678718128 /10,  -6.54333194773519 /10,  43.10000000000003 /10),   //1609
new THREE.Vector3(61.94785678718128 /10,  -6.54333194773519 /10,  39.90000000000002 /10),   //1610
new THREE.Vector3(63.73949991792633 /10,  -6.911103465352739 /10,  39.90000000000002 /10),   //1611
new THREE.Vector3(64.70427178358383 /10,  -2.2111014177796062 /10,  39.90000000000002 /10),   //1612
new THREE.Vector3(64.70427178358383 /10,  -2.2111014177796062 /10,  43.10000000000003 /10),   //1613
new THREE.Vector3(60.99253557962303 /10,  -11.197293979012532 /10,  39.90000000000002 /10),   //1614
new THREE.Vector3(61.00258947568078 /10,  -11.148315216529785 /10,  39.90000000000002 /10),   //1615
new THREE.Vector3(61.00258947568078 /10,  -11.148315216529785 /10,  43.10000000000003 /10),   //1616
new THREE.Vector3(60.99253557962303 /10,  -11.197293979012532 /10,  43.10000000000003 /10),   //1617
new THREE.Vector3(56.34896168108934 /10,  -10.320668945296417 /10,  43.10000000000003 /10),   //1618
new THREE.Vector3(54.707193566291444 /10,  -9.983662328892702 /10,  43.10000000000003 /10),   //1619
new THREE.Vector3(54.707193566291444 /10,  -9.983662328892702 /10,  39.90000000000002 /10),   //1620
new THREE.Vector3(56.34896168108934 /10,  -10.320668945296417 /10,  39.90000000000002 /10),   //1621
new THREE.Vector3(56.36404252517462 /10,  -10.247200801579053 /10,  43.10000000000003 /10),   //1622
new THREE.Vector3(56.36404252517462 /10,  -10.247200801579053 /10,  39.90000000000002 /10),   //1623
new THREE.Vector3(49.36185197264461 /10,  4.905270564032636 /10,  39.90000000000002 /10),   //1624
new THREE.Vector3(48.58046317521516 /10,  1.0986411642755551 /10,  39.90000000000002 /10),   //1625
new THREE.Vector3(47.61569130955763 /10,  -3.601360883297553 /10,  39.90000000000002 /10),   //1626
new THREE.Vector3(47.49303377770511 /10,  -4.1989017853257 /10,  39.90000000000002 /10),   //1627
new THREE.Vector3(45.701390646275634 /10,  -3.8311302675676506 /10,  39.90000000000002 /10),   //1628
new THREE.Vector3(44.87878087319534 /10,  -7.838572635919848 /10,  39.90000000000002 /10),   //1629
new THREE.Vector3(44.86872697713744 /10,  -7.887551398402683 /10,  39.90000000000002 /10),   //1630
new THREE.Vector3(41.93196037702634 /10,  -7.284719800105955 /10,  39.90000000000002 /10),   //1631
new THREE.Vector3(41.91687953069962 /10,  -7.35818795474221 /10,  39.90000000000002 /10),   //1632
new THREE.Vector3(38.607874337527406 /10,  -6.6789467371058535 /10,  39.90000000000002 /10),   //1633
new THREE.Vector3(38.63803602569796 /10,  -6.532010449671603 /10,  39.90000000000002 /10),   //1634
new THREE.Vector3(38.80674040313195 /10,  -5.710146772764229 /10,  39.90000000000002 /10),   //1635
new THREE.Vector3(39.810805034104845 /10,  -5.916251641981118 /10,  39.90000000000002 /10),   //1636
new THREE.Vector3(41.33618214439727 /10,  1.5148062038128947 /10,  39.90000000000002 /10),   //1637
new THREE.Vector3(40.3321175069195 /10,  1.7209110413420294 /10,  39.90000000000002 /10),   //1638
new THREE.Vector3(41.14065182548783 /10,  5.659783108485156 /10,  39.90000000000002 /10),   //1639
new THREE.Vector3(42.10945174831202 /10,  5.460917044272459 /10,  39.90000000000002 /10),   //1640
new THREE.Vector3(44.752345775101425 /10,  4.91840883361663 /10,  39.90000000000002 /10),   //1641
new THREE.Vector3(44.9361309950297 /10,  5.813740611754504 /10,  39.90000000000002 /10),   //1642
new THREE.Vector3(38.80674040766555 /10,  -5.710146773694947 /10,  43.10000000000003 /10),   //1643
new THREE.Vector3(39.810805034104845 /10,  -5.916251641981118 /10,  43.10000000000003 /10),   //1644
new THREE.Vector3(41.33618214439727 /10,  1.5148062038128947 /10,  43.10000000000003 /10),   //1645
new THREE.Vector3(40.3321175069195 /10,  1.7209110413420294 /10,  43.10000000000003 /10),   //1646
new THREE.Vector3(41.14065182548783 /10,  5.659783108485156 /10,  43.10000000000003 /10),   //1647
new THREE.Vector3(38.63803602569796 /10,  -6.532010449671603 /10,  43.10000000000003 /10),   //1648
new THREE.Vector3(38.607874337527406 /10,  -6.6789467371058535 /10,  43.10000000000003 /10),   //1649
new THREE.Vector3(41.91687953069962 /10,  -7.35818795474221 /10,  43.10000000000003 /10),   //1650
new THREE.Vector3(41.93196037702634 /10,  -7.284719800105955 /10,  43.10000000000003 /10),   //1651
new THREE.Vector3(44.86872697713744 /10,  -7.887551398402683 /10,  43.10000000000003 /10),   //1652
new THREE.Vector3(44.878780873195325 /10,  -7.8385726359199115 /10,  43.10000000000003 /10),   //1653
new THREE.Vector3(45.701390646275634 /10,  -3.8311302675676506 /10,  43.10000000000003 /10),   //1654
new THREE.Vector3(47.49303377770511 /10,  -4.1989017853257 /10,  43.10000000000003 /10),   //1655
new THREE.Vector3(47.61569130955763 /10,  -3.601360883297553 /10,  43.10000000000003 /10),   //1656
new THREE.Vector3(48.58046317521516 /10,  1.0986411642755551 /10,  43.10000000000003 /10),   //1657
new THREE.Vector3(49.36185197264461 /10,  4.905270564032636 /10,  43.10000000000003 /10),   //1658
new THREE.Vector3(44.9361309950297 /10,  5.813740611754504 /10,  43.10000000000003 /10),   //1659
new THREE.Vector3(44.752345775101425 /10,  4.91840883361663 /10,  43.10000000000003 /10),   //1660
new THREE.Vector3(42.109451748874804 /10,  5.460917047012263 /10,  43.10000000000003 /10),   //1661
new THREE.Vector3(44.86872697713741 /10,  -7.887551398402699 /10,  39.90000000000002 /10),   //1662
new THREE.Vector3(44.87878087319534 /10,  -7.838572635919842 /10,  39.90000000000002 /10),   //1663
new THREE.Vector3(44.87878087319532 /10,  -7.838572635919902 /10,  43.10000000000003 /10),   //1664
new THREE.Vector3(44.86872697713741 /10,  -7.887551398402699 /10,  43.10000000000003 /10),   //1665
new THREE.Vector3(38.607874337527434 /10,  -6.678946737105898 /10,  43.10000000000003 /10),   //1666
new THREE.Vector3(38.63803602569809 /10,  -6.532010449671607 /10,  43.10000000000003 /10),   //1667
new THREE.Vector3(38.63803602569809 /10,  -6.532010449671607 /10,  39.90000000000002 /10),   //1668
new THREE.Vector3(38.607874337527434 /10,  -6.678946737105898 /10,  39.90000000000002 /10),   //1669
new THREE.Vector3(41.91687953069983 /10,  -7.358187954742163 /10,  43.10000000000003 /10),   //1670
new THREE.Vector3(41.91687953069983 /10,  -7.358187954742163 /10,  39.90000000000002 /10),   //1671
new THREE.Vector3(41.931960377026456 /10,  -7.284719800105952 /10,  43.10000000000003 /10),   //1672
new THREE.Vector3(41.931960377026456 /10,  -7.284719800105952 /10,  39.90000000000002 /10),   //1673
new THREE.Vector3(38.63803602569807 /10,  -6.5320104496716125 /10,  39.90000000000002 /10),   //1674
new THREE.Vector3(38.80674040313195 /10,  -5.710146772764193 /10,  39.90000000000002 /10),   //1675
new THREE.Vector3(38.80674040766553 /10,  -5.710146773694912 /10,  43.10000000000003 /10),   //1676
new THREE.Vector3(38.63803602569807 /10,  -6.5320104496716125 /10,  43.10000000000003 /10),   //1677
new THREE.Vector3(48.462067134914065 /10,  -8.574115671201914 /10,  39.90000000000002 /10),   //1678
new THREE.Vector3(49.4073344403032 /10,  -3.969132400915147 /10,  39.90000000000002 /10),   //1679
new THREE.Vector3(49.7745654045169 /10,  0.853527178390173 /10,  39.90000000000002 /10),   //1680
new THREE.Vector3(50.5559542060898 /10,  4.6601565983316835 /10,  39.90000000000002 /10),   //1681
new THREE.Vector3(54.13924046917727 /10,  3.924613562769222 /10,  39.90000000000002 /10),   //1682
new THREE.Vector3(53.955455249252005 /10,  3.029281784645485 /10,  39.90000000000002 /10),   //1683
new THREE.Vector3(56.271170490261014 /10,  2.5539337122857892 /10,  39.90000000000002 /10),   //1684
new THREE.Vector3(53.06542544310784 /10,  -9.646655753343135 /10,  39.90000000000002 /10),   //1685
new THREE.Vector3(53.08050628719308 /10,  -9.573187609626114 /10,  39.90000000000002 /10),   //1686
new THREE.Vector3(48.45201323274465 /10,  -8.62309443219247 /10,  39.90000000000002 /10),   //1687
new THREE.Vector3(54.13924046917727 /10,  3.924613562769222 /10,  43.10000000000003 /10),   //1688
new THREE.Vector3(53.955455249252005 /10,  3.029281784645485 /10,  43.10000000000003 /10),   //1689
new THREE.Vector3(50.5559542060898 /10,  4.6601565983316835 /10,  43.10000000000003 /10),   //1690
new THREE.Vector3(48.462067134914065 /10,  -8.574115671201868 /10,  43.10000000000003 /10),   //1691
new THREE.Vector3(49.4073344403032 /10,  -3.969132400915147 /10,  43.10000000000003 /10),   //1692
new THREE.Vector3(56.271170490261014 /10,  2.5539337122857892 /10,  43.10000000000003 /10),   //1693
new THREE.Vector3(49.7745654045169 /10,  0.853527178390173 /10,  43.10000000000003 /10),   //1694
new THREE.Vector3(48.45201323274465 /10,  -8.62309443219247 /10,  43.10000000000003 /10),   //1695
new THREE.Vector3(53.08050628719308 /10,  -9.573187609626114 /10,  43.10000000000003 /10),   //1696
new THREE.Vector3(53.06542544310784 /10,  -9.646655753343135 /10,  43.10000000000003 /10),   //1697
new THREE.Vector3(49.407334440303224 /10,  -3.9691324009151345 /10,  43.10000000000003 /10),   //1698
new THREE.Vector3(47.61569130955768 /10,  -3.601360883297553 /10,  43.10000000000003 /10),   //1699
new THREE.Vector3(47.61569130955768 /10,  -3.601360883297553 /10,  39.90000000000002 /10),   //1700
new THREE.Vector3(49.407334440303224 /10,  -3.9691324009151345 /10,  39.90000000000002 /10),   //1701
new THREE.Vector3(48.580463175215314 /10,  1.0986411642754808 /10,  39.90000000000002 /10),   //1702
new THREE.Vector3(48.580463175215314 /10,  1.0986411642754808 /10,  43.10000000000003 /10),   //1703
new THREE.Vector3(48.45201323274457 /10,  -8.623094432192454 /10,  43.10000000000003 /10),   //1704
new THREE.Vector3(48.46206713491391 /10,  -8.574115671201765 /10,  43.10000000000003 /10),   //1705
new THREE.Vector3(48.462067134913916 /10,  -8.574115671201868 /10,  39.90000000000002 /10),   //1706
new THREE.Vector3(48.45201323274457 /10,  -8.623094432192454 /10,  39.90000000000002 /10),   //1707
new THREE.Vector3(53.06542544310768 /10,  -9.646655753343135 /10,  43.10000000000003 /10),   //1708
new THREE.Vector3(53.08050628719292 /10,  -9.57318760962601 /10,  43.10000000000003 /10),   //1709
new THREE.Vector3(53.08050628719292 /10,  -9.57318760962601 /10,  39.90000000000002 /10),   //1710
new THREE.Vector3(53.06542544310768 /10,  -9.646655753343135 /10,  39.90000000000002 /10),   //1711
new THREE.Vector3(54.707193566291224 /10,  -9.983662328892652 /10,  43.10000000000003 /10),   //1712
new THREE.Vector3(54.707193566291224 /10,  -9.983662328892652 /10,  39.90000000000002 /10),   //1713
new THREE.Vector3(48.132439730785286 /10,  -25.338237868505363 /10,  39.90000000000002 /10),   //1714
new THREE.Vector3(44.54915346769773 /10,  -24.602694832942557 /10,  39.90000000000002 /10),   //1715
new THREE.Vector3(45.33054226927063 /10,  -20.796065413000626 /10,  39.90000000000002 /10),   //1716
new THREE.Vector3(44.136440039969024 /10,  -20.550951427115447 /10,  39.90000000000002 /10),   //1717
new THREE.Vector3(45.10121190562634 /10,  -15.850949379542293 /10,  39.90000000000002 /10),   //1718
new THREE.Vector3(46.8928550363719 /10,  -16.21872089715986 /10,  39.90000000000002 /10),   //1719
new THREE.Vector3(47.838122339714396 /10,  -11.613737669266287 /10,  39.90000000000002 /10),   //1720
new THREE.Vector3(47.84817623577185 /10,  -11.56475890678325 /10,  39.90000000000002 /10),   //1721
new THREE.Vector3(52.476669289992365 /10,  -12.514852084169975 /10,  39.90000000000002 /10),   //1722
new THREE.Vector3(52.491750134077606 /10,  -12.441383940453028 /10,  39.90000000000002 /10),   //1723
new THREE.Vector3(49.285024873307044 /10,  -24.641772154547393 /10,  39.90000000000002 /10),   //1724
new THREE.Vector3(48.31622495071071 /10,  -24.442906090381676 /10,  39.90000000000002 /10),   //1725
new THREE.Vector3(49.285024873307044 /10,  -24.641772154547393 /10,  43.10000000000003 /10),   //1726
new THREE.Vector3(45.33054226927063 /10,  -20.796065413000626 /10,  43.10000000000003 /10),   //1727
new THREE.Vector3(44.136440039969024 /10,  -20.550951427115447 /10,  43.10000000000003 /10),   //1728
new THREE.Vector3(44.54915346769773 /10,  -24.602694832942557 /10,  43.10000000000003 /10),   //1729
new THREE.Vector3(48.132439730785286 /10,  -25.338237868505363 /10,  43.10000000000003 /10),   //1730
new THREE.Vector3(52.491750134077606 /10,  -12.441383940453028 /10,  43.10000000000003 /10),   //1731
new THREE.Vector3(52.476669289992365 /10,  -12.514852084169975 /10,  43.10000000000003 /10),   //1732
new THREE.Vector3(47.84817623577185 /10,  -11.56475890678325 /10,  43.10000000000003 /10),   //1733
new THREE.Vector3(47.838122339714396 /10,  -11.613737669266287 /10,  43.10000000000003 /10),   //1734
new THREE.Vector3(46.8928550363719 /10,  -16.21872089715986 /10,  43.10000000000003 /10),   //1735
new THREE.Vector3(45.10121190562634 /10,  -15.850949379542293 /10,  43.10000000000003 /10),   //1736
new THREE.Vector3(48.31622495071071 /10,  -24.442906090381676 /10,  43.10000000000003 /10),   //1737
new THREE.Vector3(45.10121190562639 /10,  -15.850949379542469 /10,  43.10000000000003 /10),   //1738
new THREE.Vector3(46.89285503637193 /10,  -16.21872089716 /10,  43.10000000000003 /10),   //1739
new THREE.Vector3(46.89285503637193 /10,  -16.21872089716 /10,  39.90000000000002 /10),   //1740
new THREE.Vector3(45.10121190562639 /10,  -15.850949379542469 /10,  39.90000000000002 /10),   //1741
new THREE.Vector3(44.136440039968996 /10,  -20.550951427115507 /10,  43.10000000000003 /10),   //1742
new THREE.Vector3(44.136440039968996 /10,  -20.550951427115507 /10,  39.90000000000002 /10),   //1743
new THREE.Vector3(47.84817623577193 /10,  -11.564758906783217 /10,  39.90000000000002 /10),   //1744
new THREE.Vector3(47.83812233971436 /10,  -11.61373766926617 /10,  39.90000000000002 /10),   //1745
new THREE.Vector3(47.83812233971436 /10,  -11.61373766926617 /10,  43.10000000000003 /10),   //1746
new THREE.Vector3(47.84817623577193 /10,  -11.564758906783217 /10,  43.10000000000003 /10),   //1747
new THREE.Vector3(52.476669289992344 /10,  -12.514852084169858 /10,  43.10000000000003 /10),   //1748
new THREE.Vector3(52.491750134077606 /10,  -12.441383940452894 /10,  43.10000000000003 /10),   //1749
new THREE.Vector3(52.491750134077606 /10,  -12.441383940452894 /10,  39.90000000000002 /10),   //1750
new THREE.Vector3(52.476669289992344 /10,  -12.514852084169858 /10,  39.90000000000002 /10),   //1751
new THREE.Vector3(54.133518257261734 /10,  -12.778390516002588 /10,  43.10000000000003 /10),   //1752
new THREE.Vector3(54.133518257261734 /10,  -12.778390516002588 /10,  39.90000000000002 /10),   //1753
new THREE.Vector3(38.00970964889252 /10,  -9.46864793394712 /10,  39.90000000000002 /10),   //1754
new THREE.Vector3(35.476932154136755 /10,  -21.807377777905895 /10,  39.90000000000002 /10),   //1755
new THREE.Vector3(33.1612162649377 /10,  -21.33202957249222 /10,  39.90000000000002 /10),   //1756
new THREE.Vector3(32.19241634211309 /10,  -21.133163508279456 /10,  39.90000000000002 /10),   //1757
new THREE.Vector3(32.00863112218778 /10,  -22.028495286403224 /10,  39.90000000000002 /10),   //1758
new THREE.Vector3(28.425344859328554 /10,  -21.292952250887396 /10,  39.90000000000002 /10),   //1759
new THREE.Vector3(29.206733660901467 /10,  -17.48632283094548 /10,  39.90000000000002 /10),   //1760
new THREE.Vector3(28.01263143159997 /10,  -17.24120884506029 /10,  39.90000000000002 /10),   //1761
new THREE.Vector3(28.977403297257293 /10,  -12.541206797487341 /10,  39.90000000000002 /10),   //1762
new THREE.Vector3(30.769046428002493 /10,  -12.908978315104623 /10,  39.90000000000002 /10),   //1763
new THREE.Vector3(31.71431373111678 /10,  -8.303995087164065 /10,  39.90000000000002 /10),   //1764
new THREE.Vector3(31.724367627174676 /10,  -8.255016324681398 /10,  39.90000000000002 /10),   //1765
new THREE.Vector3(36.352860681623284 /10,  -9.205109502114729 /10,  39.90000000000002 /10),   //1766
new THREE.Vector3(36.367941525708524 /10,  -9.131641358397621 /10,  39.90000000000002 /10),   //1767
new THREE.Vector3(29.206733660901467 /10,  -17.48632283094548 /10,  43.10000000000003 /10),   //1768
new THREE.Vector3(28.01263143159997 /10,  -17.24120884506029 /10,  43.10000000000003 /10),   //1769
new THREE.Vector3(28.425344859328554 /10,  -21.292952250887396 /10,  43.10000000000003 /10),   //1770
new THREE.Vector3(32.00863112218778 /10,  -22.028495286403224 /10,  43.10000000000003 /10),   //1771
new THREE.Vector3(32.19241634211309 /10,  -21.133163508279456 /10,  43.10000000000003 /10),   //1772
new THREE.Vector3(33.1612162649377 /10,  -21.33202957249222 /10,  43.10000000000003 /10),   //1773
new THREE.Vector3(35.476932154136755 /10,  -21.807377777905895 /10,  43.10000000000003 /10),   //1774
new THREE.Vector3(38.00970964889252 /10,  -9.46864793394712 /10,  43.10000000000003 /10),   //1775
new THREE.Vector3(36.367941525708524 /10,  -9.131641358397621 /10,  43.10000000000003 /10),   //1776
new THREE.Vector3(36.352860681623284 /10,  -9.205109502114729 /10,  43.10000000000003 /10),   //1777
new THREE.Vector3(31.724367627174676 /10,  -8.255016324681398 /10,  43.10000000000003 /10),   //1778
new THREE.Vector3(31.714313731116626 /10,  -8.303995087163985 /10,  43.10000000000003 /10),   //1779
new THREE.Vector3(30.769046428002493 /10,  -12.908978315104623 /10,  43.10000000000003 /10),   //1780
new THREE.Vector3(28.977403297257293 /10,  -12.541206797487341 /10,  43.10000000000003 /10),   //1781
new THREE.Vector3(28.977403297257137 /10,  -12.541206797487263 /10,  43.10000000000003 /10),   //1782
new THREE.Vector3(30.769046428002422 /10,  -12.908978315104696 /10,  43.10000000000003 /10),   //1783
new THREE.Vector3(30.769046428002422 /10,  -12.908978315104696 /10,  39.90000000000002 /10),   //1784
new THREE.Vector3(28.977403297257137 /10,  -12.541206797487263 /10,  39.90000000000002 /10),   //1785
new THREE.Vector3(28.012631431599704 /10,  -17.2412088450603 /10,  43.10000000000003 /10),   //1786
new THREE.Vector3(28.012631431599704 /10,  -17.2412088450603 /10,  39.90000000000002 /10),   //1787
new THREE.Vector3(31.724367627174473 /10,  -8.255016324681272 /10,  39.90000000000002 /10),   //1788
new THREE.Vector3(31.71431373111669 /10,  -8.303995087164056 /10,  39.90000000000002 /10),   //1789
new THREE.Vector3(31.71431373111657 /10,  -8.30399508716399 /10,  43.10000000000003 /10),   //1790
new THREE.Vector3(31.724367627174473 /10,  -8.255016324681272 /10,  43.10000000000003 /10),   //1791
new THREE.Vector3(36.3679415257085 /10,  -9.131641358397607 /10,  43.10000000000003 /10),   //1792
new THREE.Vector3(38.00970964889234 /10,  -9.468647933947103 /10,  43.10000000000003 /10),   //1793
new THREE.Vector3(38.00970964889234 /10,  -9.468647933947103 /10,  39.90000000000002 /10),   //1794
new THREE.Vector3(36.3679415257085 /10,  -9.131641358397607 /10,  39.90000000000002 /10),   //1795
new THREE.Vector3(36.3528606816231 /10,  -9.205109502114595 /10,  43.10000000000003 /10),   //1796
new THREE.Vector3(36.3528606816231 /10,  -9.205109502114595 /10,  39.90000000000002 /10),   //1797
new THREE.Vector3(43.30956877488108 /10,  -15.483177861924661 /10,  39.90000000000002 /10),   //1798
new THREE.Vector3(42.942337810667205 /10,  -20.305837441230285 /10,  39.90000000000002 /10),   //1799
new THREE.Vector3(42.160949009094224 /10,  -24.112466861172216 /10,  39.90000000000002 /10),   //1800
new THREE.Vector3(38.57766274600657 /10,  -23.37692382560933 /10,  39.90000000000002 /10),   //1801
new THREE.Vector3(38.761447965932255 /10,  -22.481592047485634 /10,  39.90000000000002 /10),   //1802
new THREE.Vector3(36.44573207673334 /10,  -22.00624384207174 /10,  39.90000000000002 /10),   //1803
new THREE.Vector3(39.651477763690465 /10,  -9.805654550350857 /10,  39.90000000000002 /10),   //1804
new THREE.Vector3(39.63639691960459 /10,  -9.879122694068057 /10,  39.90000000000002 /10),   //1805
new THREE.Vector3(44.264889974053204 /10,  -10.829215871501722 /10,  39.90000000000002 /10),   //1806
new THREE.Vector3(44.254836077995726 /10,  -10.87819463398421 /10,  39.90000000000002 /10),   //1807
new THREE.Vector3(42.942337810667205 /10,  -20.305837441230285 /10,  43.10000000000003 /10),   //1808
new THREE.Vector3(43.30956877488108 /10,  -15.483177861924664 /10,  43.10000000000003 /10),   //1809
new THREE.Vector3(44.254836077995655 /10,  -10.878194633984302 /10,  43.10000000000003 /10),   //1810
new THREE.Vector3(44.264889974053204 /10,  -10.829215871501722 /10,  43.10000000000003 /10),   //1811
new THREE.Vector3(39.63639691960459 /10,  -9.879122694068057 /10,  43.10000000000003 /10),   //1812
new THREE.Vector3(39.651477763690465 /10,  -9.805654550350857 /10,  43.10000000000003 /10),   //1813
new THREE.Vector3(36.44573207673334 /10,  -22.00624384207174 /10,  43.10000000000003 /10),   //1814
new THREE.Vector3(38.761447965932255 /10,  -22.481592047485634 /10,  43.10000000000003 /10),   //1815
new THREE.Vector3(38.57766274600657 /10,  -23.37692382560933 /10,  43.10000000000003 /10),   //1816
new THREE.Vector3(42.160949009094224 /10,  -24.112466861172216 /10,  43.10000000000003 /10),   //1817
new THREE.Vector3(35.47693215413696 /10,  -21.807377777906 /10,  43.10000000000003 /10),   //1818
new THREE.Vector3(38.009709648892525 /10,  -9.468647933947432 /10,  43.10000000000003 /10),   //1819
new THREE.Vector3(38.009709648892525 /10,  -9.468647933947432 /10,  39.90000000000002 /10),   //1820
new THREE.Vector3(35.47693215413696 /10,  -21.807377777906 /10,  39.90000000000002 /10),   //1821
new THREE.Vector3(39.65147776369034 /10,  -9.805654550351065 /10,  43.10000000000003 /10),   //1822
new THREE.Vector3(39.65147776369034 /10,  -9.805654550351065 /10,  39.90000000000002 /10),   //1823
new THREE.Vector3(44.26488997405319 /10,  -10.829215871501642 /10,  43.10000000000003 /10),   //1824
new THREE.Vector3(44.254836077995684 /10,  -10.878194633984327 /10,  43.10000000000003 /10),   //1825
new THREE.Vector3(44.254836077995755 /10,  -10.878194633984275 /10,  39.90000000000002 /10),   //1826
new THREE.Vector3(44.26488997405319 /10,  -10.829215871501642 /10,  39.90000000000002 /10),   //1827
new THREE.Vector3(39.63639691960465 /10,  -9.879122694067975 /10,  43.10000000000003 /10),   //1828
new THREE.Vector3(39.63639691960465 /10,  -9.879122694067975 /10,  39.90000000000002 /10),   //1829
new THREE.Vector3(39.651477763690494 /10,  -9.805654550350868 /10,  43.10000000000003 /10),   //1830
new THREE.Vector3(39.651477763690494 /10,  -9.805654550350868 /10,  39.90000000000002 /10),   //1831
new THREE.Vector3(26.447745182143443 /10,  -2.9578099557112085 /10,  39.90000000000002 /10),   //1832
new THREE.Vector3(27.378341669445746 /10,  -3.148833980837288 /10,  39.90000000000002 /10),   //1833
new THREE.Vector3(27.152129012349423 /10,  -4.250856116209603 /10,  39.90000000000002 /10),   //1834
new THREE.Vector3(26.221532525047284 /10,  -4.059832091083396 /10,  39.90000000000002 /10),   //1835
new THREE.Vector3(29.35593572250752 /10,  -1.8448509540457274 /10,  39.90000000000002 /10),   //1836
new THREE.Vector3(29.019130212798178 /10,  -3.485639498813014 /10,  39.90000000000002 /10),   //1837
new THREE.Vector3(26.15387260767443 /10,  -2.89748657945163 /10,  39.90000000000002 /10),   //1838
new THREE.Vector3(26.787268059283083 /10,  0.1881754567806302 /10,  39.90000000000002 /10),   //1839
new THREE.Vector3(29.652525664406866 /10,  -0.3999774625806962 /10,  39.90000000000002 /10),   //1840
new THREE.Vector3(28.80799838738341 /10,  -4.51419350920989 /10,  39.90000000000002 /10),   //1841
new THREE.Vector3(28.792917547491527 /10,  -4.5876616325000175 /10,  39.90000000000002 /10),   //1842
new THREE.Vector3(22.45016780806849 /10,  -3.285682093435442 /10,  39.90000000000002 /10),   //1843
new THREE.Vector3(22.661299625272168 /10,  -2.2571280813530823 /10,  39.90000000000002 /10),   //1844
new THREE.Vector3(26.138791767782084 /10,  -2.970954702741844 /10,  39.90000000000002 /10),   //1845
new THREE.Vector3(31.040438493676056 /10,  0.6422307598430963 /10,  39.90000000000002 /10),   //1846
new THREE.Vector3(29.91392695490352 /10,  0.8734703695167675 /10,  39.90000000000002 /10),   //1847
new THREE.Vector3(27.39050182668613 /10,  3.126901226052105 /10,  39.90000000000002 /10),   //1848
new THREE.Vector3(27.317033682783716 /10,  3.1419820701755437 /10,  39.90000000000002 /10),   //1849
new THREE.Vector3(27.54324634826852 /10,  4.244004246416453 /10,  39.90000000000002 /10),   //1850
new THREE.Vector3(28.2044596358639 /10,  4.1082766508510185 /10,  39.90000000000002 /10),   //1851
new THREE.Vector3(28.19440573980599 /10,  4.059297888367837 /10,  39.90000000000002 /10),   //1852
new THREE.Vector3(30.329879783868805 /10,  3.620948020282728 /10,  39.90000000000002 /10),   //1853
new THREE.Vector3(31.34765846214869 /10,  3.412028061454697 /10,  39.90000000000002 /10),   //1854
new THREE.Vector3(31.357712358206392 /10,  3.4610068239376477 /10,  39.90000000000002 /10),   //1855
new THREE.Vector3(31.60848362808491 /10,  3.4095308748965016 /10,  39.90000000000002 /10),   //1856
new THREE.Vector3(31.387297910630267 /10,  2.3319980799042805 /10,  39.90000000000002 /10),   //1857
new THREE.Vector3(35.97810200090084 /10,  -6.0625682048852205 /10,  39.90000000000002 /10),   //1858
new THREE.Vector3(31.413281343779634 /10,  -5.125545093579123 /10,  39.90000000000002 /10),   //1859
new THREE.Vector3(31.428362187861758 /10,  -5.052076949876141 /10,  39.90000000000002 /10),   //1860
new THREE.Vector3(31.976299522985833 /10,  -2.3827343947122737 /10,  39.90000000000002 /10),   //1861
new THREE.Vector3(32.53429075538221 /10,  0.33558692884988073 /10,  39.90000000000002 /10),   //1862
new THREE.Vector3(32.90563954755492 /10,  2.0203273021189005 /10,  39.90000000000002 /10),   //1863
new THREE.Vector3(33.126825265009394 /10,  3.097860097111162 /10,  39.90000000000002 /10),   //1864
new THREE.Vector3(33.24927217120968 /10,  3.0727253569673363 /10,  39.90000000000002 /10),   //1865
new THREE.Vector3(33.597021378868874 /10,  3.0013426961818532 /10,  39.90000000000002 /10),   //1866
new THREE.Vector3(33.58696748281111 /10,  2.952363933699261 /10,  39.90000000000002 /10),   //1867
new THREE.Vector3(37.60812388832779 /10,  2.1269390661816012 /10,  39.90000000000002 /10),   //1868
new THREE.Vector3(37.59304304004973 /10,  2.0534709020375015 /10,  39.90000000000002 /10),   //1869
new THREE.Vector3(37.64202180257533 /10,  2.0434170059706576 /10,  39.90000000000002 /10),   //1870
new THREE.Vector3(37.094084463258525 /10,  -0.625925569620069 /10,  39.90000000000002 /10),   //1871
new THREE.Vector3(36.541120180107015 /10,  -3.3197575060183717 /10,  39.90000000000002 /10),   //1872
new THREE.Vector3(35.993182844983174 /10,  -5.989100061182551 /10,  39.90000000000002 /10),   //1873
new THREE.Vector3(40.28687498329046 /10,  1.500506617481543 /10,  39.90000000000002 /10),   //1874
new THREE.Vector3(39.73893764397343 /10,  -1.1688359581092762 /10,  39.90000000000002 /10),   //1875
new THREE.Vector3(39.185973360821976 /10,  -3.862667894507625 /10,  39.90000000000002 /10),   //1876
new THREE.Vector3(30.58625413332854 /10,  4.869906463516505 /10,  39.90000000000002 /10),   //1877
new THREE.Vector3(33.373145718411415 /10,  4.297839777861798 /10,  39.90000000000002 /10),   //1878
new THREE.Vector3(24.12916845383159 /10,  4.893771261151815 /10,  39.90000000000002 /10),   //1879
new THREE.Vector3(26.751981184624906 /10,  4.355385127285488 /10,  39.90000000000002 /10),   //1880
new THREE.Vector3(26.906264286637313 /10,  4.323715354663828 /10,  39.90000000000002 /10),   //1881
new THREE.Vector3(26.916318182695456 /10,  4.372694117146489 /10,  39.90000000000002 /10),   //1882
new THREE.Vector3(26.916318182695456 /10,  4.372694117146489 /10,  43.10000000000003 /10),   //1883
new THREE.Vector3(27.54324634826852 /10,  4.244004246416453 /10,  43.10000000000003 /10),   //1884
new THREE.Vector3(26.138791767782084 /10,  -2.970954702741844 /10,  43.10000000000003 /10),   //1885
new THREE.Vector3(22.661299625272168 /10,  -2.2571280813530823 /10,  43.10000000000003 /10),   //1886
new THREE.Vector3(26.15387260767249 /10,  -2.8974865794511793 /10,  43.10000000000003 /10),   //1887
new THREE.Vector3(26.787268059223873 /10,  0.18817545679281028 /10,  43.10000000000003 /10),   //1888
new THREE.Vector3(27.39050182668613 /10,  3.126901226052105 /10,  43.10000000000003 /10),   //1889
new THREE.Vector3(27.317033682783716 /10,  3.1419820701755437 /10,  43.10000000000003 /10),   //1890
new THREE.Vector3(26.906264286637313 /10,  4.323715354663828 /10,  43.10000000000003 /10),   //1891
new THREE.Vector3(24.12916845383159 /10,  4.893771261151815 /10,  43.10000000000003 /10),   //1892
new THREE.Vector3(26.447745182143443 /10,  -2.9578099557112085 /10,  43.10000000000003 /10),   //1893
new THREE.Vector3(26.221532525047284 /10,  -4.059832091083396 /10,  43.10000000000003 /10),   //1894
new THREE.Vector3(22.45016780806849 /10,  -3.285682093435442 /10,  43.10000000000003 /10),   //1895
new THREE.Vector3(28.2044596358639 /10,  4.1082766508510185 /10,  43.10000000000003 /10),   //1896
new THREE.Vector3(28.19440573980599 /10,  4.059297888367837 /10,  43.10000000000003 /10),   //1897
new THREE.Vector3(31.357712358206392 /10,  3.4610068239376477 /10,  43.10000000000003 /10),   //1898
new THREE.Vector3(31.60848362808491 /10,  3.4095308748965016 /10,  43.10000000000003 /10),   //1899
new THREE.Vector3(31.34765846214869 /10,  3.412028061454697 /10,  43.10000000000003 /10),   //1900
new THREE.Vector3(30.329879783868805 /10,  3.620948020282728 /10,  43.10000000000003 /10),   //1901
new THREE.Vector3(27.378341669445746 /10,  -3.148833980837288 /10,  43.10000000000003 /10),   //1902
new THREE.Vector3(27.152129012349423 /10,  -4.250856116209603 /10,  43.10000000000003 /10),   //1903
new THREE.Vector3(29.91392695490352 /10,  0.8734703695167675 /10,  43.10000000000003 /10),   //1904
new THREE.Vector3(29.652525664406866 /10,  -0.3999774625806962 /10,  43.10000000000003 /10),   //1905
new THREE.Vector3(30.58625413332854 /10,  4.869906463516505 /10,  43.10000000000003 /10),   //1906
new THREE.Vector3(33.373145718411415 /10,  4.297839777861798 /10,  43.10000000000003 /10),   //1907
new THREE.Vector3(29.019130212798178 /10,  -3.485639498813014 /10,  43.10000000000003 /10),   //1908
new THREE.Vector3(29.355935726613005 /10,  -1.8448509548885965 /10,  43.10000000000003 /10),   //1909
new THREE.Vector3(31.387297910630267 /10,  2.3319980799042805 /10,  43.10000000000003 /10),   //1910
new THREE.Vector3(31.040438493676056 /10,  0.6422307598430963 /10,  43.10000000000003 /10),   //1911
new THREE.Vector3(28.792917547491527 /10,  -4.5876616325000175 /10,  43.10000000000003 /10),   //1912
new THREE.Vector3(28.807998387656987 /10,  -4.514193509265869 /10,  43.10000000000003 /10),   //1913
new THREE.Vector3(32.53429075538221 /10,  0.33558692884988073 /10,  43.10000000000003 /10),   //1914
new THREE.Vector3(31.976299522985833 /10,  -2.3827343947122737 /10,  43.10000000000003 /10),   //1915
new THREE.Vector3(36.541120180107015 /10,  -3.3197575060183717 /10,  43.10000000000003 /10),   //1916
new THREE.Vector3(35.993182844983174 /10,  -5.989100061182551 /10,  43.10000000000003 /10),   //1917
new THREE.Vector3(33.24927217120968 /10,  3.0727253569673363 /10,  43.10000000000003 /10),   //1918
new THREE.Vector3(33.597021378868874 /10,  3.0013426961818532 /10,  43.10000000000003 /10),   //1919
new THREE.Vector3(37.59304304004973 /10,  2.0534709020375015 /10,  43.10000000000003 /10),   //1920
new THREE.Vector3(37.64202180257533 /10,  2.0434170059706576 /10,  43.10000000000003 /10),   //1921
new THREE.Vector3(33.58696748281111 /10,  2.952363933699261 /10,  43.10000000000003 /10),   //1922
new THREE.Vector3(37.60812388832779 /10,  2.1269390661816012 /10,  43.10000000000003 /10),   //1923
new THREE.Vector3(33.126825265009394 /10,  3.097860097111162 /10,  43.10000000000003 /10),   //1924
new THREE.Vector3(32.90563954755492 /10,  2.0203273021189005 /10,  43.10000000000003 /10),   //1925
new THREE.Vector3(31.413281343779634 /10,  -5.125545093579123 /10,  43.10000000000003 /10),   //1926
new THREE.Vector3(35.97810200090084 /10,  -6.0625682048852205 /10,  43.10000000000003 /10),   //1927
new THREE.Vector3(37.094084463258525 /10,  -0.625925569620069 /10,  43.10000000000003 /10),   //1928
new THREE.Vector3(31.428362187861758 /10,  -5.052076949876141 /10,  43.10000000000003 /10),   //1929
new THREE.Vector3(39.73893764397343 /10,  -1.1688359581092762 /10,  43.10000000000003 /10),   //1930
new THREE.Vector3(39.185973360821976 /10,  -3.862667894507625 /10,  43.10000000000003 /10),   //1931
new THREE.Vector3(40.28687498329046 /10,  1.500506617481543 /10,  43.10000000000003 /10),   //1932
new THREE.Vector3(22.435086963983075 /10,  -3.3591502371525674 /10,  39.90000000000002 /10),   //1933
new THREE.Vector3(20.817808226369255 /10,  -3.027170589232741 /10,  39.90000000000002 /10),   //1934
new THREE.Vector3(20.83288907045445 /10,  -2.9537024455154137 /10,  39.90000000000002 /10),   //1935
new THREE.Vector3(16.204396016005987 /10,  -2.0036092680821067 /10,  39.90000000000002 /10),   //1936
new THREE.Vector3(16.214449912063955 /10,  -1.9546305055992603 /10,  39.90000000000002 /10),   //1937
new THREE.Vector3(17.159717223564666 /10,  2.6503527631951136 /10,  39.90000000000002 /10),   //1938
new THREE.Vector3(16.873681251464205 /10,  2.709067516009187 /10,  39.90000000000002 /10),   //1939
new THREE.Vector3(15.368074092819176 /10,  3.0181242808126094 /10,  39.90000000000002 /10),   //1940
new THREE.Vector3(15.600715630982418 /10,  4.151465482645335 /10,  39.90000000000002 /10),   //1941
new THREE.Vector3(16.332845958476454 /10,  7.718126328385729 /10,  39.90000000000002 /10),   //1942
new THREE.Vector3(17.526948187550275 /10,  7.4730123425473 /10,  39.90000000000002 /10),   //1943
new THREE.Vector3(18.30833698912321 /10,  11.27964176248929 /10,  39.90000000000002 /10),   //1944
new THREE.Vector3(21.89162325221057 /10,  10.544098726926505 /10,  39.90000000000002 /10),   //1945
new THREE.Vector3(21.707838032282776 /10,  9.648766948787983 /10,  39.90000000000002 /10),   //1946
new THREE.Vector3(24.023553273519887 /10,  9.173418876381911 /10,  39.90000000000002 /10),   //1947
new THREE.Vector3(24.96786446292887 /10,  8.979579627218829 /10,  39.90000000000002 /10),   //1948
new THREE.Vector3(16.214449912063838 /10,  -1.9546305055992257 /10,  43.10000000000003 /10),   //1949
new THREE.Vector3(17.159717223564666 /10,  2.6503527631951136 /10,  43.10000000000003 /10),   //1950
new THREE.Vector3(15.368074092819176 /10,  3.0181242808126094 /10,  43.10000000000003 /10),   //1951
new THREE.Vector3(17.526948187550275 /10,  7.4730123425473 /10,  43.10000000000003 /10),   //1952
new THREE.Vector3(16.332845958476454 /10,  7.718126328385729 /10,  43.10000000000003 /10),   //1953
new THREE.Vector3(16.204396016005987 /10,  -2.0036092680821067 /10,  43.10000000000003 /10),   //1954
new THREE.Vector3(20.83288907045445 /10,  -2.9537024455154137 /10,  43.10000000000003 /10),   //1955
new THREE.Vector3(20.817808226369255 /10,  -3.027170589232741 /10,  43.10000000000003 /10),   //1956
new THREE.Vector3(22.435086963983075 /10,  -3.3591502371525674 /10,  43.10000000000003 /10),   //1957
new THREE.Vector3(24.96786446292887 /10,  8.979579627218829 /10,  43.10000000000003 /10),   //1958
new THREE.Vector3(24.023553273519887 /10,  9.173418876381911 /10,  43.10000000000003 /10),   //1959
new THREE.Vector3(21.707838032282776 /10,  9.648766948787983 /10,  43.10000000000003 /10),   //1960
new THREE.Vector3(21.89162325221057 /10,  10.544098726926505 /10,  43.10000000000003 /10),   //1961
new THREE.Vector3(18.30833698912321 /10,  11.27964176248929 /10,  43.10000000000003 /10),   //1962
new THREE.Vector3(16.332845958476675 /10,  7.718126328385715 /10,  43.10000000000003 /10),   //1963
new THREE.Vector3(17.526948187550403 /10,  7.4730123425473 /10,  43.10000000000003 /10),   //1964
new THREE.Vector3(17.526948187550403 /10,  7.4730123425473 /10,  39.90000000000002 /10),   //1965
new THREE.Vector3(16.332845958476675 /10,  7.718126328385715 /10,  39.90000000000002 /10),   //1966
new THREE.Vector3(15.368074092819338 /10,  3.0181242808126085 /10,  43.10000000000003 /10),   //1967
new THREE.Vector3(15.368074092819338 /10,  3.0181242808126085 /10,  39.90000000000002 /10),   //1968
new THREE.Vector3(15.600715630982556 /10,  4.151465482645307 /10,  39.90000000000002 /10),   //1969
new THREE.Vector3(22.435086963983043 /10,  -3.3591502371525452 /10,  39.90000000000002 /10),   //1970
new THREE.Vector3(22.450167808068503 /10,  -3.285682093435419 /10,  39.90000000000002 /10),   //1971
new THREE.Vector3(22.450167808068503 /10,  -3.285682093435419 /10,  43.10000000000003 /10),   //1972
new THREE.Vector3(22.435086963983043 /10,  -3.3591502371525452 /10,  43.10000000000003 /10),   //1973
new THREE.Vector3(16.204396016006037 /10,  -2.00360926808213 /10,  43.10000000000003 /10),   //1974
new THREE.Vector3(16.214449912063817 /10,  -1.954630505599243 /10,  43.10000000000003 /10),   //1975
new THREE.Vector3(16.214449912063873 /10,  -1.9546305055992776 /10,  39.90000000000002 /10),   //1976
new THREE.Vector3(16.204396016006037 /10,  -2.00360926808213 /10,  39.90000000000002 /10),   //1977
new THREE.Vector3(20.817808226369277 /10,  -3.027170589232747 /10,  43.10000000000003 /10),   //1978
new THREE.Vector3(20.817808226369277 /10,  -3.027170589232747 /10,  39.90000000000002 /10),   //1979
new THREE.Vector3(20.832889070454453 /10,  -2.9537024455154435 /10,  43.10000000000003 /10),   //1980
new THREE.Vector3(20.832889070454453 /10,  -2.9537024455154435 /10,  39.90000000000002 /10),   //1981
new THREE.Vector3(24.129168453831554 /10,  4.8937712611518105 /10,  43.10000000000003 /10),   //1982
new THREE.Vector3(22.661299625272235 /10,  -2.2571280813531285 /10,  43.10000000000003 /10),   //1983
new THREE.Vector3(22.661299625272235 /10,  -2.2571280813531285 /10,  39.90000000000002 /10),   //1984
new THREE.Vector3(24.129168453831554 /10,  4.8937712611518105 /10,  39.90000000000002 /10),   //1985
new THREE.Vector3(22.450167808068514 /10,  -3.285682093435443 /10,  43.10000000000003 /10),   //1986
new THREE.Vector3(22.450167808068514 /10,  -3.285682093435443 /10,  39.90000000000002 /10),   //1987
new THREE.Vector3(26.76955043293005 /10,  -16.986040961703946 /10,  39.90000000000002 /10),   //1988
new THREE.Vector3(26.53268064182003 /10,  -18.139980605731907 /10,  39.90000000000002 /10),   //1989
new THREE.Vector3(22.998373146275778 /10,  -17.414491467265627 /10,  39.90000000000002 /10),   //1990
new THREE.Vector3(23.151594522189075 /10,  -16.66805512706849 /10,  39.90000000000002 /10),   //1991
new THREE.Vector3(20.835878634815117 /10,  -16.192706922029345 /10,  39.90000000000002 /10),   //1992
new THREE.Vector3(19.867078712218344 /10,  -15.993840857863397 /10,  39.90000000000002 /10),   //1993
new THREE.Vector3(21.885901040523056 /10,  -6.15890535189207 /10,  39.90000000000002 /10),   //1994
new THREE.Vector3(23.527669152812223 /10,  -6.495911967780778 /10,  39.90000000000002 /10),   //1995
new THREE.Vector3(23.512588308727118 /10,  -6.56938011149803 /10,  39.90000000000002 /10),   //1996
new THREE.Vector3(28.14108136317519 /10,  -7.519473288931482 /10,  39.90000000000002 /10),   //1997
new THREE.Vector3(28.13102746711744 /10,  -7.568452051414444 /10,  39.90000000000002 /10),   //1998
new THREE.Vector3(27.553531681778576 /10,  -10.381792147839713 /10,  39.90000000000002 /10),   //1999
new THREE.Vector3(26.822768510412107 /10,  -10.231788011446417 /10,  39.90000000000002 /10),   //2000
new THREE.Vector3(26.577655122776296 /10,  -11.425890363506557 /10,  39.90000000000002 /10),   //2001
new THREE.Vector3(29.10006082915621 /10,  -11.943665895231353 /10,  39.90000000000002 /10),   //2002
new THREE.Vector3(28.131027467117395 /10,  -7.568452051414444 /10,  43.10000000000003 /10),   //2003
new THREE.Vector3(27.553531681778576 /10,  -10.381792147839713 /10,  43.10000000000003 /10),   //2004
new THREE.Vector3(29.10006082915621 /10,  -11.943665895231353 /10,  43.10000000000003 /10),   //2005
new THREE.Vector3(26.53268064182003 /10,  -18.139980605731907 /10,  43.10000000000003 /10),   //2006
new THREE.Vector3(22.998373146275778 /10,  -17.414491467265627 /10,  43.10000000000003 /10),   //2007
new THREE.Vector3(26.76955043293005 /10,  -16.986040961703946 /10,  43.10000000000003 /10),   //2008
new THREE.Vector3(26.822768510412107 /10,  -10.231788011446417 /10,  43.10000000000003 /10),   //2009
new THREE.Vector3(26.577655122776296 /10,  -11.425890363506557 /10,  43.10000000000003 /10),   //2010
new THREE.Vector3(23.151594522189075 /10,  -16.66805512706849 /10,  43.10000000000003 /10),   //2011
new THREE.Vector3(20.835878634815117 /10,  -16.192706922029345 /10,  43.10000000000003 /10),   //2012
new THREE.Vector3(28.14108136317519 /10,  -7.519473288931482 /10,  43.10000000000003 /10),   //2013
new THREE.Vector3(23.512588308727118 /10,  -6.56938011149803 /10,  43.10000000000003 /10),   //2014
new THREE.Vector3(23.527669152812223 /10,  -6.495911967780778 /10,  43.10000000000003 /10),   //2015
new THREE.Vector3(21.885901040523056 /10,  -6.15890535189207 /10,  43.10000000000003 /10),   //2016
new THREE.Vector3(19.867078712218344 /10,  -15.993840857863397 /10,  43.10000000000003 /10),   //2017
new THREE.Vector3(19.867078712218344 /10,  -15.993840857863413 /10,  43.10000000000003 /10),   //2018
new THREE.Vector3(21.885901040522967 /10,  -6.158905351892265 /10,  43.10000000000003 /10),   //2019
new THREE.Vector3(21.885901040522967 /10,  -6.158905351892265 /10,  39.90000000000002 /10),   //2020
new THREE.Vector3(19.867078712218344 /10,  -15.993840857863413 /10,  39.90000000000002 /10),   //2021
new THREE.Vector3(23.527669152811875 /10,  -6.49591196778078 /10,  43.10000000000003 /10),   //2022
new THREE.Vector3(23.527669152811875 /10,  -6.49591196778078 /10,  39.90000000000002 /10),   //2023
new THREE.Vector3(28.141081363175097 /10,  -7.519473288931466 /10,  43.10000000000003 /10),   //2024
new THREE.Vector3(28.131027467117296 /10,  -7.568452051414321 /10,  43.10000000000003 /10),   //2025
new THREE.Vector3(28.13102746711734 /10,  -7.568452051414322 /10,  39.90000000000002 /10),   //2026
new THREE.Vector3(28.141081363175097 /10,  -7.519473288931466 /10,  39.90000000000002 /10),   //2027
new THREE.Vector3(23.51258830872713 /10,  -6.569380111497972 /10,  43.10000000000003 /10),   //2028
new THREE.Vector3(23.51258830872713 /10,  -6.569380111497972 /10,  39.90000000000002 /10),   //2029
new THREE.Vector3(23.527669152812287 /10,  -6.495911967780807 /10,  43.10000000000003 /10),   //2030
new THREE.Vector3(23.527669152812287 /10,  -6.495911967780807 /10,  39.90000000000002 /10),   //2031
new THREE.Vector3(17.55136282210743 /10,  -15.518492652262422 /10,  39.90000000000002 /10),   //2032
new THREE.Vector3(16.582562900195107 /10,  -15.319626588237046 /10,  39.90000000000002 /10),   //2033
new THREE.Vector3(16.490670290229843 /10,  -15.767292477313301 /10,  39.90000000000002 /10),   //2034
new THREE.Vector3(13.504924929498406 /10,  -15.154406973670133 /10,  39.90000000000002 /10),   //2035
new THREE.Vector3(13.909895862688073 /10,  -13.181542420966954 /10,  39.90000000000002 /10),   //2036
new THREE.Vector3(11.585363796622369 /10,  -12.704384514340811 /10,  39.90000000000002 /10),   //2037
new THREE.Vector3(10.73901077976966 /10,  -12.5306531902247 /10,  39.90000000000002 /10),   //2038
new THREE.Vector3(7.271314396151715 /10,  -11.81883734936045 /10,  39.90000000000002 /10),   //2039
new THREE.Vector3(7.57775714797609 /10,  -10.325964668980461 /10,  39.90000000000002 /10),   //2040
new THREE.Vector3(5.337468551903328 /10,  -9.866099463270496 /10,  39.90000000000002 /10),   //2041
new THREE.Vector3(6.101564640776325 /10,  -6.143713532517513 /10,  39.90000000000002 /10),   //2042
new THREE.Vector3(7.445541895148388 /10,  -6.419592421489361 /10,  39.90000000000002 /10),   //2043
new THREE.Vector3(8.065666203726076 /10,  -3.398582352876927 /10,  39.90000000000002 /10),   //2044
new THREE.Vector3(12.01727275640218 /10,  -4.209730707203741 /10,  39.90000000000002 /10),   //2045
new THREE.Vector3(12.007218860344421 /10,  -4.258709469686519 /10,  39.90000000000002 /10),   //2046
new THREE.Vector3(11.184609089129296 /10,  -8.266151795371186 /10,  39.90000000000002 /10),   //2047
new THREE.Vector3(14.767895352216655 /10,  -9.001694830933857 /10,  39.90000000000002 /10),   //2048
new THREE.Vector3(15.590505123432058 /10,  -4.994252505249477 /10,  39.90000000000002 /10),   //2049
new THREE.Vector3(15.600559019489864 /10,  -4.945273742766538 /10,  39.90000000000002 /10),   //2050
new THREE.Vector3(20.229052073938004 /10,  -5.895366920200053 /10,  39.90000000000002 /10),   //2051
new THREE.Vector3(20.244132918023197 /10,  -5.821898776482888 /10,  39.90000000000002 /10),   //2052
new THREE.Vector3(6.101564640776325 /10,  -6.143713532517513 /10,  43.10000000000003 /10),   //2053
new THREE.Vector3(7.445541895148388 /10,  -6.419592421489361 /10,  43.10000000000003 /10),   //2054
new THREE.Vector3(8.065666203726076 /10,  -3.398582352876927 /10,  43.10000000000003 /10),   //2055
new THREE.Vector3(5.337468551903328 /10,  -9.866099463270496 /10,  43.10000000000003 /10),   //2056
new THREE.Vector3(11.184609089129296 /10,  -8.266151795371186 /10,  43.10000000000003 /10),   //2057
new THREE.Vector3(14.767895352216655 /10,  -9.001694830933857 /10,  43.10000000000003 /10),   //2058
new THREE.Vector3(7.271314396151715 /10,  -11.81883734936045 /10,  43.10000000000003 /10),   //2059
new THREE.Vector3(7.57775714797609 /10,  -10.325964668980461 /10,  43.10000000000003 /10),   //2060
new THREE.Vector3(13.504924929498406 /10,  -15.154406973670133 /10,  43.10000000000003 /10),   //2061
new THREE.Vector3(13.909895862688073 /10,  -13.181542420966954 /10,  43.10000000000003 /10),   //2062
new THREE.Vector3(16.490670290229843 /10,  -15.767292477313301 /10,  43.10000000000003 /10),   //2063
new THREE.Vector3(11.585363796622369 /10,  -12.704384514340811 /10,  43.10000000000003 /10),   //2064
new THREE.Vector3(10.73901077976966 /10,  -12.5306531902247 /10,  43.10000000000003 /10),   //2065
new THREE.Vector3(17.55136282210743 /10,  -15.518492652262422 /10,  43.10000000000003 /10),   //2066
new THREE.Vector3(16.582562900195107 /10,  -15.319626588237046 /10,  43.10000000000003 /10),   //2067
new THREE.Vector3(20.244132918023197 /10,  -5.821898776482888 /10,  43.10000000000003 /10),   //2068
new THREE.Vector3(20.229052073938004 /10,  -5.895366920200053 /10,  43.10000000000003 /10),   //2069
new THREE.Vector3(15.600559019489864 /10,  -4.945273742766538 /10,  43.10000000000003 /10),   //2070
new THREE.Vector3(15.590505123432047 /10,  -4.994252505249431 /10,  43.10000000000003 /10),   //2071
new THREE.Vector3(12.007218860344201 /10,  -4.258709469686449 /10,  43.10000000000003 /10),   //2072
new THREE.Vector3(12.01727275640218 /10,  -4.209730707203741 /10,  43.10000000000003 /10),   //2073
new THREE.Vector3(8.065666203725868 /10,  -3.398582352876816 /10,  43.10000000000003 /10),   //2074
new THREE.Vector3(12.017272756402177 /10,  -4.209730707203723 /10,  43.10000000000003 /10),   //2075
new THREE.Vector3(12.017272756402177 /10,  -4.209730707203723 /10,  39.90000000000002 /10),   //2076
new THREE.Vector3(8.065666203725868 /10,  -3.398582352876816 /10,  39.90000000000002 /10),   //2077
new THREE.Vector3(12.007218860344222 /10,  -4.258709469686397 /10,  43.10000000000003 /10),   //2078
new THREE.Vector3(12.007218860344393 /10,  -4.2587094696865 /10,  39.90000000000002 /10),   //2079
new THREE.Vector3(15.600559019489907 /10,  -4.9452737427665845 /10,  39.90000000000002 /10),   //2080
new THREE.Vector3(15.59050512343201 /10,  -4.994252505249488 /10,  39.90000000000002 /10),   //2081
new THREE.Vector3(15.590505123432093 /10,  -4.9942525052494595 /10,  43.10000000000003 /10),   //2082
new THREE.Vector3(15.600559019489907 /10,  -4.9452737427665845 /10,  43.10000000000003 /10),   //2083
new THREE.Vector3(20.244132918023265 /10,  -5.821898776482899 /10,  43.10000000000003 /10),   //2084
new THREE.Vector3(21.88590104052309 /10,  -6.1589053518921215 /10,  43.10000000000003 /10),   //2085
new THREE.Vector3(21.88590104052309 /10,  -6.1589053518921215 /10,  39.90000000000002 /10),   //2086
new THREE.Vector3(20.244132918023265 /10,  -5.821898776482899 /10,  39.90000000000002 /10),   //2087
new THREE.Vector3(20.229052073938014 /10,  -5.895366920200025 /10,  43.10000000000003 /10),   //2088
new THREE.Vector3(20.229052073938014 /10,  -5.895366920200025 /10,  39.90000000000002 /10),   //2089
new THREE.Vector3(13.576430961845402 /10,  3.3858957984772085 /10,  39.90000000000002 /10),   //2090
new THREE.Vector3(12.631163650344842 /10,  -1.2190874703173735 /10,  39.90000000000002 /10),   //2091
new THREE.Vector3(12.621109754287186 /10,  -1.2680662328001158 /10,  39.90000000000002 /10),   //2092
new THREE.Vector3(7.992616700067172 /10,  -0.31797305541363463 /10,  39.90000000000002 /10),   //2093
new THREE.Vector3(7.9775358559817695 /10,  -0.3914411991305579 /10,  39.90000000000002 /10),   //2094
new THREE.Vector3(6.33576774118392 /10,  -0.05443458272710995 /10,  39.90000000000002 /10),   //2095
new THREE.Vector3(8.868545235936702 /10,  12.28429526121726 /10,  39.90000000000002 /10),   //2096
new THREE.Vector3(11.184260476946326 /10,  11.808947188857546 /10,  39.90000000000002 /10),   //2097
new THREE.Vector3(12.153061047732104 /10,  11.610080991637505 /10,  39.90000000000002 /10),   //2098
new THREE.Vector3(12.336846267660404 /10,  12.505412769775516 /10,  39.90000000000002 /10),   //2099
new THREE.Vector3(15.92013253074788 /10,  11.769869734212824 /10,  39.90000000000002 /10),   //2100
new THREE.Vector3(15.138743729175074 /10,  7.9632403142709265 /10,  39.90000000000002 /10),   //2101
new THREE.Vector3(15.92013253074788 /10,  11.769869734212824 /10,  43.10000000000003 /10),   //2102
new THREE.Vector3(12.336846267660404 /10,  12.505412769775516 /10,  43.10000000000003 /10),   //2103
new THREE.Vector3(12.153061047732104 /10,  11.610080991637505 /10,  43.10000000000003 /10),   //2104
new THREE.Vector3(11.184260476946326 /10,  11.808947188857546 /10,  43.10000000000003 /10),   //2105
new THREE.Vector3(8.868545235936702 /10,  12.28429526121726 /10,  43.10000000000003 /10),   //2106
new THREE.Vector3(6.33576774118392 /10,  -0.05443458272710995 /10,  43.10000000000003 /10),   //2107
new THREE.Vector3(7.9775358559817695 /10,  -0.3914411991305579 /10,  43.10000000000003 /10),   //2108
new THREE.Vector3(7.992616700067172 /10,  -0.31797305541363463 /10,  43.10000000000003 /10),   //2109
new THREE.Vector3(12.621109754287186 /10,  -1.2680662328001158 /10,  43.10000000000003 /10),   //2110
new THREE.Vector3(12.631163650344853 /10,  -1.2190874703173158 /10,  43.10000000000003 /10),   //2111
new THREE.Vector3(13.576430961845402 /10,  3.3858957984772085 /10,  43.10000000000003 /10),   //2112
new THREE.Vector3(15.138743729175074 /10,  7.9632403142709265 /10,  43.10000000000003 /10),   //2113
new THREE.Vector3(8.868545235936702 /10,  12.284295261217204 /10,  43.10000000000003 /10),   //2114
new THREE.Vector3(6.33576774118392 /10,  -0.054434582727092534 /10,  43.10000000000003 /10),   //2115
new THREE.Vector3(6.33576774118392 /10,  -0.054434582727092534 /10,  39.90000000000002 /10),   //2116
new THREE.Vector3(8.868545235936702 /10,  12.284295261217204 /10,  39.90000000000002 /10),   //2117
new THREE.Vector3(11.18426047694615 /10,  11.808947188857518 /10,  43.10000000000003 /10),   //2118
new THREE.Vector3(11.18426047694615 /10,  11.808947188857518 /10,  39.90000000000002 /10),   //2119
new THREE.Vector3(12.621109754287128 /10,  -1.2680662328001042 /10,  39.90000000000002 /10),   //2120
new THREE.Vector3(12.63116365034484 /10,  -1.21908747031735 /10,  39.90000000000002 /10),   //2121
new THREE.Vector3(12.631163650344897 /10,  -1.219087470317304 /10,  43.10000000000003 /10),   //2122
new THREE.Vector3(12.621109754287128 /10,  -1.2680662328001042 /10,  43.10000000000003 /10),   //2123
new THREE.Vector3(7.977535855981813 /10,  -0.3914411991305462 /10,  43.10000000000003 /10),   //2124
new THREE.Vector3(6.33576774118393 /10,  -0.054434582727104 /10,  43.10000000000003 /10),   //2125
new THREE.Vector3(6.33576774118393 /10,  -0.054434582727104 /10,  39.90000000000002 /10),   //2126
new THREE.Vector3(7.977535855981813 /10,  -0.3914411991305462 /10,  39.90000000000002 /10),   //2127
new THREE.Vector3(7.992616700067217 /10,  -0.3179730554136287 /10,  43.10000000000003 /10),   //2128
new THREE.Vector3(7.992616700067217 /10,  -0.3179730554136287 /10,  39.90000000000002 /10),   //2129
new THREE.Vector3(2.184528380754119 /10,  14.589384344544513 /10,  39.90000000000002 /10),   //2130
new THREE.Vector3(5.7678146438421845 /10,  13.853841308980941 /10,  39.90000000000002 /10),   //2131
new THREE.Vector3(5.584029423913294 /10,  12.958509530843743 /10,  39.90000000000002 /10),   //2132
new THREE.Vector3(7.899745314024649 /10,  12.483161325242538 /10,  39.90000000000002 /10),   //2133
new THREE.Vector3(4.693999618684397 /10,  0.2825719926820205 /10,  39.90000000000002 /10),   //2134
new THREE.Vector3(5.23107874606548 /10,  2.899017484363985 /10,  39.90000000000002 /10),   //2135
new THREE.Vector3(1.688934643362686 /10,  3.6261152472589697 /10,  39.90000000000002 /10),   //2136
new THREE.Vector3(-2.912130299741361 /10,  4.570578263294001 /10,  39.90000000000002 /10),   //2137
new THREE.Vector3(-2.5552169897082737 /10,  6.309324331327232 /10,  39.90000000000002 /10),   //2138
new THREE.Vector3(-8.894048429997554 /10,  7.610499559090105 /10,  39.90000000000002 /10),   //2139
new THREE.Vector3(-7.370078865632693 /10,  15.034700375801526 /10,  39.90000000000002 /10),   //2140
new THREE.Vector3(-4.827101517539885 /10,  14.512702092479014 /10,  39.90000000000002 /10),   //2141
new THREE.Vector3(-3.858301595627704 /10,  14.313836028453204 /10,  39.90000000000002 /10),   //2142
new THREE.Vector3(-3.682358414625202 /10,  15.170964371852655 /10,  39.90000000000002 /10),   //2143
new THREE.Vector3(-0.3263336095200567 /10,  14.48207141401147 /10,  39.90000000000002 /10),   //2144
new THREE.Vector3(-0.9852659571161044 /10,  11.272003321072749 /10,  39.90000000000002 /10),   //2145
new THREE.Vector3(1.4029385012591442 /10,  10.78177534934934 /10,  39.90000000000002 /10),   //2146
new THREE.Vector3(-2.912130299741361 /10,  4.570578263294001 /10,  43.10000000000003 /10),   //2147
new THREE.Vector3(-2.5552169897082737 /10,  6.309324331327232 /10,  43.10000000000003 /10),   //2148
new THREE.Vector3(-8.894048429997554 /10,  7.610499559090105 /10,  43.10000000000003 /10),   //2149
new THREE.Vector3(-7.370078865632693 /10,  15.034700375801526 /10,  43.10000000000003 /10),   //2150
new THREE.Vector3(-4.827101517539885 /10,  14.512702092479014 /10,  43.10000000000003 /10),   //2151
new THREE.Vector3(5.584029423913294 /10,  12.958509530843743 /10,  43.10000000000003 /10),   //2152
new THREE.Vector3(7.899745314024649 /10,  12.483161325242538 /10,  43.10000000000003 /10),   //2153
new THREE.Vector3(5.7678146438421845 /10,  13.853841308980941 /10,  43.10000000000003 /10),   //2154
new THREE.Vector3(4.693999618684397 /10,  0.2825719926820205 /10,  43.10000000000003 /10),   //2155
new THREE.Vector3(2.184528380754119 /10,  14.589384344544513 /10,  43.10000000000003 /10),   //2156
new THREE.Vector3(1.4029385012591442 /10,  10.78177534934934 /10,  43.10000000000003 /10),   //2157
new THREE.Vector3(-0.9852659571161044 /10,  11.272003321072749 /10,  43.10000000000003 /10),   //2158
new THREE.Vector3(-0.3263336095200567 /10,  14.48207141401147 /10,  43.10000000000003 /10),   //2159
new THREE.Vector3(-3.682358414625202 /10,  15.170964371852655 /10,  43.10000000000003 /10),   //2160
new THREE.Vector3(-3.858301595627704 /10,  14.313836028453204 /10,  43.10000000000003 /10),   //2161
new THREE.Vector3(1.688934643362686 /10,  3.6261152472589697 /10,  43.10000000000003 /10),   //2162
new THREE.Vector3(5.23107874606548 /10,  2.899017484363985 /10,  43.10000000000003 /10),   //2163
new THREE.Vector3(5.2310787460655614 /10,  2.8990174843638763 /10,  43.10000000000003 /10),   //2164
new THREE.Vector3(1.6889346433627674 /10,  3.6261152472588725 /10,  43.10000000000003 /10),   //2165
new THREE.Vector3(1.6889346433627674 /10,  3.6261152472588725 /10,  39.90000000000002 /10),   //2166
new THREE.Vector3(5.2310787460655614 /10,  2.8990174843638763 /10,  39.90000000000002 /10),   //2167
new THREE.Vector3(6.335767741183943 /10,  -0.05443458272716783 /10,  43.10000000000003 /10),   //2168
new THREE.Vector3(4.693999618684374 /10,  0.28257199268193384 /10,  43.10000000000003 /10),   //2169
new THREE.Vector3(4.693999618684374 /10,  0.28257199268193384 /10,  39.90000000000002 /10),   //2170
new THREE.Vector3(6.335767741183943 /10,  -0.05443458272716783 /10,  39.90000000000002 /10),   //2171
new THREE.Vector3(1.5164272069995595 /10,  -1.3171625095539161 /10,  39.90000000000002 /10),   //2172
new THREE.Vector3(1.2751337016250306 /10,  -2.4926528090702207 /10,  39.90000000000002 /10),   //2173
new THREE.Vector3(0.36902659592791387 /10,  -2.306655732047672 /10,  39.90000000000002 /10),   //2174
new THREE.Vector3(0.6103201013022233 /10,  -1.1311654325311133 /10,  39.90000000000002 /10),   //2175
new THREE.Vector3(1.9789064256355824 /10,  0.9358605645276117 /10,  39.90000000000002 /10),   //2176
new THREE.Vector3(1.0727993199385464 /10,  1.1218576415501835 /10,  39.90000000000002 /10),   //2177
new THREE.Vector3(1.0727993199385464 /10,  1.1218576415501835 /10,  43.10000000000003 /10),   //2178
new THREE.Vector3(1.2589974707281613 /10,  2.028944302258686 /10,  43.10000000000003 /10),   //2179
new THREE.Vector3(-1.15369636902423 /10,  2.524199222039139 /10,  43.10000000000003 /10),   //2180
new THREE.Vector3(-2.3193450737155943 /10,  -3.1543984794673143 /10,  43.10000000000003 /10),   //2181
new THREE.Vector3(0.9994558717339249 /10,  -3.8356504762702057 /10,  43.10000000000003 /10),   //2182
new THREE.Vector3(1.2751337016250306 /10,  -2.4926528090702207 /10,  43.10000000000003 /10),   //2183
new THREE.Vector3(0.36902659592791387 /10,  -2.306655732047672 /10,  43.10000000000003 /10),   //2184
new THREE.Vector3(0.6103201013022233 /10,  -1.1311654325311133 /10,  43.10000000000003 /10),   //2185
new THREE.Vector3(1.5164272069995595 /10,  -1.3171625095539161 /10,  43.10000000000003 /10),   //2186
new THREE.Vector3(1.9789064256355824 /10,  0.9358605645276117 /10,  43.10000000000003 /10),   //2187
new THREE.Vector3(-1.15369636902423 /10,  2.524199222039139 /10,  39.90000000000002 /10),   //2188
new THREE.Vector3(1.2589974707281613 /10,  2.028944302258686 /10,  39.90000000000002 /10),   //2189
new THREE.Vector3(0.9994558717339249 /10,  -3.8356504762702057 /10,  39.90000000000002 /10),   //2190
new THREE.Vector3(-2.3193450737155943 /10,  -3.1543984794673143 /10,  39.90000000000002 /10),   //2191
new THREE.Vector3(93.05293095534832 /10,  -29.346627212659076 /10,  43.10000000000003 /10),   //2192
new THREE.Vector3(93.78761239254743 /10,  -29.497435653518668 /10,  43.10000000000003 /10),   //2193
new THREE.Vector3(93.78761239254743 /10,  -29.497435653518668 /10,  39.90000000000002 /10),   //2194
new THREE.Vector3(93.05293095534832 /10,  -29.346627212659076 /10,  39.90000000000002 /10),   //2195
new THREE.Vector3(86.21414876955322 /10,  -36.886499109106026 /10,  43.10000000000003 /10),   //2196
new THREE.Vector3(86.53607452130706 /10,  -35.31819913450229 /10,  43.10000000000003 /10),   //2197
new THREE.Vector3(86.53607452130706 /10,  -35.31819913450229 /10,  39.90000000000002 /10),   //2198
new THREE.Vector3(86.21414876955322 /10,  -36.886499109106026 /10,  39.90000000000002 /10),   //2199
new THREE.Vector3(92.55983723634658 /10,  -38.1890818822668 /10,  43.10000000000003 /10),   //2200
new THREE.Vector3(93.29035332387015 /10,  -34.630285000470664 /10,  43.10000000000003 /10),   //2201
new THREE.Vector3(92.8299529565858 /10,  -34.53577837753772 /10,  43.10000000000003 /10),   //2202
new THREE.Vector3(92.02180337571195 /10,  -34.36988909260168 /10,  43.10000000000003 /10),   //2203
new THREE.Vector3(92.3789177636668 /10,  -32.63016344931515 /10,  43.10000000000003 /10),   //2204
new THREE.Vector3(93.11359920086635 /10,  -32.780971890174484 /10,  43.10000000000003 /10),   //2205
new THREE.Vector3(93.89504528910615 /10,  -25.24416606734235 /10,  43.10000000000003 /10),   //2206
new THREE.Vector3(92.9987339356862 /10,  -25.060179769485966 /10,  43.10000000000003 /10),   //2207
new THREE.Vector3(93.83139760715247 /10,  -21.003758660891677 /10,  43.10000000000003 /10),   //2208
new THREE.Vector3(89.43212515759824 /10,  -20.100717734969944 /10,  43.10000000000003 /10),   //2209
new THREE.Vector3(88.00782274425558 /10,  -19.808350440139687 /10,  43.10000000000003 /10),   //2210
new THREE.Vector3(88.02290358834084 /10,  -19.73488229642255 /10,  43.10000000000003 /10),   //2211
new THREE.Vector3(84.2203586311958 /10,  -34.842850928901235 /10,  43.10000000000003 /10),   //2212
new THREE.Vector3(84.2203586311958 /10,  -34.842850928901235 /10,  39.90000000000002 /10),   //2213
new THREE.Vector3(93.89504528910615 /10,  -25.24416606734235 /10,  39.90000000000002 /10),   //2214
new THREE.Vector3(92.9987339356862 /10,  -25.060179769485966 /10,  39.90000000000002 /10),   //2215
new THREE.Vector3(92.55983723634658 /10,  -38.1890818822668 /10,  39.90000000000002 /10),   //2216
new THREE.Vector3(93.29035332387015 /10,  -34.630285000470664 /10,  39.90000000000002 /10),   //2217
new THREE.Vector3(92.8299529565858 /10,  -34.53577837753772 /10,  39.90000000000002 /10),   //2218
new THREE.Vector3(93.83139760715245 /10,  -21.00375866089174 /10,  39.90000000000002 /10),   //2219
new THREE.Vector3(93.11359920086635 /10,  -32.780971890174484 /10,  39.90000000000002 /10),   //2220
new THREE.Vector3(89.43212515708532 /10,  -20.100717737468127 /10,  39.90000000000002 /10),   //2221
new THREE.Vector3(92.3789177636668 /10,  -32.63016344931515 /10,  39.90000000000002 /10),   //2222
new THREE.Vector3(92.02180337571195 /10,  -34.36988909260168 /10,  39.90000000000002 /10),   //2223
new THREE.Vector3(88.02290358834084 /10,  -19.73488229642255 /10,  39.90000000000002 /10),   //2224
new THREE.Vector3(88.00782274425558 /10,  -19.808350440139687 /10,  39.90000000000002 /10),   //2225
new THREE.Vector3(83.25155870928374 /10,  -34.643984864875826 /10,  43.10000000000003 /10),   //2226
new THREE.Vector3(86.38113547399931 /10,  -19.397875680112865 /10,  43.10000000000003 /10),   //2227
new THREE.Vector3(86.38113547399931 /10,  -19.397875680112865 /10,  39.90000000000002 /10),   //2228
new THREE.Vector3(83.25155870928374 /10,  -34.643984864875826 /10,  39.90000000000002 /10),   //2229
new THREE.Vector3(88.02290358834084 /10,  -19.734882296422825 /10,  43.10000000000003 /10),   //2230
new THREE.Vector3(88.02290358834084 /10,  -19.734882296422825 /10,  39.90000000000002 /10),   //2231
new THREE.Vector3(88.02290358834101 /10,  -19.734882296422562 /10,  43.10000000000003 /10),   //2232
new THREE.Vector3(88.00782274425575 /10,  -19.808350440139723 /10,  43.10000000000003 /10),   //2233
new THREE.Vector3(88.00782274425575 /10,  -19.808350440139723 /10,  39.90000000000002 /10),   //2234
new THREE.Vector3(88.02290358834101 /10,  -19.734882296422562 /10,  39.90000000000002 /10),   //2235
new THREE.Vector3(89.43212515759842 /10,  -20.100717734969926 /10,  43.10000000000003 /10),   //2236
new THREE.Vector3(89.43212515708548 /10,  -20.100717737468056 /10,  39.90000000000002 /10),   //2237
new THREE.Vector3(-6.903756181185228 /10,  -7.171625483155599 /10,  43.10000000000003 /10),   //2238
new THREE.Vector3(-9.194982689919625 /10,  -6.7013042256111435 /10,  43.10000000000003 /10),   //2239
new THREE.Vector3(-9.194982689919625 /10,  -6.7013042256111435 /10,  39.90000000000002 /10),   //2240
new THREE.Vector3(-6.903756181185228 /10,  -7.171625483155599 /10,  39.90000000000002 /10),   //2241
new THREE.Vector3(-11.725225559734298 /10,  -6.181919955271121 /10,  43.10000000000003 /10),   //2242
new THREE.Vector3(-9.582941387844999 /10,  4.254474753956048 /10,  43.10000000000003 /10),   //2243
new THREE.Vector3(-9.582941387844999 /10,  4.254474753956048 /10,  39.90000000000002 /10),   //2244
new THREE.Vector3(-11.725225559734298 /10,  -6.181919955271121 /10,  39.90000000000002 /10),   //2245
new THREE.Vector3(-10.163782611831795 /10,  -6.502438161585728 /10,  39.90000000000002 /10),   //2246
new THREE.Vector3(-10.163782611831795 /10,  -6.502438161585728 /10,  43.10000000000003 /10),   //2247
new THREE.Vector3(-3.244109947555915 /10,  2.9532995261931405 /10,  43.10000000000003 /10),   //2248
new THREE.Vector3(-3.244109947555915 /10,  2.9532995261931405 /10,  39.90000000000002 /10),   //2249
new THREE.Vector3(-3.5199813408794736 /10,  -9.00344229483012 /10,  43.10000000000003 /10),   //2250
new THREE.Vector3(-3.5199813408794736 /10,  -9.00344229483012 /10,  39.90000000000002 /10),   //2251
new THREE.Vector3(-7.127756985342671 /10,  -8.262872311210588 /10,  43.10000000000003 /10),   //2252
new THREE.Vector3(-7.127756985342671 /10,  -8.262872311210588 /10,  39.90000000000002 /10),   //2253
new THREE.Vector3(1.356954995551054 /10,  2.008836510172368 /10,  43.10000000000003 /10),   //2254
new THREE.Vector3(1.356954995551054 /10,  2.008836510172368 /10,  39.90000000000002 /10),   //2255
new THREE.Vector3(-2.912130299741303 /10,  4.570578263293962 /10,  43.10000000000003 /10),   //2256
new THREE.Vector3(1.6889346433627437 /10,  3.626115247258925 /10,  43.10000000000003 /10),   //2257
new THREE.Vector3(1.6889346433627437 /10,  3.626115247258925 /10,  39.90000000000002 /10),   //2258
new THREE.Vector3(-2.912130299741303 /10,  4.570578263293962 /10,  39.90000000000002 /10),   //2259
new THREE.Vector3(-1.1536963690242876 /10,  2.524199222039094 /10,  43.10000000000003 /10),   //2260
new THREE.Vector3(1.258997470728254 /10,  2.0289443022586706 /10,  43.10000000000003 /10),   //2261
new THREE.Vector3(1.258997470728254 /10,  2.0289443022586706 /10,  39.90000000000002 /10),   //2262
new THREE.Vector3(-1.1536963690242876 /10,  2.524199222039094 /10,  39.90000000000002 /10),   //2263
new THREE.Vector3(-2.3193450737154446 /10,  -3.1543984794673134 /10,  43.10000000000003 /10),   //2264
new THREE.Vector3(-2.3193450737154446 /10,  -3.1543984794673134 /10,  39.90000000000002 /10),   //2265
new THREE.Vector3(1.3569549955510771 /10,  2.0088365101723284 /10,  43.10000000000003 /10),   //2266
new THREE.Vector3(1.3569549955510771 /10,  2.0088365101723284 /10,  39.90000000000002 /10),   //2267
new THREE.Vector3(86.28028638770782 /10,  -3.214046483627478 /10,  43.10000000000003 /10),   //2268
new THREE.Vector3(85.95614877882178 /10,  -4.793121785975349 /10,  43.10000000000003 /10),   //2269
new THREE.Vector3(85.95614877882178 /10,  -4.793121785975349 /10,  39.90000000000002 /10),   //2270
new THREE.Vector3(86.28028638770782 /10,  -3.214046483627478 /10,  39.90000000000002 /10),   //2271
new THREE.Vector3(81.53229412605421 /10,  -11.186158467468873 /10,  43.10000000000003 /10),   //2272
new THREE.Vector3(81.53229412605421 /10,  -11.186158467468873 /10,  39.90000000000002 /10),   //2273
new THREE.Vector3(82.69700012462033 /10,  -2.478503448064929 /10,  43.10000000000003 /10),   //2274
new THREE.Vector3(82.69700012462033 /10,  -2.478503448064929 /10,  39.90000000000002 /10),   //2275
new THREE.Vector3(90.13673800102003 /10,  -8.681158148195449 /10,  43.10000000000003 /10),   //2276
new THREE.Vector3(91.71091542720113 /10,  -9.004290367492683 /10,  43.10000000000003 /10),   //2277
new THREE.Vector3(91.71091542720113 /10,  -9.004290367492683 /10,  39.90000000000002 /10),   //2278
new THREE.Vector3(90.13673800102003 /10,  -8.681158148195449 /10,  39.90000000000002 /10),   //2279
new THREE.Vector3(90.73066056161434 /10,  -13.779719709289523 /10,  43.10000000000003 /10),   //2280
new THREE.Vector3(90.73066056161434 /10,  -13.779719709289523 /10,  39.90000000000002 /10),   //2281
new THREE.Vector3(90.73353727098277 /10,  -5.773778807376725 /10,  43.10000000000003 /10),   //2282
new THREE.Vector3(90.73353727098277 /10,  -5.773778807376725 /10,  39.90000000000002 /10),   //2283
new THREE.Vector3(87.44804195904202 /10,  -5.099363475292991 /10,  43.10000000000003 /10),   //2284
new THREE.Vector3(87.44804195904202 /10,  -5.099363475292991 /10,  39.90000000000002 /10),   //2285
new THREE.Vector3(81.91541024512551 /10,  -6.286112443259858 /10,  43.10000000000003 /10),   //2286
new THREE.Vector3(81.91541024512551 /10,  -6.286112443259858 /10,  39.90000000000002 /10),   //2287
new THREE.Vector3(80.70968434645299 /10,  -15.193600834007306 /10,  39.90000000000002 /10),   //2288
new THREE.Vector3(80.70968434645296 /10,  -15.193600834007293 /10,  43.10000000000003 /10),   //2289
new THREE.Vector3(88.29439489948936 /10,  -5.273094783725429 /10,  39.90000000000002 /10),   //2290
new THREE.Vector3(88.29439489948936 /10,  -5.273094783725429 /10,  43.10000000000003 /10),   //2291
new THREE.Vector3(92.31169501452584 /10,  -14.104259474030702 /10,  43.10000000000003 /10),   //2292
new THREE.Vector3(92.31169501452584 /10,  -14.104259474030702 /10,  39.90000000000002 /10),   //2293
new THREE.Vector3(91.95498278241482 /10,  -15.842025966810722 /10,  43.10000000000003 /10),   //2294
new THREE.Vector3(91.95498278241482 /10,  -15.842025966810722 /10,  39.90000000000002 /10),   //2295
new THREE.Vector3(86.95481077883619 /10,  -16.603147513429935 /10,  43.10000000000003 /10),   //2296
new THREE.Vector3(86.96989162292145 /10,  -16.529679369712674 /10,  43.10000000000003 /10),   //2297
new THREE.Vector3(90.03596215541876 /10,  -17.15905325740746 /10,  43.10000000000003 /10),   //2298
new THREE.Vector3(92.6465301986977 /10,  -17.694925902358385 /10,  43.10000000000003 /10),   //2299
new THREE.Vector3(92.9835367945399 /10,  -16.053157784023334 /10,  43.10000000000003 /10),   //2300
new THREE.Vector3(80.69963045039466 /10,  -15.24257959648998 /10,  43.10000000000003 /10),   //2301
new THREE.Vector3(85.32812350461506 /10,  -16.192672773876712 /10,  43.10000000000003 /10),   //2302
new THREE.Vector3(85.3130426605298 /10,  -16.266140917593706 /10,  43.10000000000003 /10),   //2303
new THREE.Vector3(92.9835367945399 /10,  -16.053157784023334 /10,  39.90000000000002 /10),   //2304
new THREE.Vector3(92.6465301986977 /10,  -17.69492590235823 /10,  39.90000000000002 /10),   //2305
new THREE.Vector3(90.03596215428605 /10,  -17.159053262923997 /10,  39.90000000000002 /10),   //2306
new THREE.Vector3(86.96989162292145 /10,  -16.529679369712674 /10,  39.90000000000002 /10),   //2307
new THREE.Vector3(86.95481077883619 /10,  -16.603147513429935 /10,  39.90000000000002 /10),   //2308
new THREE.Vector3(85.3130426605298 /10,  -16.266140917593706 /10,  39.90000000000002 /10),   //2309
new THREE.Vector3(85.32812350461506 /10,  -16.192672773876712 /10,  39.90000000000002 /10),   //2310
new THREE.Vector3(80.69963045039466 /10,  -15.24257959648998 /10,  39.90000000000002 /10),   //2311
new THREE.Vector3(86.9698916229217 /10,  -16.529679369712728 /10,  39.90000000000002 /10),   //2312
new THREE.Vector3(90.0359621542863 /10,  -17.159053262923994 /10,  39.90000000000002 /10),   //2313
new THREE.Vector3(90.03596215541903 /10,  -17.159053257407503 /10,  43.10000000000003 /10),   //2314
new THREE.Vector3(86.9698916229217 /10,  -16.529679369712728 /10,  43.10000000000003 /10),   //2315
new THREE.Vector3(86.95481077883643 /10,  -16.60314751342994 /10,  43.10000000000003 /10),   //2316
new THREE.Vector3(85.31304266053006 /10,  -16.26614091759374 /10,  43.10000000000003 /10),   //2317
new THREE.Vector3(85.31304266053006 /10,  -16.26614091759374 /10,  39.90000000000002 /10),   //2318
new THREE.Vector3(86.95481077883643 /10,  -16.60314751342994 /10,  39.90000000000002 /10),   //2319
new THREE.Vector3(80.69963045039488 /10,  -15.24257959649002 /10,  43.10000000000003 /10),   //2320
new THREE.Vector3(80.70968434645324 /10,  -15.193600834007325 /10,  43.10000000000003 /10),   //2321
new THREE.Vector3(80.70968434645324 /10,  -15.193600834007334 /10,  39.90000000000002 /10),   //2322
new THREE.Vector3(80.69963045039488 /10,  -15.24257959649002 /10,  39.90000000000002 /10),   //2323
new THREE.Vector3(85.3281235046153 /10,  -16.192672773876723 /10,  43.10000000000003 /10),   //2324
new THREE.Vector3(85.3281235046153 /10,  -16.192672773876723 /10,  39.90000000000002 /10),   //2325
new THREE.Vector3(4.105243469761993 /10,  -2.585624317717833 /10,  39.90000000000002 /10),   //2326
new THREE.Vector3(3.7334503935627374 /10,  -4.396858954229001 /10,  39.90000000000002 /10),   //2327
new THREE.Vector3(3.733450393562518 /10,  -4.3968589542289775 /10,  43.10000000000003 /10),   //2328
new THREE.Vector3(4.105243469761854 /10,  -2.585624317717729 /10,  43.10000000000003 /10),   //2329
new THREE.Vector3(71.12193329120646 /10,  -13.74104772786855 /10,  43.10000000000003 /10),   //2330
new THREE.Vector3(71.19834289704984 /10,  -13.36880915344322 /10,  43.10000000000003 /10),   //2331
new THREE.Vector3(71.19834289704984 /10,  -13.36880915344322 /10,  39.90000000000002 /10),   //2332
new THREE.Vector3(71.12193329120646 /10,  -13.74104772786855 /10,  39.90000000000002 /10),   //2333
new THREE.Vector3(73.51013774980979 /10,  -14.231275699638928 /10,  43.10000000000003 /10),   //2334
new THREE.Vector3(72.05252977828042 /10,  -13.93207175294782 /10,  43.10000000000003 /10),   //2335
new THREE.Vector3(72.05252977828042 /10,  -13.93207175294782 /10,  39.90000000000002 /10),   //2336
new THREE.Vector3(73.51013774980979 /10,  -14.231275699638928 /10,  39.90000000000002 /10),   //2337
new THREE.Vector3(73.61103673301258 /10,  -13.864064051157987 /10,  43.10000000000003 /10),   //2338
new THREE.Vector3(73.58654735565347 /10,  -13.859037125213439 /10,  43.10000000000003 /10),   //2339
new THREE.Vector3(73.58654735565347 /10,  -13.859037125213439 /10,  39.90000000000002 /10),   //2340
new THREE.Vector3(73.61103673301258 /10,  -13.864064051157987 /10,  39.90000000000002 /10),   //2341
new THREE.Vector3(71.17385351211156 /10,  -13.363782183367585 /10,  43.10000000000003 /10),   //2342
new THREE.Vector3(71.17385351211156 /10,  -13.363782183367585 /10,  39.90000000000002 /10),   //2343
new THREE.Vector3(35.97810200090084 /10,  -6.062568204885199 /10,  43.10000000000003 /10),   //2344
new THREE.Vector3(31.41328134377967 /10,  -5.125545093579111 /10,  43.10000000000003 /10),   //2345
new THREE.Vector3(31.41328134377967 /10,  -5.125545093579111 /10,  39.90000000000002 /10),   //2346
new THREE.Vector3(35.97810200090084 /10,  -6.062568204885199 /10,  39.90000000000002 /10),   //2347
new THREE.Vector3(26.22153252504736 /10,  -4.0598320910833845 /10,  43.10000000000003 /10),   //2348
new THREE.Vector3(22.450167808068652 /10,  -3.2856820934353794 /10,  43.10000000000003 /10),   //2349
new THREE.Vector3(22.450167808068652 /10,  -3.2856820934353794 /10,  39.90000000000002 /10),   //2350
new THREE.Vector3(26.22153252504736 /10,  -4.0598320910833845 /10,  39.90000000000002 /10),   //2351
new THREE.Vector3(28.79291754749171 /10,  -4.58766163250003 /10,  43.10000000000003 /10),   //2352
new THREE.Vector3(27.152129012349498 /10,  -4.250856116209569 /10,  43.10000000000003 /10),   //2353
new THREE.Vector3(27.152129012349498 /10,  -4.250856116209569 /10,  39.90000000000002 /10),   //2354
new THREE.Vector3(28.79291754749171 /10,  -4.58766163250003 /10,  39.90000000000002 /10),   //2355
new THREE.Vector3(28.807998387383574 /10,  -4.5141935092098855 /10,  39.90000000000002 /10),   //2356
new THREE.Vector3(28.80799838765718 /10,  -4.514193509265848 /10,  43.10000000000003 /10),   //2357
new THREE.Vector3(31.42836218786198 /10,  -5.052076949876119 /10,  43.10000000000003 /10),   //2358
new THREE.Vector3(31.42836218786198 /10,  -5.052076949876119 /10,  39.90000000000002 /10),   //2359
new THREE.Vector3(35.99318284498326 /10,  -5.989100061182518 /10,  39.90000000000002 /10),   //2360
new THREE.Vector3(35.99318284498326 /10,  -5.989100061182518 /10,  43.10000000000003 /10),   //2361
new THREE.Vector3(38.638036025698085 /10,  -6.532010449671614 /10,  43.10000000000003 /10),   //2362
new THREE.Vector3(38.638036025698085 /10,  -6.532010449671614 /10,  39.90000000000002 /10),   //2363
new THREE.Vector3(38.60787433752742 /10,  -6.678946737105873 /10,  43.10000000000003 /10),   //2364
new THREE.Vector3(38.60787433752742 /10,  -6.678946737105873 /10,  39.90000000000002 /10),   //2365
new THREE.Vector3(22.435086963983235 /10,  -3.3591502371525346 /10,  43.10000000000003 /10),   //2366
new THREE.Vector3(22.435086963983235 /10,  -3.3591502371525346 /10,  39.90000000000002 /10),   //2367
new THREE.Vector3(1.516427206999606 /10,  -1.3171625095539266 /10,  43.10000000000003 /10),   //2368
new THREE.Vector3(1.2751337016250655 /10,  -2.492652809070243 /10,  43.10000000000003 /10),   //2369
new THREE.Vector3(1.2751337016250655 /10,  -2.492652809070243 /10,  39.90000000000002 /10),   //2370
new THREE.Vector3(1.516427206999606 /10,  -1.3171625095539266 /10,  39.90000000000002 /10),   //2371
new THREE.Vector3(0.9994558717339714 /10,  -3.8356504762702346 /10,  39.90000000000002 /10),   //2372
new THREE.Vector3(0.9994558717339714 /10,  -3.8356504762702346 /10,  43.10000000000003 /10),   //2373
new THREE.Vector3(1.2589974707282083 /10,  2.0289443022586826 /10,  43.10000000000003 /10),   //2374
new THREE.Vector3(1.0727993199384318 /10,  1.1218576415501733 /10,  43.10000000000003 /10),   //2375
new THREE.Vector3(1.0727993199384318 /10,  1.1218576415501733 /10,  39.90000000000002 /10),   //2376
new THREE.Vector3(1.2589974707282083 /10,  2.0289443022586826 /10,  39.90000000000002 /10),   //2377
new THREE.Vector3(1.97890642563556 /10,  0.9358605645276016 /10,  43.10000000000003 /10),   //2378
new THREE.Vector3(1.97890642563556 /10,  0.9358605645276016 /10,  39.90000000000002 /10),   //2379
new THREE.Vector3(1.3569549955510773 /10,  2.0088365101723578 /10,  39.90000000000002 /10),   //2380
new THREE.Vector3(1.3569549955510773 /10,  2.0088365101723578 /10,  43.10000000000003 /10),   //2381
new THREE.Vector3(93.18706734454078 /10,  -32.79605273425123 /10,  39.90000000000002 /10),   //2382
new THREE.Vector3(93.11359920086633 /10,  -32.78097189017451 /10,  39.90000000000002 /10),   //2383
new THREE.Vector3(93.11359920086633 /10,  -32.78097189017451 /10,  43.10000000000003 /10),   //2384
new THREE.Vector3(93.18706734454078 /10,  -32.79605273425123 /10,  43.10000000000003 /10),   //2385
new THREE.Vector3(92.37891776366682 /10,  -32.6301634493151 /10,  43.10000000000003 /10),   //2386
new THREE.Vector3(92.37891776366682 /10,  -32.6301634493151 /10,  39.90000000000002 /10),   //2387
new THREE.Vector3(92.02180337571194 /10,  -34.369889092601625 /10,  39.90000000000002 /10),   //2388
new THREE.Vector3(92.82995295658581 /10,  -34.53577837753767 /10,  39.90000000000002 /10),   //2389
new THREE.Vector3(92.02180337571194 /10,  -34.369889092601625 /10,  43.10000000000003 /10),   //2390
new THREE.Vector3(92.82995295658581 /10,  -34.53577837753767 /10,  43.10000000000003 /10),   //2391
new THREE.Vector3(84.03657341126748 /10,  -35.73818270703921 /10,  43.10000000000003 /10),   //2392
new THREE.Vector3(83.06777348935545 /10,  -35.539316643013926 /10,  43.10000000000003 /10),   //2393
new THREE.Vector3(83.06777348935545 /10,  -35.539316643013926 /10,  39.90000000000002 /10),   //2394
new THREE.Vector3(84.03657341126748 /10,  -35.73818270703921 /10,  39.90000000000002 /10),   //2395
new THREE.Vector3(83.25155870928377 /10,  -34.64398486487586 /10,  43.10000000000003 /10),   //2396
new THREE.Vector3(83.25155870928377 /10,  -34.64398486487586 /10,  39.90000000000002 /10),   //2397
new THREE.Vector3(84.22035863119581 /10,  -34.842850928901235 /10,  43.10000000000003 /10),   //2398
new THREE.Vector3(84.22035863119581 /10,  -34.842850928901235 /10,  39.90000000000002 /10),   //2399
new THREE.Vector3(80.9358428194006 /10,  -34.1686366593217 /10,  43.10000000000003 /10),   //2400
new THREE.Vector3(80.75205759947228 /10,  -35.0639684374597 /10,  43.10000000000003 /10),   //2401
new THREE.Vector3(80.75205759947228 /10,  -35.0639684374597 /10,  39.90000000000002 /10),   //2402
new THREE.Vector3(80.93584281940049 /10,  -34.168636659321734 /10,  39.90000000000002 /10),   //2403
new THREE.Vector3(79.96704289748834 /10,  -33.969770595296325 /10,  39.90000000000002 /10),   //2404
new THREE.Vector3(79.96704289748834 /10,  -33.969770595296325 /10,  43.10000000000003 /10),   //2405
new THREE.Vector3(79.78325767756003 /10,  -34.86510237343434 /10,  43.10000000000003 /10),   //2406
new THREE.Vector3(79.78325767756003 /10,  -34.86510237343434 /10,  39.90000000000002 /10),   //2407
new THREE.Vector3(67.12775010091482 /10,  -31.334242282820842 /10,  39.90000000000002 /10),   //2408
new THREE.Vector3(67.12775010091482 /10,  -31.334242282820842 /10,  43.10000000000003 /10),   //2409
new THREE.Vector3(67.91276480289889 /10,  -32.42844012498424 /10,  43.10000000000003 /10),   //2410
new THREE.Vector3(67.91276480289889 /10,  -32.42844012498424 /10,  39.90000000000002 /10),   //2411
new THREE.Vector3(66.9439648809868 /10,  -32.229574060958846 /10,  39.90000000000002 /10),   //2412
new THREE.Vector3(66.9439648809868 /10,  -32.229574060958846 /10,  43.10000000000003 /10),   //2413
new THREE.Vector3(63.659449069191346 /10,  -31.555359791379324 /10,  43.10000000000003 /10),   //2414
new THREE.Vector3(63.659449069191346 /10,  -31.555359791379324 /10,  39.90000000000002 /10),   //2415
new THREE.Vector3(64.81203421080363 /10,  -30.858894077219716 /10,  39.90000000000002 /10),   //2416
new THREE.Vector3(64.62824899087538 /10,  -31.754225855357834 /10,  39.90000000000002 /10),   //2417
new THREE.Vector3(64.62824899087538 /10,  -31.754225855357834 /10,  43.10000000000003 /10),   //2418
new THREE.Vector3(64.81203421080363 /10,  -30.858894077219716 /10,  43.10000000000003 /10),   //2419
new THREE.Vector3(51.41695554258068 /10,  -26.012452138084985 /10,  39.90000000000002 /10),   //2420
new THREE.Vector3(51.60074076250591 /10,  -25.117120359961103 /10,  39.90000000000002 /10),   //2421
new THREE.Vector3(52.56954068510244 /10,  -25.315986424126947 /10,  39.90000000000002 /10),   //2422
new THREE.Vector3(52.38575546517704 /10,  -26.2113182022507 /10,  39.90000000000002 /10),   //2423
new THREE.Vector3(51.41695554258068 /10,  -26.012452138084985 /10,  43.10000000000003 /10),   //2424
new THREE.Vector3(52.38575546517704 /10,  -26.2113182022507 /10,  43.10000000000003 /10),   //2425
new THREE.Vector3(52.56954068510244 /10,  -25.315986424126947 /10,  43.10000000000003 /10),   //2426
new THREE.Vector3(51.60074076250591 /10,  -25.117120359961103 /10,  43.10000000000003 /10),   //2427
new THREE.Vector3(49.10123965338167 /10,  -25.537103932671258 /10,  39.90000000000002 /10),   //2428
new THREE.Vector3(48.13243973078532 /10,  -25.33823786850541 /10,  39.90000000000002 /10),   //2429
new THREE.Vector3(48.31622495071072 /10,  -24.44290609038167 /10,  39.90000000000002 /10),   //2430
new THREE.Vector3(49.285024873307044 /10,  -24.64177215454737 /10,  39.90000000000002 /10),   //2431
new THREE.Vector3(49.285024873307044 /10,  -24.64177215454737 /10,  43.10000000000003 /10),   //2432
new THREE.Vector3(49.10123965338167 /10,  -25.537103932671258 /10,  43.10000000000003 /10),   //2433
new THREE.Vector3(48.13243973078532 /10,  -25.33823786850541 /10,  43.10000000000003 /10),   //2434
new THREE.Vector3(48.31622495071072 /10,  -24.44290609038167 /10,  43.10000000000003 /10),   //2435
new THREE.Vector3(36.44573207673298 /10,  -22.006243842071708 /10,  39.90000000000002 /10),   //2436
new THREE.Vector3(36.2619468568076 /10,  -22.90157562019548 /10,  39.90000000000002 /10),   //2437
new THREE.Vector3(35.29314693421127 /10,  -22.702709556029692 /10,  39.90000000000002 /10),   //2438
new THREE.Vector3(35.47693215413672 /10,  -21.80737777790595 /10,  39.90000000000002 /10),   //2439
new THREE.Vector3(36.44573207673298 /10,  -22.006243842071708 /10,  43.10000000000003 /10),   //2440
new THREE.Vector3(36.2619468568076 /10,  -22.90157562019548 /10,  43.10000000000003 /10),   //2441
new THREE.Vector3(35.29314693421127 /10,  -22.702709556029692 /10,  43.10000000000003 /10),   //2442
new THREE.Vector3(35.47693215413672 /10,  -21.80737777790595 /10,  43.10000000000003 /10),   //2443
new THREE.Vector3(33.161216264937295 /10,  -21.33202957249204 /10,  39.90000000000002 /10),   //2444
new THREE.Vector3(32.977431045012345 /10,  -22.227361350615883 /10,  39.90000000000002 /10),   //2445
new THREE.Vector3(32.008631122187865 /10,  -22.02849528640326 /10,  39.90000000000002 /10),   //2446
new THREE.Vector3(32.19241634211312 /10,  -21.13316350827952 /10,  39.90000000000002 /10),   //2447
new THREE.Vector3(32.19241634211312 /10,  -21.13316350827952 /10,  43.10000000000003 /10),   //2448
new THREE.Vector3(32.008631122187865 /10,  -22.02849528640326 /10,  43.10000000000003 /10),   //2449
new THREE.Vector3(33.161216264937295 /10,  -21.33202957249204 /10,  43.10000000000003 /10),   //2450
new THREE.Vector3(32.977431045012345 /10,  -22.227361350615883 /10,  43.10000000000003 /10),   //2451
new THREE.Vector3(20.835878634814964 /10,  -16.19270692202926 /10,  39.90000000000002 /10),   //2452
new THREE.Vector3(20.682657258901227 /10,  -16.93914326222633 /10,  39.90000000000002 /10),   //2453
new THREE.Vector3(19.71385733630479 /10,  -16.74027719806056 /10,  39.90000000000002 /10),   //2454
new THREE.Vector3(19.867078712218383 /10,  -15.993840857863413 /10,  39.90000000000002 /10),   //2455
new THREE.Vector3(19.71385733630479 /10,  -16.74027719806056 /10,  43.10000000000003 /10),   //2456
new THREE.Vector3(20.682657258901227 /10,  -16.93914326222633 /10,  43.10000000000003 /10),   //2457
new THREE.Vector3(20.835878634814964 /10,  -16.19270692202926 /10,  43.10000000000003 /10),   //2458
new THREE.Vector3(19.867078712218383 /10,  -15.993840857863413 /10,  43.10000000000003 /10),   //2459
new THREE.Vector3(16.582562900195274 /10,  -15.319626588237092 /10,  39.90000000000002 /10),   //2460
new THREE.Vector3(17.551362822107485 /10,  -15.518492652262458 /10,  39.90000000000002 /10),   //2461
new THREE.Vector3(17.398141446193343 /10,  -16.26492899245949 /10,  39.90000000000002 /10),   //2462
new THREE.Vector3(16.551788430481384 /10,  -16.091197668577408 /10,  39.90000000000002 /10),   //2463
new THREE.Vector3(16.613117196429528 /10,  -15.79242721745646 /10,  39.90000000000002 /10),   //2464
new THREE.Vector3(16.490670290229875 /10,  -15.767292477313273 /10,  39.90000000000002 /10),   //2465
new THREE.Vector3(17.551362822107485 /10,  -15.518492652262458 /10,  43.10000000000003 /10),   //2466
new THREE.Vector3(17.398141446193343 /10,  -16.26492899245949 /10,  43.10000000000003 /10),   //2467
new THREE.Vector3(16.551788430481384 /10,  -16.091197668577408 /10,  43.10000000000003 /10),   //2468
new THREE.Vector3(16.613117196429528 /10,  -15.79242721745646 /10,  43.10000000000003 /10),   //2469
new THREE.Vector3(16.582562900195274 /10,  -15.319626588237092 /10,  43.10000000000003 /10),   //2470
new THREE.Vector3(16.490670290229875 /10,  -15.767292477313273 /10,  43.10000000000003 /10),   //2471
new THREE.Vector3(11.585363796622348 /10,  -12.704384514340852 /10,  39.90000000000002 /10),   //2472
new THREE.Vector3(11.427919784406638 /10,  -13.471391934573376 /10,  39.90000000000002 /10),   //2473
new THREE.Vector3(10.581566767554035 /10,  -13.297660610457196 /10,  39.90000000000002 /10),   //2474
new THREE.Vector3(10.73901077976988 /10,  -12.530653190224715 /10,  39.90000000000002 /10),   //2475
new THREE.Vector3(11.585363796622348 /10,  -12.704384514340852 /10,  43.10000000000003 /10),   //2476
new THREE.Vector3(11.427919784406638 /10,  -13.471391934573376 /10,  43.10000000000003 /10),   //2477
new THREE.Vector3(10.73901077976988 /10,  -12.530653190224715 /10,  43.10000000000003 /10),   //2478
new THREE.Vector3(10.581566767554035 /10,  -13.297660610457196 /10,  43.10000000000003 /10),   //2479
new THREE.Vector3(-9.194982689919625 /10,  -6.701304225611127 /10,  39.90000000000002 /10),   //2480
new THREE.Vector3(-9.378767909847902 /10,  -7.596636003749146 /10,  39.90000000000002 /10),   //2481
new THREE.Vector3(-10.200631544182688 /10,  -7.427931627923886 /10,  39.90000000000002 /10),   //2482
new THREE.Vector3(-10.155389011923651 /10,  -7.207527196758324 /10,  39.90000000000002 /10),   //2483
new THREE.Vector3(-10.30232529950108 /10,  -7.177365508558301 /10,  39.90000000000002 /10),   //2484
new THREE.Vector3(-10.163782611831817 /10,  -6.502438161585824 /10,  39.90000000000002 /10),   //2485
new THREE.Vector3(-10.155389011923651 /10,  -7.207527196758324 /10,  43.10000000000003 /10),   //2486
new THREE.Vector3(-10.30232529950108 /10,  -7.177365508558301 /10,  43.10000000000003 /10),   //2487
new THREE.Vector3(-9.194982689919625 /10,  -6.701304225611127 /10,  43.10000000000003 /10),   //2488
new THREE.Vector3(-10.163782611831817 /10,  -6.502438161585824 /10,  43.10000000000003 /10),   //2489
new THREE.Vector3(-9.378767909847902 /10,  -7.596636003749146 /10,  43.10000000000003 /10),   //2490
new THREE.Vector3(-10.200631544182688 /10,  -7.427931627923886 /10,  43.10000000000003 /10),   //2491
new THREE.Vector3(88.47838119734539 /10,  -4.3767834303054345 /10,  39.90000000000002 /10),   //2492
new THREE.Vector3(88.29439489948936 /10,  -5.273094783725367 /10,  39.90000000000002 /10),   //2493
new THREE.Vector3(87.4480419590419 /10,  -5.099363475292973 /10,  39.90000000000002 /10),   //2494
new THREE.Vector3(87.63202825689815 /10,  -4.203052121873215 /10,  39.90000000000002 /10),   //2495
new THREE.Vector3(88.47838119734539 /10,  -4.3767834303054345 /10,  43.10000000000003 /10),   //2496
new THREE.Vector3(87.63202825689815 /10,  -4.203052121873215 /10,  43.10000000000003 /10),   //2497
new THREE.Vector3(87.4480419590419 /10,  -5.099363475292973 /10,  43.10000000000003 /10),   //2498
new THREE.Vector3(88.29439489948936 /10,  -5.273094783725367 /10,  43.10000000000003 /10),   //2499
new THREE.Vector3(77.87963114768029 /10,  -1.9959815188201466 /10,  39.90000000000002 /10),   //2500
new THREE.Vector3(78.82394161431915 /10,  -2.1898206196201455 /10,  39.90000000000002 /10),   //2501
new THREE.Vector3(78.64799843331642 /10,  -3.0469489630196875 /10,  39.90000000000002 /10),   //2502
new THREE.Vector3(77.70368796667749 /10,  -2.85310986221967 /10,  39.90000000000002 /10),   //2503
new THREE.Vector3(78.64799843331642 /10,  -3.0469489630196875 /10,  43.10000000000003 /10),   //2504
new THREE.Vector3(78.82394161431915 /10,  -2.1898206196201455 /10,  43.10000000000003 /10),   //2505
new THREE.Vector3(77.70368796667749 /10,  -2.85310986221967 /10,  43.10000000000003 /10),   //2506
new THREE.Vector3(77.87963114768029 /10,  -1.9959815188201466 /10,  43.10000000000003 /10),   //2507
new THREE.Vector3(73.40278877836153 /10,  -0.7646374669866666 /10,  39.90000000000002 /10),   //2508
new THREE.Vector3(73.21900356619064 /10,  -1.6599692467022495 /10,  39.90000000000002 /10),   //2509
new THREE.Vector3(72.25020364427871 /10,  -1.461103182677029 /10,  39.90000000000002 /10),   //2510
new THREE.Vector3(72.43398886420383 /10,  -0.5657714045530753 /10,  39.90000000000002 /10),   //2511
new THREE.Vector3(73.40278877836153 /10,  -0.7646374669866666 /10,  43.10000000000003 /10),   //2512
new THREE.Vector3(72.43398886420383 /10,  -0.5657714045530753 /10,  43.10000000000003 /10),   //2513
new THREE.Vector3(72.25020364427871 /10,  -1.461103182677029 /10,  43.10000000000003 /10),   //2514
new THREE.Vector3(73.21900356619064 /10,  -1.6599692467022495 /10,  43.10000000000003 /10),   //2515
new THREE.Vector3(59.73947152221007 /10,  2.775051220782906 /10,  39.90000000000002 /10),   //2516
new THREE.Vector3(60.708272092996 /10,  2.5761850235627395 /10,  39.90000000000002 /10),   //2517
new THREE.Vector3(59.55568630228456 /10,  1.8797194426591963 /10,  39.90000000000002 /10),   //2518
new THREE.Vector3(60.708272092996 /10,  2.5761850235627395 /10,  43.10000000000003 /10),   //2519
new THREE.Vector3(59.55568630228456 /10,  1.8797194426591963 /10,  43.10000000000003 /10),   //2520
new THREE.Vector3(59.73947152221007 /10,  2.775051220782906 /10,  43.10000000000003 /10),   //2521
new THREE.Vector3(56.45495571018642 /10,  3.449265490409604 /10,  39.90000000000002 /10),   //2522
new THREE.Vector3(57.42375628097252 /10,  3.250399293189577 /10,  39.90000000000002 /10),   //2523
new THREE.Vector3(57.23997106104702 /10,  2.35506751506577 /10,  39.90000000000002 /10),   //2524
new THREE.Vector3(56.271170490260936 /10,  2.5539337122857835 /10,  39.90000000000002 /10),   //2525
new THREE.Vector3(56.271170490260936 /10,  2.5539337122857835 /10,  43.10000000000003 /10),   //2526
new THREE.Vector3(57.23997106104702 /10,  2.35506751506577 /10,  43.10000000000003 /10),   //2527
new THREE.Vector3(57.42375628097252 /10,  3.250399293189577 /10,  43.10000000000003 /10),   //2528
new THREE.Vector3(56.45495571018642 /10,  3.449265490409604 /10,  43.10000000000003 /10),   //2529
new THREE.Vector3(42.29323696824071 /10,  6.356248822410797 /10,  39.90000000000002 /10),   //2530
new THREE.Vector3(42.109451748312296 /10,  5.460917044272664 /10,  39.90000000000002 /10),   //2531
new THREE.Vector3(41.14065182548786 /10,  5.659783108485281 /10,  39.90000000000002 /10),   //2532
new THREE.Vector3(41.3244370454161 /10,  6.555114886623413 /10,  39.90000000000002 /10),   //2533
new THREE.Vector3(41.3244370454161 /10,  6.555114886623413 /10,  43.10000000000003 /10),   //2534
new THREE.Vector3(42.29323696824071 /10,  6.356248822410797 /10,  43.10000000000003 /10),   //2535
new THREE.Vector3(41.14065182548786 /10,  5.659783108485281 /10,  43.10000000000003 /10),   //2536
new THREE.Vector3(42.10945174887478 /10,  5.460917047012404 /10,  43.10000000000003 /10),   //2537
new THREE.Vector3(25.15164968285718 /10,  9.874911405356725 /10,  39.90000000000002 /10),   //2538
new THREE.Vector3(24.96786446292888 /10,  8.979579627218827 /10,  39.90000000000002 /10),   //2539
new THREE.Vector3(24.023553273519887 /10,  9.173418876381895 /10,  39.90000000000002 /10),   //2540
new THREE.Vector3(24.20733849344815 /10,  10.06875065452003 /10,  39.90000000000002 /10),   //2541
new THREE.Vector3(25.15164968285718 /10,  9.874911405356725 /10,  43.10000000000003 /10),   //2542
new THREE.Vector3(24.20733849344815 /10,  10.06875065452003 /10,  43.10000000000003 /10),   //2543
new THREE.Vector3(24.023553273519887 /10,  9.173418876381895 /10,  43.10000000000003 /10),   //2544
new THREE.Vector3(24.96786446292888 /10,  8.979579627218827 /10,  43.10000000000003 /10),   //2545
new THREE.Vector3(11.184260476946212 /10,  11.808947188857587 /10,  39.90000000000002 /10),   //2546
new THREE.Vector3(11.36804569687455 /10,  12.704278966995599 /10,  39.90000000000002 /10),   //2547
new THREE.Vector3(12.33684626766028 /10,  12.505412769775566 /10,  39.90000000000002 /10),   //2548
new THREE.Vector3(12.15306104773206 /10,  11.61008099163759 /10,  39.90000000000002 /10),   //2549
new THREE.Vector3(11.184260476946212 /10,  11.808947188857587 /10,  43.10000000000003 /10),   //2550
new THREE.Vector3(11.36804569687455 /10,  12.704278966995599 /10,  43.10000000000003 /10),   //2551
new THREE.Vector3(12.15306104773206 /10,  11.61008099163759 /10,  43.10000000000003 /10),   //2552
new THREE.Vector3(12.33684626766028 /10,  12.505412769775566 /10,  43.10000000000003 /10),   //2553
new THREE.Vector3(9.052330455864935 /10,  13.179627039355175 /10,  39.90000000000002 /10),   //2554
new THREE.Vector3(8.868545235936702 /10,  12.28429526121729 /10,  39.90000000000002 /10),   //2555
new THREE.Vector3(7.899745314024501 /10,  12.483161325242593 /10,  39.90000000000002 /10),   //2556
new THREE.Vector3(8.083530533952997 /10,  13.378493103380281 /10,  39.90000000000002 /10),   //2557
new THREE.Vector3(9.052330455864935 /10,  13.179627039355175 /10,  43.10000000000003 /10),   //2558
new THREE.Vector3(8.868545235936702 /10,  12.28429526121729 /10,  43.10000000000003 /10),   //2559
new THREE.Vector3(7.899745314024501 /10,  12.483161325242593 /10,  43.10000000000003 /10),   //2560
new THREE.Vector3(8.083530533952997 /10,  13.378493103380281 /10,  43.10000000000003 /10),   //2561
new THREE.Vector3(-4.827101517539954 /10,  14.512702092478875 /10,  39.90000000000002 /10),   //2562
new THREE.Vector3(-4.651158336537222 /10,  15.369830435878374 /10,  39.90000000000002 /10),   //2563
new THREE.Vector3(-3.6823584146249706 /10,  15.170964371852632 /10,  39.90000000000002 /10),   //2564
new THREE.Vector3(-3.8583015956276197 /10,  14.313836028453043 /10,  39.90000000000002 /10),   //2565
new THREE.Vector3(-3.8583015956276197 /10,  14.313836028453043 /10,  43.10000000000003 /10),   //2566
new THREE.Vector3(-3.6823584146249706 /10,  15.170964371852632 /10,  43.10000000000003 /10),   //2567
new THREE.Vector3(-4.651158336537222 /10,  15.369830435878374 /10,  43.10000000000003 /10),   //2568
new THREE.Vector3(-4.827101517539954 /10,  14.512702092478875 /10,  43.10000000000003 /10),   //2569

);

var alpha0 = 
[

[
//BuildingPart23  alpha2 (23)
[ [115,114], [114,113], [113,122], [122,121], [121,120], [120,259], [259,258], [258,257], [257,256], [256,974], [974,973], [973,972], [972,971], [971,970], [970,969], [969,968], [968,995], [995,996], [996,997], [997,17], [17,16], [16,15], [15,14], [14,13], [13,229], [229,228], [228,227], [227,226], [226,189], [189,188], [188,187], [187,186], [186,185], [185,147], [147,146], [146,145], [145,144], [144,143], [143,431], [431,430], [430,429], [429,428], [428,515], [515,514], [514,513], [513,512], [512,462], [462,475], [475,474], [474,473], [473,472], [472,707], [707,706], [706,705], [705,704], [704,703], [703,761], [761,760], [760,759], [759,758], [758,755], [755,754], [754,753], [753,998], [998,999], [999,898], [898,882], [882,881], [881,885], [885,886], [886,900], [900,918], [918,845], [845,844], [844,843], [843,804], [804,803], [803,802], [802,801], [801,800], [800,645], [645,644], [644,643], [643,642], [642,641], [641,551], [551,543], [543,542], [542,550], [550,549], [549,568], [568,567], [567,566], [566,581], [581,342], [342,341], [341,340], [340,339], [339,338], [338,337], [337,386], [386,395], [395,394], [394,393], [393,300], [300,299], [299,298], [298,297], [297,296], [296,51], [51,50], [50,67], [67,66], [66,65], [65,115], ],   // alpha1 (486)
[ [51,70], [70,311], [311,296], [296,51] , ],   // alpha1 (487)
[ [147,156], [156,200], [200,185], [185,147] , ],   // alpha1 (488)
[ [515,525], [525,442], [442,428], [428,515] , ],   // alpha1 (489)
[ [386,402], [402,361], [361,337], [337,386] , ],   // alpha1 (490)
[ [707,721], [721,488], [488,472], [472,707] , ],   // alpha1 (491)
[ [974,962], [962,276], [276,256], [256,974] , ],   // alpha1 (492)
[ [229,232], [232,26], [26,13], [13,229] , ],   // alpha1 (493)
[ [755,781], [781,780], [780,758], [758,755] , ],   // alpha1 (494)
[ [820,800], [800,645], [645,657], [657,820] , ],   // alpha1 (495)
[ [891,898], [898,999], [999,1000], [1000,891] , ],   // alpha1 (496)
[ [764,1001], [1001,998], [998,753], [753,764] , ],   // alpha1 (497)
[ [1001,1000], [1000,999], [999,998], [998,1001] , ],   // alpha1 (498)
[ [1002,959], [959,958], [958,957], [957,965], [965,964], [964,963], [963,962], [962,276], [276,275], [275,274], [274,273], [273,131], [131,133], [133,132], [132,130], [130,129], [129,128], [128,78], [78,77], [77,76], [76,75], [75,70], [70,311], [311,310], [310,309], [309,308], [308,317], [317,405], [405,404], [404,403], [403,402], [402,361], [361,360], [360,359], [359,358], [358,357], [357,356], [356,625], [625,635], [635,634], [634,637], [637,621], [621,620], [620,611], [611,602], [602,603], [603,665], [665,664], [664,663], [663,662], [662,657], [657,820], [820,819], [819,818], [818,817], [817,816], [816,864], [864,872], [872,871], [871,917], [917,888], [888,887], [887,896], [896,895], [895,892], [892,891], [891,1000], [1000,1001], [1001,764], [764,782], [782,781], [781,780], [780,779], [779,778], [778,777], [777,725], [725,724], [724,723], [723,722], [722,721], [721,488], [488,487], [487,486], [486,485], [485,484], [484,520], [520,519], [519,518], [518,525], [525,442], [442,441], [441,440], [440,439], [439,160], [160,159], [159,158], [158,157], [157,156], [156,200], [200,199], [199,198], [198,197], [197,196], [196,235], [235,234], [234,233], [233,232], [232,26], [26,25], [25,24], [24,23], [23,22], [22,1003], [1003,1004], [1004,1002] , ],   // alpha1 (499)
[ [959,1002], [1002,995], [995,968], [968,959] , ],   // alpha1 (500)
[ [958,969], [969,968], [968,959], [959,958] , ],   // alpha1 (501)
[ [957,970], [970,969], [969,958], [958,957] , ],   // alpha1 (502)
[ [965,971], [971,970], [970,957], [957,965] , ],   // alpha1 (503)
[ [964,972], [972,971], [971,965], [965,964] , ],   // alpha1 (504)
[ [973,963], [963,962], [962,974], [974,973] , ],   // alpha1 (505)
[ [963,973], [973,972], [972,964], [964,963] , ],   // alpha1 (506)
[ [257,275], [275,274], [274,258], [258,257] , ],   // alpha1 (507)
[ [275,257], [257,256], [256,276], [276,275] , ],   // alpha1 (508)
[ [273,259], [259,258], [258,274], [274,273] , ],   // alpha1 (509)
[ [50,75], [75,70], [70,51], [51,50] , ],   // alpha1 (510)
[ [67,76], [76,75], [75,50], [50,67] , ],   // alpha1 (511)
[ [66,77], [77,76], [76,67], [67,66] , ],   // alpha1 (512)
[ [299,308], [308,317], [317,300], [300,299] , ],   // alpha1 (513)
[ [298,309], [309,308], [308,299], [299,298] , ],   // alpha1 (514)
[ [297,310], [310,309], [309,298], [298,297] , ],   // alpha1 (515)
[ [310,297], [297,296], [296,311], [311,310] , ],   // alpha1 (516)
[ [405,393], [393,300], [300,317], [317,405] , ],   // alpha1 (517)
[ [404,394], [394,393], [393,405], [405,404] , ],   // alpha1 (518)
[ [395,403], [403,402], [402,386], [386,395] , ],   // alpha1 (519)
[ [403,395], [395,394], [394,404], [404,403] , ],   // alpha1 (520)
[ [358,340], [340,341], [341,357], [357,358] , ],   // alpha1 (521)
[ [340,358], [358,359], [359,339], [339,340] , ],   // alpha1 (522)
[ [360,338], [338,339], [339,359], [359,360] , ],   // alpha1 (523)
[ [360,338], [338,337], [337,361], [361,360] , ],   // alpha1 (524)
[ [665,641], [641,551], [551,603], [603,665] , ],   // alpha1 (525)
[ [664,642], [642,641], [641,665], [665,664] , ],   // alpha1 (526)
[ [663,643], [643,642], [642,664], [664,663] , ],   // alpha1 (527)
[ [644,662], [662,657], [657,645], [645,644] , ],   // alpha1 (528)
[ [662,644], [644,643], [643,663], [663,662] , ],   // alpha1 (529)
[ [803,817], [817,816], [816,804], [804,803] , ],   // alpha1 (530)
[ [802,818], [818,817], [817,803], [803,802] , ],   // alpha1 (531)
[ [801,819], [819,818], [818,802], [802,801] , ],   // alpha1 (532)
[ [819,801], [801,800], [800,820], [820,819] , ],   // alpha1 (533)
[ [864,843], [843,804], [804,816], [816,864] , ],   // alpha1 (534)
[ [844,872], [872,871], [871,845], [845,844] , ],   // alpha1 (535)
[ [872,844], [844,843], [843,864], [864,872] , ],   // alpha1 (536)
[ [754,782], [782,764], [764,753], [753,754] , ],   // alpha1 (537)
[ [754,782], [782,781], [781,755], [755,754] , ],   // alpha1 (538)
[ [761,777], [777,725], [725,703], [703,761] , ],   // alpha1 (539)
[ [760,778], [778,777], [777,761], [761,760] , ],   // alpha1 (540)
[ [759,779], [779,778], [778,760], [760,759] , ],   // alpha1 (541)
[ [779,759], [759,758], [758,780], [780,779] , ],   // alpha1 (542)
[ [724,704], [704,703], [703,725], [725,724] , ],   // alpha1 (543)
[ [723,705], [705,704], [704,724], [724,723] , ],   // alpha1 (544)
[ [706,722], [722,721], [721,707], [707,706] , ],   // alpha1 (545)
[ [722,706], [706,705], [705,723], [723,722] , ],   // alpha1 (546)
[ [487,473], [473,472], [472,488], [488,487] , ],   // alpha1 (547)
[ [486,474], [474,473], [473,487], [487,486] , ],   // alpha1 (548)
[ [475,485], [485,484], [484,462], [462,475] , ],   // alpha1 (549)
[ [485,475], [475,474], [474,486], [486,485] , ],   // alpha1 (550)
[ [520,512], [512,462], [462,484], [484,520] , ],   // alpha1 (551)
[ [519,513], [513,512], [512,520], [520,519] , ],   // alpha1 (552)
[ [514,518], [518,525], [525,515], [515,514] , ],   // alpha1 (553)
[ [518,514], [514,513], [513,519], [519,518] , ],   // alpha1 (554)
[ [431,439], [439,160], [160,143], [143,431] , ],   // alpha1 (555)
[ [430,440], [440,439], [439,431], [431,430] , ],   // alpha1 (556)
[ [429,441], [441,440], [440,430], [430,429] , ],   // alpha1 (557)
[ [441,429], [429,428], [428,442], [442,441] , ],   // alpha1 (558)
[ [159,144], [144,143], [143,160], [160,159] , ],   // alpha1 (559)
[ [158,145], [145,144], [144,159], [159,158] , ],   // alpha1 (560)
[ [146,157], [157,156], [156,147], [147,146] , ],   // alpha1 (561)
[ [157,146], [146,145], [145,158], [158,157] , ],   // alpha1 (562)
[ [199,186], [186,185], [185,200], [200,199] , ],   // alpha1 (563)
[ [198,187], [187,186], [186,199], [199,198] , ],   // alpha1 (564)
[ [188,197], [197,196], [196,189], [189,188] , ],   // alpha1 (565)
[ [197,188], [188,187], [187,198], [198,197] , ],   // alpha1 (566)
[ [228,233], [233,232], [232,229], [229,228] , ],   // alpha1 (567)
[ [233,228], [228,227], [227,234], [234,233] , ],   // alpha1 (568)
[ [235,226], [226,189], [189,196], [196,235] , ],   // alpha1 (569)
[ [234,227], [227,226], [226,235], [235,234] , ],   // alpha1 (570)
[ [25,14], [14,13], [13,26], [26,25] , ],   // alpha1 (571)
[ [16,23], [23,22], [22,17], [17,16] , ],   // alpha1 (572)
[ [15,24], [24,23], [23,16], [16,15] , ],   // alpha1 (573)
[ [24,15], [15,14], [14,25], [25,24] , ],   // alpha1 (574)
[ [1003,997], [997,17], [17,22], [22,1003] , ],   // alpha1 (575)
[ [1004,996], [996,997], [997,1003], [1003,1004] , ],   // alpha1 (576)
[ [996,1004], [1004,1002], [1002,995], [995,996] , ],   // alpha1 (577)
[ [1005,1006], [1006,1007], [1007,1008], [1008,1005] , ],   // alpha1 (578)
[ [1009,1010], [1010,1011], [1011,1012], [1012,1009] , ],   // alpha1 (579)
[ [1013,1009], [1009,1012], [1012,1014], [1014,1013] , ],   // alpha1 (580)
[ [1015,1016], [1016,1017], [1017,1018], [1018,1015] , ],   // alpha1 (581)
[ [1016,1005], [1005,1008], [1008,1017], [1017,1016] , ],   // alpha1 (582)
[ [1010,1015], [1015,1018], [1018,1011], [1011,1010] , ],   // alpha1 (583)
[ [131,120], [120,259], [259,273], [273,131] , ],   // alpha1 (584)
[ [65,78], [78,77], [77,66], [66,65] , ],   // alpha1 (585)
[ [1019,1020], [1020,1021], [1021,1022], [1022,1019] , ],   // alpha1 (586)
[ [1020,1023], [1023,1024], [1024,1021], [1021,1020] , ],   // alpha1 (587)
[ [1025,1026], [1026,1027], [1027,1028], [1028,1025] , ],   // alpha1 (588)
[ [1023,621], [621,1029], [1029,1024], [1024,1023] , ],   // alpha1 (589)
[ [1030,1025], [1025,1028], [1028,1031], [1031,1030] , ],   // alpha1 (590)
[ [1026,603], [603,551], [551,1027], [1027,1026] , ],   // alpha1 (591)
[ [1031,1029], [1029,621], [621,1030], [1030,1031] , ],   // alpha1 (592)
[ [1032,1033], [1033,1034], [1034,1035], [1035,1032] , ],   // alpha1 (593)
[ [1022,1034], [1034,1033], [1033,1019], [1019,1022] , ],   // alpha1 (594)
[ [1036,1037], [1037,382], [382,385], [385,1036] , ],   // alpha1 (595)
[ [1038,1039], [1039,1040], [1040,1041], [1041,1038] , ],   // alpha1 (596)
[ [1042,1043], [1043,1044], [1044,1045], [1045,1042] , ],   // alpha1 (597)
[ [1046,1044], [1044,1043], [1043,1047], [1047,1046] , ],   // alpha1 (598)
[ [1039,1048], [1048,1049], [1049,1040], [1040,1039] , ],   // alpha1 (599)
[ [1048,1042], [1042,1045], [1045,1049], [1049,1048] , ],   // alpha1 (600)
[ [1050,1051], [1051,1052], [1052,1053], [1053,1050] , ],   // alpha1 (601)
[ [1051,1050], [1050,1038], [1038,1041], [1041,1051] , ],   // alpha1 (602)

],



[
//BuildingPart27
[ [1072,1073],[1073,1074],[1074,1075],[1075,1072],],// alpha1 (616)
[ [1076,1077],[1077,1078],[1078,1079],[1079,1080],[1080,1081],[1081,1082],[1082,1073],[1073,1072],[1072,1083],[1083,1084],[1084,1085],[1085,1002],[1002,1004],[1004,1003],[1003,22],[22,33],[33,1086],[1086,1087],[1087,1076],],// alpha1 (617)
[ [1087,1086],[1086,1088],[1088,1089],[1089,1087],],// alpha1 (618)
[ [1077,1076],[1076,1090],[1090,1091],[1091,1077],],// alpha1 (619)
[ [1076,1087],[1087,1089],[1089,1090],[1090,1076],],// alpha1 (620)
[ [1084,1083],[1083,1092],[1092,1093],[1093,1084],],// alpha1 (621)
[ [1094,1095],[1095,1079],[1079,1078],[1078,1094],],// alpha1 (622)
[ [1085,1084],[1084,1093],[1093,1096],[1096,1085],],// alpha1 (623)
[ [1073,1082],[1082,1097],[1097,1074],[1074,1073],],// alpha1 (624)
[ [1078,1077],[1077,1091],[1091,1094],[1094,1078],],// alpha1 (625)
[ [1083,1072],[1072,1075],[1075,1092],[1092,1083],],// alpha1 (626)
[ [1096,995],[995,1002],[1002,1085],[1085,1096],],// alpha1 (627)
[ [1098,1099],[1099,1095],[1095,1094],[1094,1091],[1091,1090],[1090,1089],[1089,1088],[1088,18],[18,17],[17,997],[997,996],[996,995],[995,1096],[1096,1093],[1093,1092],[1092,1075],[1075,1074],[1074,1097],[1097,1098],],// alpha1 (628)
[ [1081,1098],[1098,1097],[1097,1082],[1082,1081],],// alpha1 (629)
[ [1099,1080],[1080,1079],[1079,1095],[1095,1099],],// alpha1 (630)
[ [1080,1099],[1099,1098],[1098,1081],[1081,1080],],// alpha1 (631)
[ [1086,1100],[1100,1101],[1101,1088],[1088,1086],],// alpha1 (632)
[ [1102,1101],[1101,1100],[1100,1103],[1103,1102],],// alpha1 (633)
[ [1104,1105],[1105,1106],[1106,1107],[1107,1104],],// alpha1 (634)
[ [1105,1108],[1108,1109],[1109,1106],[1106,1105],],// alpha1 (635)
[ [1108,1110],[1110,1111],[1111,1109],[1109,1108],],// alpha1 (636)

],

[
//BuildingPart25
[ [1054,1055],[1055,1056],[1056,1057],[1057,1058],[1058,1054],],// alpha1 (603)
[ [1059,1060],[1060,1058],[1058,1057],[1057,1059],],// alpha1 (604)
[ [1061,1060],[1060,1058],[1058,1054],[1054,1061],],// alpha1 (605)
[ [1062,1063],[1063,1055],[1055,1056],[1056,1062],],// alpha1 (606)
[ [1063,1061],[1061,1054],[1054,1055],[1055,1063],],// alpha1 (607)
[ [1057,1056],[1056,1062],[1062,1059],[1059,1057],],// alpha1 (608)
[ [1059,1062],[1062,1063],[1063,1061],[1061,1060],[1060,1059],],// alpha1 (609)

],

[
//BuildingPart26
[ [1064,1065],[1065,1066],[1066,1067],[1067,1064],],// alpha1 (610)
[ [1064,1065],[1065,1068],[1068,1069],[1069,1064],],// alpha1 (611)
[ [1070,1071],[1071,1067],[1067,1066],[1066,1070],],// alpha1 (612)
[ [1071,1069],[1069,1064],[1064,1067],[1067,1071],],// alpha1 (613)
[ [1071,1070],[1070,1068],[1068,1069],[1069,1071],],// alpha1 (614)
[ [1068,1070],[1070,1066],[1066,1065],[1065,1068],],// alpha1 (615)

],

[
//BuildingPart23
[ [931,932],[932,933],[933,934],[934,931],],// alpha1 (460)
[ [935,271],[271,254],[254,936],[936,935],],// alpha1 (461)
[ [937,931],[931,934],[934,938],[938,937],],// alpha1 (462)
[ [939,940],[940,941],[941,942],[942,939],],// alpha1 (463)
[ [940,943],[943,944],[944,941],[941,940],],// alpha1 (464)
[ [945,939],[939,942],[942,946],[946,945],],// alpha1 (465)
[ [932,947],[947,948],[948,933],[933,932],],// alpha1 (466)
[ [949,937],[937,938],[938,950],[950,949],],// alpha1 (467)
[ [946,951],[951,952],[952,945],[945,946],],// alpha1 (468)
[ [943,953],[953,954],[954,944],[944,943],],// alpha1 (469)
[ [953,955],[955,956],[956,954],[954,953],],// alpha1 (470)
[ [957,958],[958,959],[959,960],[960,961],[961,955],[955,953],[953,943],[943,940],[940,939],[939,945],[945,952],[952,947],[947,932],[932,931],[931,937],[937,949],[949,270],[270,271],[271,935],[935,962],[962,963],[963,964],[964,965],[965,957],],// alpha1 (471)
[ [955,961],[961,966],[966,956],[956,955],],// alpha1 (472)
[ [961,960],[960,967],[967,966],[966,961],],// alpha1 (473)
[ [967,968],[968,969],[969,970],[970,971],[971,972],[972,973],[973,974],[974,936],[936,254],[254,265],[265,950],[950,938],[938,934],[934,933],[933,948],[948,951],[951,946],[946,942],[942,941],[941,944],[944,954],[954,956],[956,966],[966,967],],// alpha1 (474)
[ [936,974],[974,962],[962,935],[935,936],],// alpha1 (475)
[ [960,959],[959,968],[968,967],[967,960],],// alpha1 (476)
[ [948,947],[947,952],[952,951],[951,948],],// alpha1 (477)
[ [975,976],[976,977],[977,978],[978,975],],// alpha1 (478)
[ [979,978],[978,975],[975,980],[980,979],],// alpha1 (479)
[ [981,982],[982,983],[983,984],[984,981],],// alpha1 (480)
[ [985,986],[986,987],[987,988],[988,985],],// alpha1 (481)
[ [986,989],[989,990],[990,987],[987,986],],// alpha1 (482)
[ [989,981],[981,984],[984,990],[990,989],],// alpha1 (483)
[ [991,985],[985,988],[988,992],[992,991],],// alpha1 (484)
[ [992,993],[993,994],[994,991],[991,992],],// alpha1 (485)

],

[
//BuildingPart39
[ [1208,1209],[1209,1210],[1210,1211],[1211,1208],],// alpha1 (707)
[ [1212,1213],[1213,1214],[1214,1215],[1215,1212],],// alpha1 (708)
[ [1212,1215],[1215,1209],[1209,1208],[1208,1212],],// alpha1 (709)
[ [1214,1215],[1215,1209],[1209,1210],[1210,1214],],// alpha1 (710)
[ [1213,1212],[1212,1208],[1208,1211],[1211,1213],],// alpha1 (711)
[ [1214,1213],[1213,1211],[1211,1210],[1210,1214],],// alpha1 (712)

],

[
//BuildingPart2
[ [4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,4],],// alpha1 (1)
[ [19,20],[20,10],[10,9],[9,19],],// alpha1 (2)
[ [21,19],[19,9],[9,8],[8,21],],// alpha1 (3)
[ [22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,20],[20,19],[19,21],[21,29],[29,30],[30,31],[31,32],[32,33],[33,22],],// alpha1 (4)
[ [29,21],[21,8],[8,7],[7,29],],// alpha1 (5)
[ [27,26],[26,13],[13,12],[12,27],],// alpha1 (6)
[ [32,4],[4,18],[18,33],[33,32],],// alpha1 (7)
[ [7,6],[6,30],[30,29],[29,7],],// alpha1 (8)
[ [31,5],[5,4],[4,32],[32,31],],// alpha1 (9)
[ [5,31],[31,30],[30,6],[6,5],],// alpha1 (10)
[ [18,17],[17,22],[22,33],[33,18],],// alpha1 (11)
[ [34,35],[35,36],[36,37],[37,34],],// alpha1 (12)
[ [38,34],[34,37],[37,39],[39,38],],// alpha1 (13)
[ [40,41],[41,42],[42,43],[43,40],],// alpha1 (14)
[ [44,45],[45,46],[46,47],[47,44],],// alpha1 (15)
[ [48,40],[40,43],[43,49],[49,48],],// alpha1 (16)
[ [47,48],[48,49],[49,44],[44,47],],// alpha1 (17)

],

[
//BuildingPart28
[ [1112,1113],[1113,1114],[1114,1115],[1115,1112],],// alpha1 (637)
[ [1112,1115],[1115,1116],[1116,1117],[1117,1112],],// alpha1 (638)
[ [1113,1114],[1114,1118],[1118,1119],[1119,1113],],// alpha1 (639)
[ [1117,1119],[1119,1118],[1118,1116],[1116,1117],],// alpha1 (640)
[ [1113,1119],[1119,1117],[1117,1112],[1112,1113],],// alpha1 (641)
[ [1115,1116],[1116,1118],[1118,1114],[1114,1115],],// alpha1 (642)

],


[
//BuildingPart8
[ [254,255],[255,256],[256,257],[257,258],[258,259],[259,120],[120,119],[119,260],[260,261],[261,262],[262,263],[263,264],[264,265],[265,254],],// alpha1 (116)
[ [266,267],[267,261],[261,260],[260,266],],// alpha1 (117)
[ [268,269],[269,264],[264,263],[263,268],],// alpha1 (118)
[ [269,270],[270,265],[265,264],[264,269],],// alpha1 (119)
[ [271,272],[272,255],[255,254],[254,271],],// alpha1 (120)
[ [131,273],[273,274],[274,275],[275,276],[276,272],[272,271],[271,270],[270,269],[269,268],[268,277],[277,267],[267,266],[266,124],[124,131],],// alpha1 (121)
[ [272,276],[276,256],[256,255],[255,272],],// alpha1 (122)
[ [254,265],[265,270],[270,271],[271,254],],// alpha1 (123)
[ [262,277],[277,268],[268,263],[263,262],],// alpha1 (124)
[ [277,262],[262,261],[261,267],[267,277],],// alpha1 (125)
[ [278,279],[279,280],[280,281],[281,278],],// alpha1 (126)
[ [282,283],[283,284],[284,285],[285,282],],// alpha1 (127)
[ [285,286],[286,287],[287,282],[282,285],],// alpha1 (128)
[ [283,278],[278,281],[281,284],[284,283],],// alpha1 (129)
[ [288,289],[289,290],[290,291],[291,288],],// alpha1 (130)
[ [288,292],[292,293],[293,291],[291,288],],// alpha1 (131)

],
[
//BuildingPart40
[ [1216,1217],[1217,1218],[1218,1219],[1219,1216],],// alpha1 (713)
[ [1220,1221],[1221,1216],[1216,1219],[1219,1220],],// alpha1 (714)
[ [1222,1223],[1223,1217],[1217,1218],[1218,1222],],// alpha1 (715)
[ [1218,1219],[1219,1220],[1220,1222],[1222,1218],],// alpha1 (716)
[ [1221,1223],[1223,1217],[1217,1216],[1216,1221],],// alpha1 (717)
[ [1223,1221],[1221,1220],[1220,1222],[1222,1223],],// alpha1 (718)

],
[
//BuildingPart7
[ [220,11],[11,10],[10,221],[221,222],[222,223],[223,224],[224,225],[225,176],[176,189],[189,226],[226,227],[227,228],[228,229],[229,220],],// alpha1 (100)
[ [230,28],[28,11],[11,220],[220,230],],// alpha1 (101)
[ [20,231],[231,221],[221,10],[10,20],],// alpha1 (102)
[ [231,20],[20,28],[28,230],[230,232],[232,233],[233,234],[234,235],[235,196],[196,193],[193,236],[236,237],[237,238],[238,239],[239,231],],// alpha1 (103)
[ [239,238],[238,223],[223,222],[222,239],],// alpha1 (104)
[ [238,237],[237,224],[224,223],[223,238],],// alpha1 (105)
[ [231,239],[239,222],[222,221],[221,231],],// alpha1 (106)
[ [220,229],[229,232],[232,230],[230,220],],// alpha1 (107)
[ [10,11],[11,28],[28,20],[20,10],],// alpha1 (108)
[ [237,236],[236,225],[225,224],[224,237],],// alpha1 (109)
[ [176,225],[225,236],[236,193],[193,176],],// alpha1 (110)
[ [240,241],[241,242],[242,243],[243,240],],// alpha1 (111)
[ [243,244],[244,245],[245,240],[240,243],],// alpha1 (112)
[ [246,247],[247,248],[248,249],[249,246],],// alpha1 (113)
[ [247,250],[250,251],[251,248],[248,247],],// alpha1 (114)
[ [250,252],[252,253],[253,251],[251,250],],// alpha1 (115)

],
[
//BuildingPart29
[ [1120,1121],[1121,1122],[1122,1123],[1123,1120],],// alpha1 (643)
[ [1121,1122],[1122,1124],[1124,1125],[1125,1121],],// alpha1 (644)
[ [1123,1126],[1126,1124],[1124,1122],[1122,1123],],// alpha1 (645)
[ [1127,1126],[1126,1123],[1123,1120],[1120,1127],],// alpha1 (646)
[ [1127,1120],[1120,1121],[1121,1125],[1125,1127],],// alpha1 (647)
[ [1126,1127],[1127,1125],[1125,1124],[1124,1126],],// alpha1 (648)

],
[
//BuildingPart4
[ [112,113],[113,114],[114,115],[115,65],[65,64],[64,112],],// alpha1 (39)
[ [112,116],[116,117],[117,63],[63,62],[62,118],[118,119],[119,120],[120,121],[121,122],[122,113],[113,112],],// alpha1 (40)
[ [72,123],[123,118],[118,62],[62,72],],// alpha1 (41)
[ [123,124],[124,119],[119,118],[118,123],],// alpha1 (42)
[ [125,126],[126,116],[116,117],[117,125],],// alpha1 (43)
[ [126,127],[127,112],[112,116],[116,126],],// alpha1 (44)
[ [80,125],[125,117],[117,63],[63,80],],// alpha1 (45)
[ [127,126],[126,2],[2,79],[79,127],],// alpha1 (46)
[ [125,80],[80,2],[2,126],[126,125],],// alpha1 (47)
[ [127,79],[79,78],[78,128],[128,129],[129,130],[130,127],],// alpha1 (48)
[ [112,127],[127,130],[130,113],[113,112],],// alpha1 (49)
[ [127,112],[112,64],[64,79],[79,127],],// alpha1 (50)
[ [64,3],[3,1],[1,116],[116,112],[112,64],],// alpha1 (51)
[ [1,116],[116,126],[126,2],[2,1],],// alpha1 (52)
[ [131,124],[124,123],[123,72],[72,80],[80,125],[125,126],[126,127],[127,130],[130,132],[132,133],[133,131],],// alpha1 (53)
[ [63,117],[117,116],[116,1],[1,3],[3,63],],// alpha1 (54)
[ [132,122],[122,113],[113,130],[130,132],],// alpha1 (55)
[ [122,132],[132,133],[133,121],[121,122],],// alpha1 (56)
[ [114,129],[129,128],[128,115],[115,114],],// alpha1 (57)
[ [114,129],[129,130],[130,113],[113,114],],// alpha1 (58)
[ [120,119],[119,124],[124,131],[131,120],],// alpha1 (59)
[ [120,131],[131,133],[133,121],[121,120],],// alpha1 (60)
[ [64,65],[65,78],[78,79],[79,64],],// alpha1 (61)
[ [64,79],[79,2],[2,3],[3,64],],// alpha1 (62)
[ [78,65],[65,115],[115,128],[128,78],],// alpha1 (63)
[ [63,80],[80,72],[72,62],[62,63],],// alpha1 (64)
[ [80,63],[63,3],[3,2],[2,80],],// alpha1 (65)

],

[
//BuildingPart6
[ [176,177],[177,178],[178,179],[179,180],[180,181],[181,182],[182,136],[136,135],[135,183],[183,184],[184,185],[185,186],[186,187],[187,188],[188,189],[189,176],],// alpha1 (82)
[ [190,150],[150,136],[136,182],[182,190],],// alpha1 (83)
[ [191,192],[192,180],[180,179],[179,191],],// alpha1 (84)
[ [193,194],[194,177],[177,176],[176,193],],// alpha1 (85)
[ [192,195],[195,181],[181,180],[180,192],],// alpha1 (86)
[ [195,190],[190,182],[182,181],[181,195],],// alpha1 (87)
[ [196,197],[197,198],[198,199],[199,200],[200,201],[201,202],[202,155],[155,150],[150,190],[190,195],[195,192],[192,191],[191,203],[203,194],[194,193],[193,196],],// alpha1 (88)
[ [202,201],[201,184],[184,183],[183,202],],// alpha1 (89)
[ [201,200],[200,185],[185,184],[184,201],],// alpha1 (90)
[ [178,203],[203,191],[191,179],[179,178],],// alpha1 (91)
[ [203,178],[178,177],[177,194],[194,203],],// alpha1 (92)
[ [176,189],[189,196],[196,193],[193,176],],// alpha1 (93)
[ [204,205],[205,206],[206,207],[207,204],],// alpha1 (94)
[ [208,206],[206,205],[205,209],[209,208],],// alpha1 (95)
[ [210,211],[211,212],[212,213],[213,210],],// alpha1 (96)
[ [213,214],[214,215],[215,210],[210,213],],// alpha1 (97)
[ [216,217],[217,218],[218,219],[219,216],],// alpha1 (98)
[ [214,216],[216,219],[219,215],[215,214],],// alpha1 (99)

],

[
//BuildingPart30
[ [1128,1129],[1129,1130],[1130,1131],[1131,1128],],// alpha1 (649)
[ [1132,1133],[1133,1131],[1131,1128],[1128,1132],],// alpha1 (650)
[ [1128,1129],[1129,1134],[1134,1132],[1132,1128],],// alpha1 (651)
[ [1134,1135],[1135,1130],[1130,1129],[1129,1134],],// alpha1 (652)
[ [1135,1133],[1133,1131],[1131,1130],[1130,1135],],// alpha1 (653)
[ [1133,1135],[1135,1134],[1134,1132],[1132,1133],],// alpha1 (654)

],

[
//BuildingPart3
[ [50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,3],[3,64],[64,65],[65,66],[66,67],[67,50],],// alpha1 (18)
[ [68,69],[69,53],[53,52],[52,68],],// alpha1 (19)
[ [52,51],[51,70],[70,68],[68,52],],// alpha1 (20)
[ [71,72],[72,62],[62,61],[61,71],],// alpha1 (21)
[ [73,74],[74,69],[69,68],[68,70],[70,75],[75,76],[76,77],[77,78],[78,79],[79,2],[2,80],[80,72],[72,71],[71,81],[81,82],[82,83],[83,84],[84,85],[85,73],],// alpha1 (22)
[ [73,85],[85,56],[56,55],[55,73],],// alpha1 (23)
[ [84,83],[83,58],[58,57],[57,84],],// alpha1 (24)
[ [83,82],[82,59],[59,58],[58,83],],// alpha1 (25)
[ [81,71],[71,61],[61,60],[60,81],],// alpha1 (26)
[ [85,84],[84,57],[57,56],[56,85],],// alpha1 (27)
[ [81,60],[60,59],[59,82],[82,81],],// alpha1 (28)
[ [86,87],[87,88],[88,89],[89,86],],// alpha1 (29)
[ [86,90],[90,91],[91,89],[89,86],],// alpha1 (30)
[ [92,93],[93,94],[94,95],[95,92],],// alpha1 (31)
[ [96,97],[97,98],[98,99],[99,96],],// alpha1 (32)
[ [93,96],[96,99],[99,94],[94,93],],// alpha1 (33)
[ [97,100],[100,101],[101,98],[98,97],],// alpha1 (34)
[ [102,103],[103,104],[104,105],[105,102],],// alpha1 (35)
[ [103,106],[106,107],[107,104],[104,103],],// alpha1 (36)
[ [108,109],[109,110],[110,111],[111,108],],// alpha1 (37)
[ [109,107],[107,106],[106,110],[110,109],],// alpha1 (38)

],

[
//BuildingPart41
[ [1224,1225],[1225,1226],[1226,1227],[1227,1224],],// alpha1 (719)
[ [1225,1226],[1226,1228],[1228,1229],[1229,1225],],// alpha1 (720)
[ [1230,1231],[1231,1228],[1228,1229],[1229,1230],],// alpha1 (721)
[ [1231,1230],[1230,1224],[1224,1227],[1227,1231],],// alpha1 (722)
[ [1228,1231],[1231,1227],[1227,1226],[1226,1228],],// alpha1 (723)
[ [1230,1229],[1229,1225],[1225,1224],[1224,1230],],// alpha1 (724)

],

[
//BuildingPart5
[ [134,135],[135,136],[136,137],[137,138],[138,139],[139,140],[140,141],[141,142],[142,143],[143,144],[144,145],[145,146],[146,147],[147,134],],// alpha1 (66)
[ [148,149],[149,141],[141,140],[140,148],],// alpha1 (67)
[ [150,151],[151,137],[137,136],[136,150],],// alpha1 (68)
[ [152,148],[148,140],[140,139],[139,152],],// alpha1 (69)
[ [153,152],[152,139],[139,138],[138,153],],// alpha1 (70)
[ [151,153],[153,138],[138,137],[137,151],],// alpha1 (71)
[ [154,155],[155,135],[135,134],[134,154],],// alpha1 (72)
[ [155,154],[154,156],[156,157],[157,158],[158,159],[159,160],[160,161],[161,149],[149,148],[148,152],[152,153],[153,151],[151,150],[150,155],],// alpha1 (73)
[ [134,147],[147,156],[156,154],[154,134],],// alpha1 (74)
[ [136,135],[135,155],[155,150],[150,136],],// alpha1 (75)
[ [161,142],[142,141],[141,149],[149,161],],// alpha1 (76)
[ [162,163],[163,164],[164,165],[165,162],],// alpha1 (77)
[ [166,162],[162,165],[165,167],[167,166],],// alpha1 (78)
[ [168,169],[169,170],[170,171],[171,168],],// alpha1 (79)
[ [172,168],[168,171],[171,173],[173,172],],// alpha1 (80)
[ [169,174],[174,175],[175,170],[170,169],],// alpha1 (81)

],
[
//BuildingPart31
[ [1136,1137],[1137,1138],[1138,1139],[1139,1136],],// alpha1 (655)
[ [1140,1141],[1141,1137],[1137,1136],[1136,1140],],// alpha1 (656)
[ [1140,1142],[1142,1143],[1143,1141],[1141,1140],],// alpha1 (657)
[ [1142,1140],[1140,1136],[1136,1139],[1139,1142],],// alpha1 (658)
[ [1143,1142],[1142,1139],[1139,1138],[1138,1143],],// alpha1 (659)
[ [1137,1138],[1138,1143],[1143,1141],[1141,1137],],// alpha1 (660)

],
[
//BuildingPart9
[ [294,54],[54,53],[53,295],[295,296],[296,297],[297,298],[298,299],[299,300],[300,301],[301,302],[302,303],[303,304],[304,305],[305,294],],// alpha1 (132)
[ [306,307],[307,305],[305,304],[304,306],],// alpha1 (133)
[ [308,309],[309,310],[310,311],[311,312],[312,69],[69,74],[74,313],[313,307],[307,306],[306,314],[314,315],[315,316],[316,317],[317,308],],// alpha1 (134)
[ [307,313],[313,294],[294,305],[305,307],],// alpha1 (135)
[ [69,312],[312,295],[295,53],[53,69],],// alpha1 (136)
[ [316,315],[315,302],[302,301],[301,316],],// alpha1 (137)
[ [313,74],[74,54],[54,294],[294,313],],// alpha1 (138)
[ [312,311],[311,296],[296,295],[295,312],],// alpha1 (139)
[ [53,54],[54,74],[74,69],[69,53],],// alpha1 (140)
[ [303,314],[314,306],[306,304],[304,303],],// alpha1 (141)
[ [314,303],[303,302],[302,315],[315,314],],// alpha1 (142)
[ [318,319],[319,320],[320,321],[321,318],],// alpha1 (143)
[ [322,319],[319,320],[320,323],[323,322],],// alpha1 (144)
[ [324,325],[325,326],[326,327],[327,324],],// alpha1 (145)
[ [327,328],[328,329],[329,324],[324,327],],// alpha1 (146)
[ [325,330],[330,331],[331,326],[326,325],],// alpha1 (147)

],
[
//BuildingPart42
[ [1232,1233],[1233,1234],[1234,1235],[1235,1232],],// alpha1 (725)
[ [1236,1237],[1237,1232],[1232,1235],[1235,1236],],// alpha1 (726)
[ [1238,1239],[1239,1234],[1234,1233],[1233,1238],],// alpha1 (727)
[ [1234,1235],[1235,1236],[1236,1239],[1239,1234],],// alpha1 (728)
[ [1237,1238],[1238,1233],[1233,1232],[1232,1237],],// alpha1 (729)
[ [1238,1237],[1237,1236],[1236,1239],[1239,1238],],// alpha1 (730)

],
[
//BuildingPart12
[ [422,423],[423,424],[424,425],[425,426],[426,427],[427,428],[428,429],[429,430],[430,431],[431,143],[143,142],[142,432],[432,433],[433,422],],// alpha1 (185)
[ [161,434],[434,432],[432,142],[142,161],],// alpha1 (186)
[ [435,436],[436,425],[425,424],[424,435],],// alpha1 (187)
[ [437,435],[435,424],[424,423],[423,437],],// alpha1 (188)
[ [438,437],[437,423],[423,422],[422,438],],// alpha1 (189)
[ [160,439],[439,440],[440,441],[441,442],[442,443],[443,444],[444,436],[436,435],[435,437],[437,438],[438,445],[445,434],[434,161],[161,160],],// alpha1 (190)
[ [443,442],[442,428],[428,427],[427,443],],// alpha1 (191)
[ [433,445],[445,438],[438,422],[422,433],],// alpha1 (192)
[ [445,433],[433,432],[432,434],[434,445],],// alpha1 (193)
[ [142,143],[143,160],[160,161],[161,142],],// alpha1 (194)
[ [446,447],[447,448],[448,449],[449,446],],// alpha1 (195)
[ [447,450],[450,451],[451,448],[448,447],],// alpha1 (196)
[ [452,453],[453,454],[454,455],[455,452],],// alpha1 (197)
[ [455,456],[456,457],[457,452],[452,455],],// alpha1 (198)
[ [456,458],[458,459],[459,457],[457,456],],// alpha1 (199)
[ [458,460],[460,461],[461,459],[459,458],],// alpha1 (200)

],
[
//BuildingPart32
[ [1144,1145],[1145,1146],[1146,1147],[1147,1144],],// alpha1 (661)
[ [1148,1149],[1149,1146],[1146,1145],[1145,1148],],// alpha1 (662)
[ [1148,1150],[1150,1151],[1151,1149],[1149,1148],],// alpha1 (663)
[ [1151,1149],[1149,1146],[1146,1147],[1147,1151],],// alpha1 (664)
[ [1151,1150],[1150,1144],[1144,1147],[1147,1151],],// alpha1 (665)
[ [1150,1148],[1148,1145],[1145,1144],[1144,1150],],// alpha1 (666)

],
[
//BuildingPart11
[ [386,387],[387,334],[334,333],[333,388],[388,389],[389,390],[390,391],[391,392],[392,301],[301,300],[300,393],[393,394],[394,395],[395,386],],// alpha1 (169)
[ [396,397],[397,391],[391,390],[390,396],],// alpha1 (170)
[ [398,364],[364,334],[334,387],[387,398],],// alpha1 (171)
[ [399,396],[396,390],[390,389],[389,399],],// alpha1 (172)
[ [397,400],[400,392],[392,391],[391,397],],// alpha1 (173)
[ [401,399],[399,389],[389,388],[388,401],],// alpha1 (174)
[ [399,401],[401,365],[365,364],[364,398],[398,402],[402,403],[403,404],[404,405],[405,317],[317,316],[316,400],[400,397],[397,396],[396,399],],// alpha1 (175)
[ [387,386],[386,402],[402,398],[398,387],],// alpha1 (176)
[ [316,317],[317,300],[300,301],[301,316],],// alpha1 (177)
[ [392,400],[400,316],[316,301],[301,392],],// alpha1 (178)
[ [406,407],[407,408],[408,409],[409,406],],// alpha1 (179)
[ [410,409],[409,406],[406,411],[411,410],],// alpha1 (180)
[ [412,413],[413,414],[414,415],[415,412],],// alpha1 (181)
[ [416,412],[412,415],[415,417],[417,416],],// alpha1 (182)
[ [418,416],[416,417],[417,419],[419,418],],// alpha1 (183)
[ [413,420],[420,421],[421,414],[414,413],],// alpha1 (184)

],
[
//BuildingPart43
[ [1240,1241],[1241,1242],[1242,1243],[1243,1240],],// alpha1 (731)
[ [1244,1245],[1245,1240],[1240,1243],[1243,1244],],// alpha1 (732)
[ [1245,1246],[1246,1241],[1241,1240],[1240,1245],],// alpha1 (733)
[ [1242,1243],[1243,1244],[1244,1247],[1247,1242],],// alpha1 (734)
[ [1246,1245],[1245,1244],[1244,1247],[1247,1246],],// alpha1 (735)
[ [1246,1247],[1247,1242],[1242,1241],[1241,1246],],// alpha1 (736)

],
[
//BuildingPart14
[ [506,426],[426,425],[425,507],[507,508],[508,509],[509,510],[510,511],[511,463],[463,462],[462,512],[512,513],[513,514],[514,515],[515,506],],// alpha1 (217)
[ [436,516],[516,507],[507,425],[425,436],],// alpha1 (218)
[ [517,444],[444,426],[426,506],[506,517],],// alpha1 (219)
[ [518,519],[519,520],[520,484],[484,483],[483,521],[521,522],[522,523],[523,524],[524,516],[516,436],[436,444],[444,517],[517,525],[525,518],],// alpha1 (220)
[ [516,524],[524,508],[508,507],[507,516],],// alpha1 (221)
[ [523,522],[522,510],[510,509],[509,523],],// alpha1 (222)
[ [524,523],[523,509],[509,508],[508,524],],// alpha1 (223)
[ [522,521],[521,511],[511,510],[510,522],],// alpha1 (224)
[ [506,515],[515,525],[525,517],[517,506],],// alpha1 (225)
[ [425,426],[426,444],[444,436],[436,425],],// alpha1 (226)
[ [511,521],[521,483],[483,463],[463,511],],// alpha1 (227)
[ [526,527],[527,528],[528,529],[529,526],],// alpha1 (228)
[ [530,526],[526,529],[529,531],[531,530],],// alpha1 (229)
[ [532,533],[533,534],[534,535],[535,532],],// alpha1 (230)
[ [536,537],[537,538],[538,539],[539,536],],// alpha1 (231)
[ [537,532],[532,535],[535,538],[538,537],],// alpha1 (232)

],
[
//BuildingPart33
[ [1152,1153],[1153,1154],[1154,1155],[1155,1152],],// alpha1 (667)
[ [1156,1157],[1157,1155],[1155,1154],[1154,1156],],// alpha1 (668)
[ [1158,1156],[1156,1154],[1154,1153],[1153,1158],],// alpha1 (669)
[ [1155,1152],[1152,1159],[1159,1157],[1157,1155],],// alpha1 (670)
[ [1159,1158],[1158,1153],[1153,1152],[1152,1159],],// alpha1 (671)
[ [1156,1158],[1158,1159],[1159,1157],[1157,1156],],// alpha1 (672)

],
[
//BuildingPart10
[ [332,333],[333,334],[334,335],[335,336],[336,337],[337,338],[338,339],[339,340],[340,341],[341,342],[342,343],[343,344],[344,345],[345,346],[346,347],[347,348],[348,349],[349,350],[350,332],],// alpha1 (148)
[ [351,352],[352,344],[344,343],[343,351],],// alpha1 (149)
[ [352,353],[353,345],[345,344],[344,352],],// alpha1 (150)
[ [353,354],[354,346],[346,345],[345,353],],// alpha1 (151)
[ [355,354],[354,353],[353,352],[352,351],[351,356],[356,357],[357,358],[358,359],[359,360],[360,361],[361,362],[362,363],[363,364],[364,365],[365,366],[366,367],[367,368],[368,369],[369,355],],// alpha1 (152)
[ [335,334],[334,364],[364,363],[363,335],],// alpha1 (153)
[ [354,355],[355,347],[347,346],[346,354],],// alpha1 (154)
[ [367,366],[366,332],[332,350],[350,367],],// alpha1 (155)
[ [366,365],[365,333],[333,332],[332,366],],// alpha1 (156)
[ [349,348],[348,369],[369,368],[368,349],],// alpha1 (157)
[ [363,362],[362,336],[336,335],[335,363],],// alpha1 (158)
[ [368,367],[367,350],[350,349],[349,368],],// alpha1 (159)
[ [362,361],[361,337],[337,336],[336,362],],// alpha1 (160)
[ [334,333],[333,365],[365,364],[364,334],],// alpha1 (161)
[ [347,355],[355,369],[369,348],[348,347],],// alpha1 (162)
[ [370,371],[371,372],[372,373],[373,370],],// alpha1 (163)
[ [374,375],[375,376],[376,377],[377,374],],// alpha1 (164)
[ [373,378],[378,379],[379,370],[370,373],],// alpha1 (165)
[ [378,374],[374,377],[377,379],[379,378],],// alpha1 (166)
[ [375,380],[380,381],[381,376],[376,375],],// alpha1 (167)
[ [382,383],[383,384],[384,385],[385,382],],// alpha1 (168)

],
[
//BuildingPart44
[ [1248,1249],[1249,1250],[1250,1251],[1251,1248],],// alpha1 (737)
[ [1252,1253],[1253,1248],[1248,1251],[1251,1252],],// alpha1 (738)
[ [1252,1254],[1254,1255],[1255,1253],[1253,1252],],// alpha1 (739)
[ [1254,1252],[1252,1251],[1251,1250],[1250,1254],],// alpha1 (740)
[ [1254,1255],[1255,1249],[1249,1250],[1250,1254],],// alpha1 (741)
[ [1253,1255],[1255,1249],[1249,1248],[1248,1253],],// alpha1 (742)

],

[
//BuildingPart13
[ [462,463],[463,464],[464,465],[465,466],[466,467],[467,468],[468,469],[469,470],[470,471],[471,472],[472,473],[473,474],[474,475],[475,462],],// alpha1 (201)
[ [476,477],[477,468],[468,467],[467,476],],// alpha1 (202)
[ [478,479],[479,471],[471,470],[470,478],],// alpha1 (203)
[ [480,476],[476,467],[467,466],[466,480],],// alpha1 (204)
[ [481,482],[482,483],[483,484],[484,485],[485,486],[486,487],[487,488],[488,479],[479,478],[478,489],[489,477],[477,476],[476,480],[480,481],],// alpha1 (205)
[ [483,482],[482,464],[464,463],[463,483],],// alpha1 (206)
[ [479,488],[488,472],[472,471],[471,479],],// alpha1 (207)
[ [465,481],[481,480],[480,466],[466,465],],// alpha1 (208)
[ [481,465],[465,464],[464,482],[482,481],],// alpha1 (209)
[ [463,462],[462,484],[484,483],[483,463],],// alpha1 (210)
[ [490,491],[491,492],[492,493],[493,490],],// alpha1 (211)
[ [491,494],[494,495],[495,492],[492,491],],// alpha1 (212)
[ [496,497],[497,498],[498,499],[499,496],],// alpha1 (213)
[ [500,501],[501,502],[502,503],[503,500],],// alpha1 (214)
[ [499,504],[504,505],[505,496],[496,499],],// alpha1 (215)
[ [504,500],[500,503],[503,505],[505,504],],// alpha1 (216)

],
[
//BuildingPart34
[ [1160,1161],[1161,1162],[1162,1163],[1163,1160],],// alpha1 (673)
[ [1164,1165],[1165,1162],[1162,1161],[1161,1164],],// alpha1 (674)
[ [1163,1160],[1160,1166],[1166,1167],[1167,1163],],// alpha1 (675)
[ [1166,1164],[1164,1161],[1161,1160],[1160,1166],],// alpha1 (676)
[ [1167,1165],[1165,1162],[1162,1163],[1163,1167],],// alpha1 (677)
[ [1165,1164],[1164,1166],[1166,1167],[1167,1165],],// alpha1 (678)

],

[
//BuildingPart14  alpha2 (14)
[ [540,541], [541,542], [542,543], [543,540], ],   // alpha1 (233)
[ [544,545], [545,541], [541,540], [540,546], [546,547], [547,548], [548,544], ],   // alpha1 (234)
[ [545,549], [549,550], [550,542], [542,541], [541,545], ],   // alpha1 (235)
[ [546,540], [540,543], [543,551], [551,552], [552,553], [553,546], ],   // alpha1 (236)
[ [554,555], [555,548], [548,547], [547,556], [556,557], [557,558], [558,559], [559,560], [560,561], [561,562], [562,563], [563,564], [564,565], [565,554], ],   // alpha1 (237)
[ [566,567], [567,568], [568,569], [569,570], [570,554], [554,565], [565,571], [571,572], [572,573], [573,574], [574,575], [575,576], [576,577], [577,578], [578,579], [579,580], [580,581], [581,566], ],   // alpha1 (238)
[ [555,554], [554,570], [570,569], [569,544], [544,548], [548,555], ],   // alpha1 (239)
[ [545,544], [544,569], [569,568], [568,549], [549,545], ],   // alpha1 (240)
[ [582,583], [583,579], [579,578], [578,582], ],   // alpha1 (241)
[ [584,343], [343,342], [342,581], [581,580], [580,584], ],   // alpha1 (242)
[ [585,586], [586,572], [572,564], [564,563], [563,562], [562,561], [561,585], ],   // alpha1 (243)
[ [564,572], [572,571], [571,565], [565,564], ],   // alpha1 (244)
[ [583,584], [584,580], [580,579], [579,583], ],   // alpha1 (245)
[ [552,587], [587,588], [588,589], [589,590], [590,558], [558,557], [557,556], [556,547], [547,546], [546,553], [553,552], ],   // alpha1 (246)
[ [591,592], [592,558], [558,590], [590,591], ],   // alpha1 (247)
[ [593,594], [594,552], [552,553], [553,593], ],   // alpha1 (248)
[ [593,595], [595,596], [596,597], [597,598], [598,592], [592,591], [591,599], [599,600], [600,594], [594,593], ],   // alpha1 (249)
[ [553,546], [546,595], [595,593], [593,553], ],   // alpha1 (250)
[ [592,598], [598,557], [557,558], [558,592], ],   // alpha1 (251)
[ [598,597], [597,556], [556,557], [557,598], ],   // alpha1 (252)
[ [595,601], [601,540], [540,546], [546,595], ],   // alpha1 (253)
[ [601,602], [602,543], [543,540], [540,601], ],   // alpha1 (254)
[ [602,601], [601,595], [595,593], [593,594], [594,603], [603,602], ],   // alpha1 (255)
[ [600,599], [599,589], [589,588], [588,587], [587,600], ],   // alpha1 (256)
[ [546,547], [547,596], [596,595], [595,546], ],   // alpha1 (257)
[ [599,591], [591,590], [590,589], [589,599], ],   // alpha1 (258)
[ [604,605], [605,560], [560,559], [559,604], ],   // alpha1 (259)
[ [606,607], [607,564], [564,563], [563,606], ],   // alpha1 (260)
[ [608,606], [606,563], [563,562], [562,608], ],   // alpha1 (261)
[ [605,609], [609,561], [561,560], [560,605], ],   // alpha1 (262)
[ [601,610], [610,541], [541,540], [540,601], ],   // alpha1 (263)
[ [610,611], [611,542], [542,541], [541,610], ],   // alpha1 (264)
[ [592,604], [604,559], [559,558], [558,592], ],   // alpha1 (265)
[ [597,596], [596,547], [547,556], [556,597], ],   // alpha1 (266)
[ [610,601], [601,602], [602,611], [611,610], ],   // alpha1 (267)
[ [562,561], [561,609], [609,608], [608,562], ],   // alpha1 (268)
[ [612,613], [613,548], [548,555], [555,612], ],   // alpha1 (269)
[ [609,614], [614,585], [585,561], [561,609], ],   // alpha1 (270)
[ [614,615], [615,586], [586,585], [585,614], ],   // alpha1 (271)
[ [613,596], [596,595], [595,601], [601,610], [610,616], [616,617], [617,613], ],   // alpha1 (272)
[ [545,544], [544,617], [617,616], [616,545], ],   // alpha1 (273)
[ [554,565], [565,618], [618,619], [619,554], ],   // alpha1 (274)
[ [610,616], [616,545], [545,541], [541,610], ],   // alpha1 (275)
[ [616,610], [610,611], [611,620], [620,621], [621,616], ],   // alpha1 (276)
[ [604,592], [592,598], [598,597], [597,596], [596,613], [613,612], [612,619], [619,618], [618,607], [607,606], [606,608], [608,609], [609,605], [605,604], ],   // alpha1 (277)
[ [619,612], [612,555], [555,554], [554,619], ],   // alpha1 (278)
[ [596,613], [613,548], [548,547], [547,596], ],   // alpha1 (279)
[ [622,623], [623,569], [569,570], [570,622], ],   // alpha1 (280)
[ [581,580], [580,624], [624,625], [625,581], ],   // alpha1 (281)
[ [613,617], [617,544], [544,548], [548,613], ],   // alpha1 (282)
[ [626,627], [627,574], [574,573], [573,626], ],   // alpha1 (283)
[ [628,629], [629,578], [578,577], [577,628], ],   // alpha1 (284)
[ [576,575], [575,630], [630,631], [631,576], ],   // alpha1 (285)
[ [632,626], [626,573], [573,572], [572,632], ],   // alpha1 (286)
[ [623,617], [617,544], [544,569], [569,623], ],   // alpha1 (287)
[ [633,632], [632,607], [607,618], [618,633], ],   // alpha1 (288)
[ [633,618], [618,565], [565,571], [571,633], ],   // alpha1 (289)
[ [630,627], [627,574], [574,575], [575,630], ],   // alpha1 (290)
[ [634,635], [635,625], [625,624], [624,636], [636,629], [629,628], [628,631], [631,630], [630,627], [627,626], [626,632], [632,633], [633,618], [618,619], [619,622], [622,623], [623,637], [637,634], ],   // alpha1 (291)
[ [616,621], [621,549], [549,545], [545,616], ],   // alpha1 (292)
[ [607,618], [618,565], [565,564], [564,607], ],   // alpha1 (293)
[ [617,623], [623,622], [622,619], [619,612], [612,613], [613,617], ],   // alpha1 (294)
[ [615,632], [632,572], [572,586], [586,615], ],   // alpha1 (295)
[ [607,632], [632,615], [615,614], [614,609], [609,608], [608,606], [606,607], ],   // alpha1 (296)
[ [623,637], [637,568], [568,569], [569,623], ],   // alpha1 (297)
[ [631,628], [628,577], [577,576], [576,631], ],   // alpha1 (298)
[ [632,633], [633,571], [571,572], [572,632], ],   // alpha1 (299)
[ [607,632], [632,572], [572,564], [564,607], ],   // alpha1 (300)
[ [619,622], [622,570], [570,554], [554,619], ],   // alpha1 (301)
[ [637,623], [623,617], [617,616], [616,621], [621,637], ],   // alpha1 (302)
[ [629,636], [636,579], [579,578], [578,629], ],   // alpha1 (303)
[ [638,636], [636,624], [624,639], [639,638], ],   // alpha1 (304)
[ [640,629], [629,636], [636,638], [638,640], ],   // alpha1 (305)
[ [638,639], [639,584], [584,583], [583,638], ],   // alpha1 (306)
[ [639,351], [351,343], [343,584], [584,639], ],   // alpha1 (307)
[ [636,638], [638,583], [583,579], [579,636], ],   // alpha1 (308)
[ [640,638], [638,583], [583,582], [582,640], ],   // alpha1 (309)
[ [580,579], [579,636], [636,624], [624,580], ],   // alpha1 (310)
[ [639,624], [624,580], [580,584], [584,639], ],   // alpha1 (311)
[ [351,639], [639,624], [624,625], [625,356], [356,351], ],   // alpha1 (312)
[ [629,640], [640,582], [582,578], [578,629], ],   // alpha1 (313)
[ [635,566], [566,581], [581,625], [625,635], ],   // alpha1 (314)
[ [625,581], [581,342], [342,356], [356,625], ],   // alpha1 (315)
[ [634,567], [567,568], [568,637], [637,634], ],   // alpha1 (316)
[ [634,567], [567,566], [566,635], [635,634], ],   // alpha1 (317)
[ [621,549], [549,568], [568,637], [637,621], ],   // alpha1 (318)
[ [550,620], [620,611], [611,542], [542,550], ],   // alpha1 (319)
[ [620,550], [550,549], [549,621], [621,620], ],   // alpha1 (320)
[ [543,602], [602,603], [603,551], [551,543], ],   // alpha1 (321)
[ [602,543], [543,542], [542,611], [611,602], ],   // alpha1 (322)
[ [342,343], [343,351], [351,356], [356,342], ],   // alpha1 (323)
[ [594,552], [552,587], [587,600], [600,594], ],   // alpha1 (324)
[ [552,594], [594,603], [603,551], [551,552], ],   // alpha1 (325)

],


[
//BuildingPart17
[ [470,469],[469,697],[697,698],[698,699],[699,700],[700,701],[701,702],[702,703],[703,704],[704,705],[705,706],[706,707],[707,708],[708,709],[709,710],[710,711],[711,470],],// alpha1 (345)
[ [712,478],[478,470],[470,711],[711,712],],// alpha1 (346)
[ [713,714],[714,699],[699,698],[698,713],],// alpha1 (347)
[ [715,713],[713,698],[698,697],[697,715],],// alpha1 (348)
[ [716,717],[717,709],[709,708],[708,716],],// alpha1 (349)
[ [717,718],[718,710],[710,709],[709,717],],// alpha1 (350)
[ [718,712],[712,711],[711,710],[710,718],],// alpha1 (351)
[ [719,720],[720,701],[701,700],[700,719],],// alpha1 (352)
[ [714,719],[719,700],[700,699],[699,714],],// alpha1 (353)
[ [715,489],[489,478],[478,712],[712,718],[718,717],[717,716],[716,721],[721,722],[722,723],[723,724],[724,725],[725,726],[726,720],[720,719],[719,714],[714,713],[713,715],],// alpha1 (354)
[ [489,715],[715,697],[697,469],[469,489],],// alpha1 (355)
[ [708,707],[707,721],[721,716],[716,708],],// alpha1 (356)
[ [469,470],[470,478],[478,489],[489,469],],// alpha1 (357)
[ [726,702],[702,701],[701,720],[720,726],],// alpha1 (358)
[ [727,728],[728,729],[729,730],[730,727],],// alpha1 (359)
[ [731,727],[727,730],[730,732],[732,731],],// alpha1 (360)
[ [733,734],[734,735],[735,736],[736,733],],// alpha1 (361)
[ [737,738],[738,739],[739,740],[740,737],],// alpha1 (362)
[ [738,733],[733,736],[736,739],[739,738],],// alpha1 (363)

],
[
//BuildingPart35
[ [1168,1169],[1169,1170],[1170,1171],[1171,1168],],// alpha1 (679)
[ [1171,1168],[1168,1172],[1172,1173],[1173,1171],],// alpha1 (680)
[ [1172,1174],[1174,1169],[1169,1168],[1168,1172],],// alpha1 (681)
[ [1175,1173],[1173,1171],[1171,1170],[1170,1175],],// alpha1 (682)
[ [1175,1174],[1174,1172],[1172,1173],[1173,1175],],// alpha1 (683)
[ [1174,1175],[1175,1170],[1170,1169],[1169,1174],],// alpha1 (684)

],
[
//BuildingPart16
[ [551,641],[641,642],[642,643],[643,644],[644,645],[645,646],[646,647],[647,648],[648,649],[649,650],[650,651],[651,652],[652,653],[653,654],[654,655],[655,656],[656,587],[587,552],[552,551],],// alpha1 (326)
[ [646,645],[645,657],[657,658],[658,646],],// alpha1 (327)
[ [1844,1934],[1934,1935],[1935,1936],[1936,1937],[1937,1938],[1938,1939],[1939,1940],[1940,1941],[1941,1942],[1942,1943],[1943,1944],[1944,1945],[1945,1946],[1946,1947],[1947,1948],[1948,1949],[1949,1880],[1880,1845],[1845,1844],],// alpha1 (1093)
[ [670,669],[669,653],[653,652],[652,670],],// alpha1 (329)
[ [668,667],[667,655],[655,654],[654,668],],// alpha1 (330)
[ [669,668],[668,654],[654,653],[653,669],],// alpha1 (331)
[ [666,600],[600,587],[587,656],[656,666],],// alpha1 (332)
[ [659,670],[670,652],[652,651],[651,659],],// alpha1 (333)
[ [660,659],[659,651],[651,650],[650,660],],// alpha1 (334)
[ [666,656],[656,655],[655,667],[667,666],],// alpha1 (335)
[ [671,672],[672,673],[673,674],[674,675],[675,671],],// alpha1 (336)
[ [676,672],[672,673],[673,677],[677,678],[678,676],],// alpha1 (337)
[ [679,680],[680,681],[681,682],[682,679],],// alpha1 (338)
[ [683,684],[684,685],[685,686],[686,683],],// alpha1 (339)
[ [682,687],[687,688],[688,679],[679,682],],// alpha1 (340)
[ [687,683],[683,686],[686,688],[688,687],],// alpha1 (341)
[ [684,689],[689,690],[690,685],[685,684],],// alpha1 (342)
[ [691,692],[692,693],[693,694],[694,691],],// alpha1 (343)
[ [695,691],[691,694],[694,696],[696,695],],// alpha1 (344)

],
[
//BuildingPart45
[ [1256,1257],[1257,1258],[1258,1259],[1259,1256],],// alpha1 (743)
[ [1257,1258],[1258,1260],[1260,1261],[1261,1257],],// alpha1 (744)
[ [1262,1263],[1263,1260],[1260,1261],[1261,1262],],// alpha1 (745)
[ [1260,1263],[1263,1259],[1259,1258],[1258,1260],],// alpha1 (746)
[ [1263,1262],[1262,1256],[1256,1259],[1259,1263],],// alpha1 (747)
[ [1262,1261],[1261,1257],[1257,1256],[1256,1262],],// alpha1 (748)

],

[
//BuildingPart18
[ [741,742],[742,743],[743,744],[744,745],[745,746],[746,747],[747,748],[748,749],[749,750],[750,751],[751,752],[752,753],[753,754],[754,755],[755,756],[756,757],[757,758],[758,759],[759,760],[760,761],[761,703],[703,702],[702,741],],// alpha1 (364)
[ [762,763],[763,752],[752,751],[751,762],],// alpha1 (365)
[ [763,764],[764,753],[753,752],[752,763],],// alpha1 (366)
[ [765,762],[762,751],[751,750],[750,765],],// alpha1 (367)
[ [766,767],[767,757],[757,756],[756,766],],// alpha1 (368)
[ [768,769],[769,749],[749,748],[748,768],],// alpha1 (369)
[ [770,771],[771,745],[745,744],[744,770],],// alpha1 (370)
[ [772,770],[770,744],[744,743],[743,772],],// alpha1 (371)
[ [769,765],[765,750],[750,749],[749,769],],// alpha1 (372)
[ [771,773],[773,746],[746,745],[745,771],],// alpha1 (373)
[ [748,747],[747,774],[774,768],[768,748],],// alpha1 (374)
[ [726,775],[775,741],[741,702],[702,726],],// alpha1 (375)
[ [776,775],[775,726],[726,725],[725,777],[777,778],[778,779],[779,780],[780,767],[767,766],[766,781],[781,782],[782,764],[764,763],[763,762],[762,765],[765,769],[769,768],[768,774],[774,773],[773,771],[771,770],[770,772],[772,776],],// alpha1 (376)
[ [756,755],[755,781],[781,766],[766,756],],// alpha1 (377)
[ [767,780],[780,758],[758,757],[757,767],],// alpha1 (378)
[ [702,703],[703,725],[725,726],[726,702],],// alpha1 (379)
[ [742,776],[776,772],[772,743],[743,742],],// alpha1 (380)
[ [776,742],[742,741],[741,775],[775,776],],// alpha1 (381)
[ [746,773],[773,774],[774,747],[747,746],],// alpha1 (382)
[ [783,784],[784,785],[785,786],[786,783],],// alpha1 (383)
[ [787,783],[783,786],[786,788],[788,787],],// alpha1 (384)
[ [789,790],[790,791],[791,792],[792,789],],// alpha1 (385)
[ [793,789],[789,792],[792,794],[794,793],],// alpha1 (386)
[ [790,795],[795,796],[796,791],[791,790],],// alpha1 (387)
[ [794,797],[797,798],[798,793],[793,794],],// alpha1 (388)

],
[
//BuildingPart36
[ [1176,1177],[1177,1178],[1178,1179],[1179,1180],[1180,1181],[1181,1176],],// alpha1 (685)
[ [1176,1177],[1177,1182],[1182,1183],[1183,1176],],// alpha1 (686)
[ [1184,1185],[1185,1179],[1179,1178],[1178,1184],],// alpha1 (687)
[ [1183,1186],[1186,1181],[1181,1176],[1176,1183],],// alpha1 (688)
[ [1182,1184],[1184,1178],[1178,1177],[1177,1182],],// alpha1 (689)
[ [1187,1186],[1186,1181],[1181,1180],[1180,1187],],// alpha1 (690)
[ [1185,1184],[1184,1182],[1182,1183],[1183,1186],[1186,1187],[1187,1185],],// alpha1 (691)
[ [1185,1187],[1187,1180],[1180,1179],[1179,1185],],// alpha1 (692)

],
[
//BuildingPart37
[ [1188,1189],[1189,1190],[1190,1191],[1191,1188],],// alpha1 (693)
[ [1192,1193],[1193,1194],[1194,1195],[1195,1192],],// alpha1 (694)
[ [1193,1192],[1192,1190],[1190,1189],[1189,1193],],// alpha1 (695)
[ [1192,1195],[1195,1191],[1191,1190],[1190,1192],],// alpha1 (696)
[ [1194,1193],[1193,1189],[1189,1188],[1188,1194],],// alpha1 (697)
[ [1191,1188],[1188,1194],[1194,1195],[1195,1191],],// alpha1 (698)

],
[
//BuildingPart19
[ [648,799],[799,800],[800,801],[801,802],[802,803],[803,804],[804,805],[805,806],[806,807],[807,808],[808,809],[809,810],[810,650],[650,649],[649,648],],// alpha1 (389)
[ [1941,2091],[2091,2092],[2092,2093],[2093,2094],[2094,2095],[2095,2096],[2096,2097],[2097,2098],[2098,2099],[2099,2100],[2100,2101],[2101,2102],[2102,1943],[1943,1942],[1942,1941],],// alpha1 (1156)
[ [821,820],[820,800],[800,799],[799,821],],// alpha1 (391)
[ [822,660],[660,650],[650,810],[810,822],],// alpha1 (392)
[ [811,822],[822,810],[810,809],[809,811],],// alpha1 (393)
[ [661,821],[821,799],[799,648],[648,661],],// alpha1 (394)
[ [812,811],[811,809],[809,808],[808,812],],// alpha1 (395)
[ [648,661],[661,660],[660,650],[650,649],[649,648],],// alpha1 (396)
[ [807,813],[813,812],[812,808],[808,807],],// alpha1 (397)
[ [813,807],[807,806],[806,814],[814,813],],// alpha1 (398)
[ [823,824],[824,825],[825,826],[826,823],],// alpha1 (399)
[ [823,827],[827,828],[828,826],[826,823],],// alpha1 (400)
[ [829,830],[830,831],[831,832],[832,829],],// alpha1 (401)
[ [833,834],[834,835],[835,836],[836,833],],// alpha1 (402)
[ [834,829],[829,832],[832,835],[835,834],],// alpha1 (403)
[ [836,837],[837,838],[838,833],[833,836],],// alpha1 (404)

],
[
//BuildingPart46
[ [1264,1265],[1265,1266],[1266,1267],[1267,1264],],// alpha1 (749)
[ [1268,1269],[1269,1266],[1266,1265],[1265,1268],],// alpha1 (750)
[ [1270,1268],[1268,1265],[1265,1264],[1264,1270],],// alpha1 (751)
[ [1269,1268],[1268,1270],[1270,1271],[1271,1269],],// alpha1 (752)
[ [1267,1264],[1264,1270],[1270,1271],[1271,1267],],// alpha1 (753)
[ [1271,1269],[1269,1266],[1266,1267],[1267,1271],],// alpha1 (754)

],
[
//BuildingPart20
[ [839,840],[840,841],[841,842],[842,805],[805,804],[804,843],[843,844],[844,845],[845,846],[846,847],[847,848],[848,849],[849,850],[850,851],[851,852],[852,853],[853,854],[854,855],[855,839],],// alpha1 (405)
[ [856,857],[857,847],[847,846],[846,856],],// alpha1 (406)
[ [857,858],[858,848],[848,847],[847,857],],// alpha1 (407)
[ [859,860],[860,850],[850,849],[849,859],],// alpha1 (408)
[ [861,862],[862,842],[842,841],[841,861],],// alpha1 (409)
[ [863,861],[861,841],[841,840],[840,863],],// alpha1 (410)
[ [864,816],[816,815],[815,862],[862,861],[861,863],[863,865],[865,866],[866,867],[867,868],[868,869],[869,870],[870,860],[860,859],[859,858],[858,857],[857,856],[856,871],[871,872],[872,864],],// alpha1 (411)
[ [865,863],[863,840],[840,839],[839,865],],// alpha1 (412)
[ [866,865],[865,839],[839,855],[855,866],],// alpha1 (413)
[ [858,859],[859,849],[849,848],[848,858],],// alpha1 (414)
[ [869,868],[868,853],[853,852],[852,869],],// alpha1 (415)
[ [868,867],[867,854],[854,853],[853,868],],// alpha1 (416)
[ [867,866],[866,855],[855,854],[854,867],],// alpha1 (417)
[ [846,845],[845,871],[871,856],[856,846],],// alpha1 (418)
[ [804,805],[805,815],[815,816],[816,804],],// alpha1 (419)
[ [851,870],[870,869],[869,852],[852,851],],// alpha1 (420)
[ [870,851],[851,850],[850,860],[860,870],],// alpha1 (421)
[ [842,862],[862,815],[815,805],[805,842],],// alpha1 (422)
[ [873,874],[874,875],[875,876],[876,873],],// alpha1 (423)
[ [877,873],[873,876],[876,878],[878,877],],// alpha1 (424)
[ [874,879],[879,880],[880,875],[875,874],],// alpha1 (425)

],
[
//BuildingPart47
[ [1272,1273],[1273,1274],[1274,1275],[1275,1272],],// alpha1 (755)
[ [1276,1277],[1277,1273],[1273,1272],[1272,1276],],// alpha1 (756)
[ [1273,1274],[1274,1278],[1278,1277],[1277,1273],],// alpha1 (757)
[ [1276,1279],[1279,1278],[1278,1277],[1277,1276],],// alpha1 (758)
[ [1279,1276],[1276,1272],[1272,1275],[1275,1279],],// alpha1 (759)
[ [1278,1279],[1279,1275],[1275,1274],[1274,1278],],// alpha1 (760)

],

[
//BuildingPart48
[ [1280,1281],[1281,1282],[1282,1283],[1283,1280],],// alpha1 (761)
[ [1284,1285],[1285,1282],[1282,1281],[1281,1284],],// alpha1 (762)
[ [1283,1280],[1280,1286],[1286,1287],[1287,1283],],// alpha1 (763)
[ [1286,1284],[1284,1281],[1281,1280],[1280,1286],],// alpha1 (764)
[ [1285,1284],[1284,1286],[1286,1287],[1287,1285],],// alpha1 (765)
[ [1287,1285],[1285,1282],[1282,1283],[1283,1287],],// alpha1 (766)

],

[

//BuildingPart21
[ [881,882],[882,883],[883,884],[884,881],],// alpha1 (426)
[ [885,881],[881,884],[884,886],[886,885],],// alpha1 (427)
[ [887,888],[888,889],[889,890],[890,891],[891,892],[892,893],[893,894],[894,887],],// alpha1 (428)
[ [895,894],[894,884],[884,881],[881,895],],// alpha1 (429)
[ [894,887],[887,886],[886,884],[884,894],],// alpha1 (430)
[ [893,894],[894,884],[884,883],[883,893],],// alpha1 (431)
[ [892,893],[893,883],[883,882],[882,892],],// alpha1 (432)
[ [894,895],[895,896],[896,887],[887,894],],// alpha1 (433)
[ [893,892],[892,895],[895,894],[894,893],],// alpha1 (434)
[ [891,890],[890,897],[897,898],[898,891],],// alpha1 (435)
[ [899,900],[900,886],[886,884],[884,883],[883,882],[882,898],[898,897],[897,899],],// alpha1 (436)
[ [899,889],[889,890],[890,897],[897,899],],// alpha1 (437)
[ [889,899],[899,900],[900,888],[888,889],],// alpha1 (438)
[ [885,896],[896,895],[895,881],[881,885],],// alpha1 (439)
[ [896,885],[885,886],[886,887],[887,896],],// alpha1 (440)
[ [888,900],[900,886],[886,887],[887,888],],// alpha1 (441)
[ [881,895],[895,892],[892,882],[882,881],],// alpha1 (442)
[ [882,892],[892,891],[891,898],[898,882],],// alpha1 (443)

],


[
//BuildingPart22
[ [901,902],[902,903],[903,904],[904,901],],// alpha1 (444)
[ [905,906],[906,907],[907,908],[908,905],],// alpha1 (445)
[ [908,909],[909,910],[910,905],[905,908],],// alpha1 (446)
[ [911,856],[856,846],[846,912],[912,911],],// alpha1 (447)
[ [890,913],[913,914],[914,897],[897,890],],// alpha1 (448)
[ [913,915],[915,916],[916,914],[914,913],],// alpha1 (449)
[ [913,890],[890,889],[889,888],[888,917],[917,871],[871,856],[856,911],[911,906],[906,905],[905,910],[910,902],[902,901],[901,915],[915,913],],// alpha1 (450)
[ [906,911],[911,912],[912,907],[907,906],],// alpha1 (451)
[ [915,901],[901,904],[904,916],[916,915],],// alpha1 (452)
[ [918,900],[900,899],[899,897],[897,914],[914,916],[916,904],[904,903],[903,909],[909,908],[908,907],[907,912],[912,846],[846,845],[845,918],],// alpha1 (453)
[ [903,902],[902,910],[910,909],[909,903],],// alpha1 (454)
[ [919,920],[920,921],[921,922],[922,919],],// alpha1 (455)
[ [923,924],[924,925],[925,926],[926,923],],// alpha1 (456)
[ [927,923],[923,926],[926,928],[928,927],],// alpha1 (457)
[ [919,929],[929,930],[930,922],[922,919],],// alpha1 (458)
[ [924,920],[920,921],[921,925],[925,924],],// alpha1 (459)

],
[
//BuildingPart38
[ [1196,1197],[1197,1198],[1198,1199],[1199,1200],[1200,1201],[1201,1196],],// alpha1 (699)
[ [1202,1203],[1203,1197],[1197,1196],[1196,1202],],// alpha1 (700)
[ [1204,1205],[1205,1201],[1201,1200],[1200,1204],],// alpha1 (701)
[ [1203,1202],[1202,1205],[1205,1204],[1204,1206],[1206,1207],[1207,1203],],// alpha1 (702)
[ [1207,1206],[1206,1199],[1199,1198],[1198,1207],],// alpha1 (703)
[ [1202,1205],[1205,1201],[1201,1196],[1196,1202],],// alpha1 (704)
[ [1203,1207],[1207,1198],[1198,1197],[1197,1203],],// alpha1 (705)
[ [1206,1204],[1204,1200],[1200,1199],[1199,1206],],// alpha1 (706)

],


//BuildingPart73
[
[ [1396,1395],[1395,1394],[1394,1403],[1403,1402],[1402,1401],[1401,1540],[1540,1539],[1539,1538],[1538,1537],[1537,2289],[2289,2312],[2312,2311],[2311,2310],[2310,2309],[2309,2308],[2308,2307],[2307,2222],[2222,2226],[2226,2225],[2225,1304],[1304,1303],[1303,1302],[1302,1301],[1301,1300],[1300,1510],[1510,1509],[1509,1508],[1508,1507],[1507,1470],[1470,1469],[1469,1468],[1468,1467],[1467,1466],[1466,1428],[1428,1427],[1427,1426],[1426,1425],[1425,1424],[1424,1724],[1724,1723],[1723,1722],[1722,1721],[1721,1808],[1808,1807],[1807,1806],[1806,1805],[1805,1755],[1755,1768],[1768,1767],[1767,1766],[1766,1765],[1765,1999],[1999,1998],[1998,1997],[1997,1996],[1996,1995],[1995,2053],[2053,2052],[2052,2051],[2051,2050],[2050,2047],[2047,2046],[2046,2045],[2045,2327],[2327,2328],[2328,2191],[2191,2174],[2174,2173],[2173,2177],[2177,2178],[2178,2190],[2190,2256],[2256,2137],[2137,2136],[2136,2135],[2135,2096],[2096,2095],[2095,2094],[2094,2093],[2093,2092],[2092,1938],[1938,1937],[1937,1936],[1936,1935],[1935,1934],[1934,1844],[1844,1836],[1836,1835],[1835,1843],[1843,1842],[1842,1861],[1861,1860],[1860,1859],[1859,1874],[1874,1635],[1635,1634],[1634,1633],[1633,1632],[1632,1631],[1631,1630],[1630,1679],[1679,1688],[1688,1687],[1687,1686],[1686,1585],[1585,1584],[1584,1583],[1583,1582],[1582,1581],[1581,1338],[1338,1337],[1337,1354],[1354,1353],[1353,1352],[1352,1396],],// alpha1 (1274)
[ [1512,1315],[1315,1300],[1300,1510],[1510,1512],],// alpha1 (1275)
[ [1437,1481],[1481,1466],[1466,1428],[1428,1437],],// alpha1 (1276)
[ [1355,1596],[1596,1581],[1581,1338],[1338,1355],],// alpha1 (1277)
[ [1692,1654],[1654,1630],[1630,1679],[1679,1692],],// alpha1 (1278)
[ [1811,1735],[1735,1721],[1721,1808],[1808,1811],],// alpha1 (1279)
[ [2290,1557],[1557,1537],[1537,2289],[2289,2290],],// alpha1 (1280)
[ [2073,2072],[2072,2050],[2050,2047],[2047,2073],],// alpha1 (1281)
[ [2014,2004],[2004,1780],[1780,1779],[1779,1778],[1778,1777],[1777,1776],[1776,1814],[1814,1813],[1813,1812],[1812,1811],[1811,1735],[1735,1734],[1734,1733],[1733,1732],[1732,1441],[1441,1440],[1440,1439],[1439,1438],[1438,1437],[1437,1481],[1481,1480],[1480,1479],[1479,1478],[1478,1477],[1477,1518],[1518,1517],[1517,1516],[1516,1512],[1512,1315],[1315,1314],[1314,1313],[1313,1312],[1312,1311],[1311,2212],[2212,2211],[2211,2210],[2210,2299],[2299,2298],[2298,2297],[2297,2304],[2304,2303],[2303,2302],[2302,2290],[2290,1557],[1557,1556],[1556,1555],[1555,1554],[1554,1412],[1412,1414],[1414,1413],[1413,1411],[1411,1410],[1410,1409],[1409,1365],[1365,1364],[1364,1363],[1363,1362],[1362,1355],[1355,1596],[1596,1595],[1595,1594],[1594,1593],[1593,1602],[1602,1698],[1698,1697],[1697,1696],[1696,1692],[1692,1654],[1654,1653],[1653,1652],[1652,1651],[1651,1650],[1650,1649],[1649,1918],[1918,1928],[1928,1927],[1927,1930],[1930,1914],[1914,1913],[1913,1904],[1904,1895],[1895,1896],[1896,1958],[1958,1957],[1957,1956],[1956,1955],[1955,1950],[1950,2112],[2112,2111],[2111,2110],[2110,2109],[2109,2108],[2108,2156],[2156,2164],[2164,2163],[2163,2255],[2255,2180],[2180,2179],[2179,2188],[2188,2187],[2187,2184],[2184,2183],[2183,2329],[2329,2330],[2330,2056],[2056,2074],[2074,2073],[2073,2072],[2072,2071],[2071,2070],[2070,2069],[2069,2017],[2017,2016],[2016,2015],[2015,2014],],// alpha1 (1282)
[ [1950,2112],[2112,2092],[2092,1938],[1938,1950],],// alpha1 (1283)
[ [2004,1780],[1780,1765],[1765,1999],[1999,2004],],// alpha1 (1284)
[ [2329,2183],[2183,2191],[2191,2328],[2328,2329],],// alpha1 (1285)
[ [2330,2329],[2329,2328],[2328,2327],[2327,2330],],// alpha1 (1286)
[ [2056,2330],[2330,2327],[2327,2045],[2045,2056],],// alpha1 (1287)
[ [2299,2210],[2210,2222],[2222,2307],[2307,2299],],// alpha1 (1288)
[ [2226,2211],[2211,2210],[2210,2222],[2222,2226],],// alpha1 (1289)
[ [2212,2225],[2225,1304],[1304,1311],[1311,2212],],// alpha1 (1290)
[ [2225,2212],[2212,2211],[2211,2226],[2226,2225],],// alpha1 (1291)
[ [1337,1362],[1362,1355],[1355,1338],[1338,1337],],// alpha1 (1292)
[ [1354,1363],[1363,1362],[1362,1337],[1337,1354],],// alpha1 (1293)
[ [1353,1364],[1364,1363],[1363,1354],[1354,1353],],// alpha1 (1294)
[ [1469,1478],[1478,1477],[1477,1470],[1470,1469],],// alpha1 (1295)
[ [1478,1469],[1469,1468],[1468,1479],[1479,1478],],// alpha1 (1296)
[ [1480,1467],[1467,1466],[1466,1481],[1481,1480],],// alpha1 (1297)
[ [1467,1480],[1480,1479],[1479,1468],[1468,1467],],// alpha1 (1298)
[ [1595,1582],[1582,1581],[1581,1596],[1596,1595],],// alpha1 (1299)
[ [1594,1583],[1583,1582],[1582,1595],[1595,1594],],// alpha1 (1300)
[ [1584,1593],[1593,1602],[1602,1585],[1585,1584],],// alpha1 (1301)
[ [1593,1584],[1584,1583],[1583,1594],[1594,1593],],// alpha1 (1302)
[ [1427,1438],[1438,1437],[1437,1428],[1428,1427],],// alpha1 (1303)
[ [1426,1439],[1439,1438],[1438,1427],[1427,1426],],// alpha1 (1304)
[ [1440,1425],[1425,1424],[1424,1441],[1441,1440],],// alpha1 (1305)
[ [1425,1440],[1440,1439],[1439,1426],[1426,1425],],// alpha1 (1306)
[ [1698,1686],[1686,1585],[1585,1602],[1602,1698],],// alpha1 (1307)
[ [1686,1698],[1698,1697],[1697,1687],[1687,1686],],// alpha1 (1308)
[ [1688,1696],[1696,1692],[1692,1679],[1679,1688],],// alpha1 (1309)
[ [1696,1688],[1688,1687],[1687,1697],[1697,1696],],// alpha1 (1310)
[ [1734,1722],[1722,1721],[1721,1735],[1735,1734],],// alpha1 (1311)
[ [1724,1732],[1732,1441],[1441,1424],[1424,1724],],// alpha1 (1312)
[ [1733,1723],[1723,1722],[1722,1734],[1734,1733],],// alpha1 (1313)
[ [1723,1733],[1733,1732],[1732,1724],[1724,1723],],// alpha1 (1314)
[ [1814,1805],[1805,1755],[1755,1776],[1776,1814],],// alpha1 (1315)
[ [1805,1814],[1814,1813],[1813,1806],[1806,1805],],// alpha1 (1316)
[ [1807,1812],[1812,1811],[1811,1808],[1808,1807],],// alpha1 (1317)
[ [1812,1807],[1807,1806],[1806,1813],[1813,1812],],// alpha1 (1318)
[ [1653,1631],[1631,1630],[1630,1654],[1654,1653],],// alpha1 (1319)
[ [1652,1632],[1632,1631],[1631,1653],[1653,1652],],// alpha1 (1320)
[ [1651,1633],[1633,1632],[1632,1652],[1652,1651],],// alpha1 (1321)
[ [1650,1634],[1634,1633],[1633,1651],[1651,1650],],// alpha1 (1322)
[ [1779,1766],[1766,1765],[1765,1780],[1780,1779],],// alpha1 (1323)
[ [1778,1767],[1767,1766],[1766,1779],[1779,1778],],// alpha1 (1324)
[ [1777,1768],[1768,1767],[1767,1778],[1778,1777],],// alpha1 (1325)
[ [1768,1777],[1777,1776],[1776,1755],[1755,1768],],// alpha1 (1326)
[ [1998,2014],[2014,2004],[2004,1999],[1999,1998],],// alpha1 (1327)
[ [1997,2015],[2015,2014],[2014,1998],[1998,1997],],// alpha1 (1328)
[ [2016,1996],[1996,1995],[1995,2017],[2017,2016],],// alpha1 (1329)
[ [1996,2016],[2016,2015],[2015,1997],[1997,1996],],// alpha1 (1330)
[ [1957,1935],[1935,1936],[1936,1956],[1956,1957],],// alpha1 (1331)
[ [1934,1958],[1958,1957],[1957,1935],[1935,1934],],// alpha1 (1332)
[ [1937,1955],[1955,1950],[1950,1938],[1938,1937],],// alpha1 (1333)
[ [1955,1937],[1937,1936],[1936,1956],[1956,1955],],// alpha1 (1334)
[ [2071,2051],[2051,2050],[2050,2072],[2072,2071],],// alpha1 (1335)
[ [2070,2052],[2052,2051],[2051,2071],[2071,2070],],// alpha1 (1336)
[ [2069,2053],[2053,2052],[2052,2070],[2070,2069],],// alpha1 (1337)
[ [2053,2069],[2069,2017],[2017,1995],[1995,2053],],// alpha1 (1338)
[ [2046,2074],[2074,2056],[2056,2045],[2045,2046],],// alpha1 (1339)
[ [2046,2074],[2074,2073],[2073,2047],[2047,2046],],// alpha1 (1340)
[ [2095,2109],[2109,2108],[2108,2096],[2096,2095],],// alpha1 (1341)
[ [2094,2110],[2110,2109],[2109,2095],[2095,2094],],// alpha1 (1342)
[ [2111,2093],[2093,2092],[2092,2112],[2112,2111],],// alpha1 (1343)
[ [2093,2111],[2111,2110],[2110,2094],[2094,2093],],// alpha1 (1344)
[ [2156,2135],[2135,2096],[2096,2108],[2108,2156],],// alpha1 (1345)
[ [2164,2136],[2136,2135],[2135,2156],[2156,2164],],// alpha1 (1346)
[ [2136,2164],[2164,2163],[2163,2137],[2137,2136],],// alpha1 (1347)
[ [2256,2255],[2255,2163],[2163,2137],[2137,2256],],// alpha1 (1348)
[ [2298,2308],[2308,2307],[2307,2299],[2299,2298],],// alpha1 (1349)
[ [2297,2309],[2309,2308],[2308,2298],[2298,2297],],// alpha1 (1350)
[ [2304,2310],[2310,2309],[2309,2297],[2297,2304],],// alpha1 (1351)
[ [2303,2311],[2311,2310],[2310,2304],[2304,2303],],// alpha1 (1352)
[ [2312,2302],[2302,2290],[2290,2289],[2289,2312],],// alpha1 (1353)
[ [2302,2312],[2312,2311],[2311,2303],[2303,2302],],// alpha1 (1354)
[ [1303,1312],[1312,1311],[1311,1304],[1304,1303],],// alpha1 (1355)
[ [1314,1301],[1301,1300],[1300,1315],[1315,1314],],// alpha1 (1356)
[ [1302,1313],[1313,1312],[1312,1303],[1303,1302],],// alpha1 (1357)
[ [1313,1302],[1302,1301],[1301,1314],[1314,1313],],// alpha1 (1358)
[ [1554,1540],[1540,1539],[1539,1555],[1555,1554],],// alpha1 (1359)
[ [1556,1538],[1538,1537],[1537,1557],[1557,1556],],// alpha1 (1360)
[ [1538,1556],[1556,1555],[1555,1539],[1539,1538],],// alpha1 (1361)
[ [1509,1516],[1516,1512],[1512,1510],[1510,1509],],// alpha1 (1362)
[ [1508,1517],[1517,1516],[1516,1509],[1509,1508],],// alpha1 (1363)
[ [1518,1507],[1507,1470],[1470,1477],[1477,1518],],// alpha1 (1364)
[ [1507,1518],[1518,1517],[1517,1508],[1508,1507],],// alpha1 (1365)
[ [2331,2332],[2332,2333],[2333,2334],[2334,2331],],// alpha1 (1366)
[ [2335,2336],[2336,2337],[2337,2338],[2338,2335],],// alpha1 (1367)
[ [2336,2331],[2331,2334],[2334,2337],[2337,2336],],// alpha1 (1368)
[ [2339,2340],[2340,2341],[2341,2342],[2342,2339],],// alpha1 (1369)
[ [2332,2343],[2343,2344],[2344,2333],[2333,2332],],// alpha1 (1370)
[ [2340,2335],[2335,2338],[2338,2341],[2341,2340],],// alpha1 (1371)
[ [1352,1365],[1365,1364],[1364,1353],[1353,1352],],// alpha1 (1372)
[ [1412,1401],[1401,1540],[1540,1554],[1554,1412],],// alpha1 (1373)
[ [2345,2346],[2346,2347],[2347,2348],[2348,2345],],// alpha1 (1374)
[ [2349,2350],[2350,2351],[2351,2352],[2352,2349],],// alpha1 (1375)
[ [2353,2354],[2354,2355],[2355,2356],[2356,2353],],// alpha1 (1376)
[ [2356,2357],[2357,2358],[2358,2353],[2353,2356],],// alpha1 (1377)
[ [2359,2358],[2358,2357],[2357,2360],[2360,2359],],// alpha1 (1378)
[ [2346,2359],[2359,2360],[2360,2347],[2347,2346],],// alpha1 (1379)
[ [2348,2361],[2361,2362],[2362,2345],[2345,2348],],// alpha1 (1380)
[ [2363,2362],[2362,2361],[2361,2364],[2364,2363],],// alpha1 (1381)
[ [2354,2349],[2349,2352],[2352,2355],[2355,2354],],// alpha1 (1382)
[ [2365,2366],[2366,2364],[2364,2363],[2363,2365],],// alpha1 (1383)
[ [2367,2368],[2368,2351],[2351,2350],[2350,2367],],// alpha1 (1384)
[ [2369,2370],[2370,2371],[2371,2372],[2372,2369],],// alpha1 (1385)
[ [2373,2371],[2371,2370],[2370,2374],[2374,2373],],// alpha1 (1386)
[ [2375,2376],[2376,2377],[2377,2378],[2378,2375],],// alpha1 (1387)
[ [2376,2379],[2379,2380],[2380,2377],[2377,2376],],// alpha1 (1388)
[ [2379,2369],[2369,2372],[2372,2380],[2380,2379],],// alpha1 (1389)
[ [2381,2382],[2382,2375],[2375,2378],[2378,2381],],// alpha1 (1390)

],


[
//BuildingPart70
[ [2193,2194],[2194,2195],[2195,2196],[2196,2193],],// alpha1 (1211)
[ [2197,2198],[2198,2199],[2199,2200],[2200,2197],],// alpha1 (1212)
[ [2197,2201],[2201,2202],[2202,2203],[2203,2204],[2204,2205],[2205,2206],[2206,2194],[2194,2193],[2193,2207],[2207,2208],[2208,2209],[2209,2210],[2210,2211],[2211,2212],[2212,1311],[1311,1308],[1308,2213],[2213,2198],[2198,2197],],// alpha1 (1213)
[ [2198,2213],[2213,2214],[2214,2199],[2199,2198],],// alpha1 (1214)
[ [2208,2207],[2207,2215],[2215,2216],[2216,2208],],// alpha1 (1215)
[ [2201,2197],[2197,2200],[2200,2217],[2217,2201],],// alpha1 (1216)
[ [2218,2219],[2219,2203],[2203,2202],[2202,2218],],// alpha1 (1217)
[ [2202,2201],[2201,2217],[2217,2218],[2218,2202],],// alpha1 (1218)
[ [2209,2208],[2208,2216],[2216,2220],[2220,2209],],// alpha1 (1219)
[ [2194,2206],[2206,2221],[2221,2195],[2195,2194],],// alpha1 (1220)
[ [2207,2193],[2193,2196],[2196,2215],[2215,2207],],// alpha1 (1221)
[ [2220,2222],[2222,2210],[2210,2209],[2209,2220],],// alpha1 (1222)
[ [2223,2224],[2224,2219],[2219,2218],[2218,2217],[2217,2200],[2200,2199],[2199,2214],[2214,1305],[1305,1304],[1304,2225],[2225,2226],[2226,2222],[2222,2220],[2220,2216],[2216,2215],[2215,2196],[2196,2195],[2195,2221],[2221,2223],],// alpha1 (1223)
[ [2205,2223],[2223,2221],[2221,2206],[2206,2205],],// alpha1 (1224)
[ [2224,2204],[2204,2203],[2203,2219],[2219,2224],],// alpha1 (1225)
[ [2204,2224],[2224,2223],[2223,2205],[2205,2204],],// alpha1 (1226)
[ [2214,2213],[2213,1308],[1308,1305],[1305,2214],],// alpha1 (1227)
[ [2227,2228],[2228,2229],[2229,2230],[2230,2227],],// alpha1 (1228)
[ [2228,2231],[2231,2232],[2232,2229],[2229,2228],],// alpha1 (1229)
[ [2233,2234],[2234,2235],[2235,2236],[2236,2233],],// alpha1 (1230)
[ [2234,2237],[2237,2238],[2238,2235],[2235,2234],],// alpha1 (1231)

],

[
//BuildingPart74
[ [2383,2384],[2384,2385],[2385,2386],[2386,2383],],// alpha1 (1391)
[ [2387,2385],[2385,2384],[2384,2388],[2388,2387],],// alpha1 (1392)
[ [2389,2388],[2388,2384],[2384,2383],[2383,2390],[2390,2389],],// alpha1 (1393)
[ [2391,2387],[2387,2388],[2388,2389],[2389,2391],],// alpha1 (1394)
[ [2386,2392],[2392,2390],[2390,2383],[2383,2386],],// alpha1 (1395)
[ [2392,2391],[2391,2389],[2389,2390],[2390,2392],],// alpha1 (1396)
[ [2386,2385],[2385,2387],[2387,2391],[2391,2392],[2392,2386],],// alpha1 (1397)

],
[
//BuildingPart75
[ [2393,2394],[2394,2395],[2395,2396],[2396,2393],],// alpha1 (1398)
[ [2394,2397],[2397,2398],[2398,2395],[2395,2394],],// alpha1 (1399)
[ [2399,2393],[2393,2396],[2396,2400],[2400,2399],],// alpha1 (1400)
[ [2394,2393],[2393,2399],[2399,2397],[2397,2394],],// alpha1 (1401)
[ [2398,2400],[2400,2399],[2399,2397],[2397,2398],],// alpha1 (1402)
[ [2398,2400],[2400,2396],[2396,2395],[2395,2398],],// alpha1 (1403)

],

[
//BuildingPart72
[ [2269,2270],[2270,2271],[2271,2272],[2272,2269],],// alpha1 (1248)
[ [2273,1552],[1552,1535],[1535,2274],[2274,2273],],// alpha1 (1249)
[ [2275,2269],[2269,2272],[2272,2276],[2276,2275],],// alpha1 (1250)
[ [2277,2278],[2278,2279],[2279,2280],[2280,2277],],// alpha1 (1251)
[ [2278,2281],[2281,2282],[2282,2279],[2279,2278],],// alpha1 (1252)
[ [2283,2277],[2277,2280],[2280,2284],[2284,2283],],// alpha1 (1253)
[ [2270,2285],[2285,2286],[2286,2271],[2271,2270],],// alpha1 (1254)
[ [2287,2275],[2275,2276],[2276,2288],[2288,2287],],// alpha1 (1255)
[ [2274,2289],[2289,2290],[2290,2273],[2273,2274],],// alpha1 (1256)
[ [2284,2291],[2291,2292],[2292,2283],[2283,2284],],// alpha1 (1257)
[ [2281,2293],[2293,2294],[2294,2282],[2282,2281],],// alpha1 (1258)
[ [2293,2295],[2295,2296],[2296,2294],[2294,2293],],// alpha1 (1259)
[ [2297,2298],[2298,2299],[2299,2300],[2300,2301],[2301,2295],[2295,2293],[2293,2281],[2281,2278],[2278,2277],[2277,2283],[2283,2292],[2292,2285],[2285,2270],[2270,2269],[2269,2275],[2275,2287],[2287,1551],[1551,1552],[1552,2273],[2273,2290],[2290,2302],[2302,2303],[2303,2304],[2304,2297],],// alpha1 (1260)
[ [2295,2301],[2301,2305],[2305,2296],[2296,2295],],// alpha1 (1261)
[ [2301,2300],[2300,2306],[2306,2305],[2305,2301],],// alpha1 (1262)
[ [2306,2307],[2307,2308],[2308,2309],[2309,2310],[2310,2311],[2311,2312],[2312,2289],[2289,2274],[2274,1535],[1535,1546],[1546,2288],[2288,2276],[2276,2272],[2272,2271],[2271,2286],[2286,2291],[2291,2284],[2284,2280],[2280,2279],[2279,2282],[2282,2294],[2294,2296],[2296,2305],[2305,2306],],// alpha1 (1263)
[ [2300,2299],[2299,2307],[2307,2306],[2306,2300],],// alpha1 (1264)
[ [2286,2285],[2285,2292],[2292,2291],[2291,2286],],// alpha1 (1265)
[ [1535,1546],[1546,1551],[1551,1552],[1552,1535],],// alpha1 (1266)
[ [1551,2287],[2287,2288],[2288,1546],[1546,1551],],// alpha1 (1267)
[ [2313,2314],[2314,2315],[2315,2316],[2316,2313],],// alpha1 (1268)
[ [2317,2318],[2318,2319],[2319,2320],[2320,2317],],// alpha1 (1269)
[ [2321,2322],[2322,2323],[2323,2324],[2324,2321],],// alpha1 (1270)
[ [2325,2321],[2321,2324],[2324,2326],[2326,2325],],// alpha1 (1271)
[ [2318,2325],[2325,2326],[2326,2319],[2319,2318],],// alpha1 (1272)
[ [2316,2317],[2317,2320],[2320,2313],[2313,2316],],// alpha1 (1273)

],

[
//BuildingPart87
[ [2493,2494],[2494,2495],[2495,2496],[2496,2493],],// alpha1 (1474)
[ [2497,2498],[2498,2499],[2499,2500],[2500,2497],],// alpha1 (1475)
[ [2497,2500],[2500,2494],[2494,2493],[2493,2497],],// alpha1 (1476)
[ [2498,2497],[2497,2493],[2493,2496],[2496,2498],],// alpha1 (1477)
[ [2499,2498],[2498,2496],[2496,2495],[2495,2499],],// alpha1 (1478)
[ [2499,2500],[2500,2494],[2494,2495],[2495,2499],],// alpha1 (1479)

],
[
//BuildingPart50
[ [1291,1292],[1292,1293],[1293,1294],[1294,1295],[1295,1296],[1296,1297],[1297,1298],[1298,1299],[1299,1300],[1300,1301],[1301,1302],[1302,1303],[1303,1304],[1304,1305],[1305,1291],],// alpha1 (768)
[ [1306,1307],[1307,1297],[1297,1296],[1296,1306],],// alpha1 (769)
[ [1308,1309],[1309,1291],[1291,1305],[1305,1308],],// alpha1 (770)
[ [1310,1306],[1306,1296],[1296,1295],[1295,1310],],// alpha1 (771)
[ [1311,1312],[1312,1313],[1313,1314],[1314,1315],[1315,1316],[1316,1317],[1317,1307],[1307,1306],[1306,1310],[1310,1318],[1318,1319],[1319,1320],[1320,1309],[1309,1308],[1308,1311],],// alpha1 (772)
[ [1318,1310],[1310,1295],[1295,1294],[1294,1318],],// alpha1 (773)
[ [1319,1318],[1318,1294],[1294,1293],[1293,1319],],// alpha1 (774)
[ [1316,1315],[1315,1300],[1300,1299],[1299,1316],],// alpha1 (775)
[ [1320,1292],[1292,1291],[1291,1309],[1309,1320],],// alpha1 (776)
[ [1292,1320],[1320,1319],[1319,1293],[1293,1292],],// alpha1 (777)
[ [1305,1304],[1304,1311],[1311,1308],[1308,1305],],// alpha1 (778)
[ [1321,1322],[1322,1323],[1323,1324],[1324,1321],],// alpha1 (779)
[ [1322,1325],[1325,1326],[1326,1323],[1323,1322],],// alpha1 (780)
[ [1327,1328],[1328,1329],[1329,1330],[1330,1327],],// alpha1 (781)
[ [1330,1331],[1331,1332],[1332,1327],[1327,1330],],// alpha1 (782)
[ [1331,1333],[1333,1334],[1334,1332],[1332,1331],],// alpha1 (783)
[ [1333,1335],[1335,1336],[1336,1334],[1334,1333],],// alpha1 (784)

],

[
//BuildingPart76
[ [2401,2402],[2402,2403],[2403,2404],[2404,2401],],// alpha1 (1404)
[ [2405,2404],[2404,2401],[2401,2406],[2406,2405],],// alpha1 (1405)
[ [2407,2402],[2402,2401],[2401,2406],[2406,2407],],// alpha1 (1406)
[ [2402,2407],[2407,2408],[2408,2403],[2403,2402],],// alpha1 (1407)
[ [2406,2407],[2407,2408],[2408,2405],[2405,2406],],// alpha1 (1408)
[ [2405,2404],[2404,2403],[2403,2408],[2408,2405],],// alpha1 (1409)

],
[
//BuildingPart56
[ [1535,1536],[1536,1537],[1537,1538],[1538,1539],[1539,1540],[1540,1401],[1401,1400],[1400,1541],[1541,1542],[1542,1543],[1543,1544],[1544,1545],[1545,1546],[1546,1535],],// alpha1 (883)
[ [1547,1548],[1548,1542],[1542,1541],[1541,1547],],// alpha1 (884)
[ [1549,1550],[1550,1545],[1545,1544],[1544,1549],],// alpha1 (885)
[ [1550,1551],[1551,1546],[1546,1545],[1545,1550],],// alpha1 (886)
[ [1552,1553],[1553,1536],[1536,1535],[1535,1552],],// alpha1 (887)
[ [1412,1554],[1554,1555],[1555,1556],[1556,1557],[1557,1553],[1553,1552],[1552,1551],[1551,1550],[1550,1549],[1549,1558],[1558,1548],[1548,1547],[1547,1405],[1405,1412],],// alpha1 (888)
[ [1553,1557],[1557,1537],[1537,1536],[1536,1553],],// alpha1 (889)
[ [1543,1558],[1558,1549],[1549,1544],[1544,1543],],// alpha1 (890)
[ [1558,1543],[1543,1542],[1542,1548],[1548,1558],],// alpha1 (891)
[ [1559,1560],[1560,1561],[1561,1562],[1562,1559],],// alpha1 (892)
[ [1563,1564],[1564,1565],[1565,1566],[1566,1563],],// alpha1 (893)
[ [1566,1567],[1567,1568],[1568,1563],[1563,1566],],// alpha1 (894)
[ [1569,1570],[1570,1571],[1571,1572],[1572,1569],],// alpha1 (895)
[ [1567,1569],[1569,1572],[1572,1568],[1568,1567],],// alpha1 (896)
[ [1573,1574],[1574,1575],[1575,1576],[1576,1573],],// alpha1 (897)
[ [1573,1577],[1577,1578],[1578,1576],[1576,1573],],// alpha1 (898)

],
[
//BuildingPart88
[ [2501,2502],[2502,2503],[2503,2504],[2504,2501],],// alpha1 (1480)
[ [2505,2506],[2506,2502],[2502,2503],[2503,2505],],// alpha1 (1481)
[ [2507,2508],[2508,2501],[2501,2504],[2504,2507],],// alpha1 (1482)
[ [2506,2508],[2508,2507],[2507,2505],[2505,2506],],// alpha1 (1483)
[ [2508,2506],[2506,2502],[2502,2501],[2501,2508],],// alpha1 (1484)
[ [2503,2504],[2504,2507],[2507,2505],[2505,2503],],// alpha1 (1485)

],
[
//BuildingPart55
[ [1501,1298],[1298,1297],[1297,1502],[1502,1503],[1503,1504],[1504,1505],[1505,1506],[1506,1457],[1457,1470],[1470,1507],[1507,1508],[1508,1509],[1509,1510],[1510,1501],],// alpha1 (867)
[ [1511,1317],[1317,1298],[1298,1501],[1501,1511],],// alpha1 (868)
[ [1501,1510],[1510,1512],[1512,1511],[1511,1501],],// alpha1 (869)
[ [1513,1514],[1514,1506],[1506,1505],[1505,1513],],// alpha1 (870)
[ [1307,1515],[1515,1502],[1502,1297],[1297,1307],],// alpha1 (871)
[ [1515,1307],[1307,1317],[1317,1511],[1511,1512],[1512,1516],[1516,1517],[1517,1518],[1518,1477],[1477,1474],[1474,1514],[1514,1513],[1513,1519],[1519,1520],[1520,1515],],// alpha1 (872)
[ [1520,1519],[1519,1504],[1504,1503],[1503,1520],],// alpha1 (873)
[ [1519,1513],[1513,1505],[1505,1504],[1504,1519],],// alpha1 (874)
[ [1515,1520],[1520,1503],[1503,1502],[1502,1515],],// alpha1 (875)
[ [1297,1298],[1298,1317],[1317,1307],[1307,1297],],// alpha1 (876)
[ [1506,1514],[1514,1474],[1474,1457],[1457,1506],],// alpha1 (877)
[ [1521,1522],[1522,1523],[1523,1524],[1524,1521],],// alpha1 (878)
[ [1524,1525],[1525,1526],[1526,1521],[1521,1524],],// alpha1 (879)
[ [1527,1528],[1528,1529],[1529,1530],[1530,1527],],// alpha1 (880)
[ [1531,1527],[1527,1530],[1530,1532],[1532,1531],],// alpha1 (881)
[ [1528,1533],[1533,1534],[1534,1529],[1529,1528],],// alpha1 (882)

],
[
//BuildingPart77
[ [2409,1506],[1506,1514],[1514,2410],[2410,2409],],// alpha1 (1410)
[ [1514,2411],[2411,2412],[2412,1506],[1506,1514],],// alpha1 (1411)
[ [2409,1506],[1506,2412],[2412,2413],[2413,2409],],// alpha1 (1412)
[ [2414,2411],[2411,1514],[1514,2410],[2410,2414],],// alpha1 (1413)
[ [2411,2414],[2414,2413],[2413,2412],[2412,2411],],// alpha1 (1414)
[ [2414,2410],[2410,2409],[2409,2413],[2413,2414],],// alpha1 (1415)

],
[
//BuildingPart52
[ [1393,1394],[1394,1395],[1395,1396],[1396,1352],[1352,1351],[1351,1393],],// alpha1 (806)
[ [1393,1397],[1397,1398],[1398,1350],[1350,1349],[1349,1399],[1399,1400],[1400,1401],[1401,1402],[1402,1403],[1403,1394],[1394,1393],],// alpha1 (807)
[ [1358,1404],[1404,1399],[1399,1349],[1349,1358],],// alpha1 (808)
[ [1404,1405],[1405,1400],[1400,1399],[1399,1404],],// alpha1 (809)
[ [1406,1407],[1407,1397],[1397,1398],[1398,1406],],// alpha1 (810)
[ [1407,1408],[1408,1393],[1393,1397],[1397,1407],],// alpha1 (811)
[ [1367,1406],[1406,1398],[1398,1350],[1350,1367],],// alpha1 (812)
[ [1408,1407],[1407,1289],[1289,1366],[1366,1408],],// alpha1 (813)
[ [1406,1367],[1367,1289],[1289,1407],[1407,1406],],// alpha1 (814)
[ [1408,1366],[1366,1365],[1365,1409],[1409,1410],[1410,1411],[1411,1408],],// alpha1 (815)
[ [1393,1408],[1408,1411],[1411,1394],[1394,1393],],// alpha1 (816)
[ [1408,1393],[1393,1351],[1351,1366],[1366,1408],],// alpha1 (817)
[ [1351,1290],[1290,1288],[1288,1397],[1397,1393],[1393,1351],],// alpha1 (818)
[ [1288,1397],[1397,1407],[1407,1289],[1289,1288],],// alpha1 (819)
[ [1412,1405],[1405,1404],[1404,1358],[1358,1367],[1367,1406],[1406,1407],[1407,1408],[1408,1411],[1411,1413],[1413,1414],[1414,1412],],// alpha1 (820)
[ [1350,1398],[1398,1397],[1397,1288],[1288,1290],[1290,1350],],// alpha1 (821)
[ [1413,1403],[1403,1402],[1402,1414],[1414,1413],],// alpha1 (822)
[ [1403,1413],[1413,1411],[1411,1394],[1394,1403],],// alpha1 (823)
[ [1410,1395],[1395,1394],[1394,1411],[1411,1410],],// alpha1 (824)
[ [1395,1410],[1410,1409],[1409,1396],[1396,1395],],// alpha1 (825)
[ [1351,1352],[1352,1365],[1365,1366],[1366,1351],],// alpha1 (826)
[ [1365,1352],[1352,1396],[1396,1409],[1409,1365],],// alpha1 (827)
[ [1351,1366],[1366,1289],[1289,1290],[1290,1351],],// alpha1 (828)
[ [1350,1367],[1367,1358],[1358,1349],[1349,1350],],// alpha1 (829)
[ [1367,1350],[1350,1290],[1290,1289],[1289,1367],],// alpha1 (830)
[ [1401,1400],[1400,1405],[1405,1412],[1412,1401],],// alpha1 (831)
[ [1401,1412],[1412,1414],[1414,1402],[1402,1401],],// alpha1 (832)

],
[
//BuildingPart54
[ [1457,1458],[1458,1459],[1459,1460],[1460,1461],[1461,1462],[1462,1463],[1463,1417],[1417,1416],[1416,1464],[1464,1465],[1465,1466],[1466,1467],[1467,1468],[1468,1469],[1469,1470],[1470,1457],],// alpha1 (849)
[ [1471,1431],[1431,1417],[1417,1463],[1463,1471],],// alpha1 (850)
[ [1472,1473],[1473,1461],[1461,1460],[1460,1472],],// alpha1 (851)
[ [1474,1475],[1475,1458],[1458,1457],[1457,1474],],// alpha1 (852)
[ [1473,1476],[1476,1462],[1462,1461],[1461,1473],],// alpha1 (853)
[ [1476,1471],[1471,1463],[1463,1462],[1462,1476],],// alpha1 (854)
[ [1477,1478],[1478,1479],[1479,1480],[1480,1481],[1481,1482],[1482,1483],[1483,1436],[1436,1431],[1431,1471],[1471,1476],[1476,1473],[1473,1472],[1472,1484],[1484,1475],[1475,1474],[1474,1477],],// alpha1 (855)
[ [1483,1482],[1482,1465],[1465,1464],[1464,1483],],// alpha1 (856)
[ [1482,1481],[1481,1466],[1466,1465],[1465,1482],],// alpha1 (857)
[ [1459,1484],[1484,1472],[1472,1460],[1460,1459],],// alpha1 (858)
[ [1484,1459],[1459,1458],[1458,1475],[1475,1484],],// alpha1 (859)
[ [1457,1470],[1470,1477],[1477,1474],[1474,1457],],// alpha1 (860)
[ [1485,1486],[1486,1487],[1487,1488],[1488,1485],],// alpha1 (861)
[ [1489,1487],[1487,1486],[1486,1490],[1490,1489],],// alpha1 (862)
[ [1491,1492],[1492,1493],[1493,1494],[1494,1491],],// alpha1 (863)
[ [1495,1491],[1491,1494],[1494,1496],[1496,1495],],// alpha1 (864)
[ [1492,1497],[1497,1498],[1498,1493],[1493,1492],],// alpha1 (865)
[ [1496,1499],[1499,1500],[1500,1495],[1495,1496],],// alpha1 (866)

],

[
//BuildingPart78
[ [1484,2415],[2415,2416],[2416,1459],[1459,1484],],// alpha1 (1416)
[ [1459,2417],[2417,2418],[2418,2416],[2416,1459],],// alpha1 (1417)
[ [2415,2419],[2419,2420],[2420,1484],[1484,2415],],// alpha1 (1418)
[ [2419,2415],[2415,2416],[2416,2418],[2418,2419],],// alpha1 (1419)
[ [1459,2417],[2417,2420],[2420,1484],[1484,1459],],// alpha1 (1420)
[ [2420,2419],[2419,2418],[2418,2417],[2417,2420],],// alpha1 (1421)

],

[
//BuildingPart51
[ [1337,1338],[1338,1339],[1339,1340],[1340,1341],[1341,1342],[1342,1343],[1343,1344],[1344,1345],[1345,1346],[1346,1347],[1347,1348],[1348,1349],[1349,1350],[1350,1290],[1290,1351],[1351,1352],[1352,1353],[1353,1354],[1354,1337],],// alpha1 (785)
[ [1339,1338],[1338,1355],[1355,1356],[1356,1339],],// alpha1 (786)
[ [1357,1358],[1358,1349],[1349,1348],[1348,1357],],// alpha1 (787)
[ [1359,1360],[1360,1361],[1361,1356],[1356,1355],[1355,1362],[1362,1363],[1363,1364],[1364,1365],[1365,1366],[1366,1289],[1289,1367],[1367,1358],[1358,1357],[1357,1368],[1368,1369],[1369,1370],[1370,1371],[1371,1372],[1372,1359],],// alpha1 (788)
[ [1360,1359],[1359,1342],[1342,1341],[1341,1360],],// alpha1 (789)
[ [1359,1372],[1372,1343],[1343,1342],[1342,1359],],// alpha1 (790)
[ [1371,1370],[1370,1345],[1345,1344],[1344,1371],],// alpha1 (791)
[ [1370,1369],[1369,1346],[1346,1345],[1345,1370],],// alpha1 (792)
[ [1368,1357],[1357,1348],[1348,1347],[1347,1368],],// alpha1 (793)
[ [1372,1371],[1371,1344],[1344,1343],[1343,1372],],// alpha1 (794)
[ [1346,1369],[1369,1368],[1368,1347],[1347,1346],],// alpha1 (795)
[ [1360,1361],[1361,1340],[1340,1341],[1341,1360],],// alpha1 (796)
[ [1356,1361],[1361,1340],[1340,1339],[1339,1356],],// alpha1 (797)
[ [1373,1374],[1374,1375],[1375,1376],[1376,1373],],// alpha1 (798)
[ [1377,1378],[1378,1379],[1379,1380],[1380,1377],],// alpha1 (799)
[ [1381,1377],[1377,1380],[1380,1382],[1382,1381],],// alpha1 (800)
[ [1378,1373],[1373,1376],[1376,1379],[1379,1378],],// alpha1 (801)
[ [1383,1384],[1384,1385],[1385,1386],[1386,1383],],// alpha1 (802)
[ [1387,1388],[1388,1389],[1389,1390],[1390,1387],],// alpha1 (803)
[ [1388,1391],[1391,1392],[1392,1389],[1389,1388],],// alpha1 (804)
[ [1384,1392],[1392,1391],[1391,1385],[1385,1384],],// alpha1 (805)

],

[
//BuildingPart89
[ [2509,2510],[2510,2511],[2511,2512],[2512,2509],],// alpha1 (1486)
[ [2513,2514],[2514,2515],[2515,2516],[2516,2513],],// alpha1 (1487)
[ [2513,2516],[2516,2510],[2510,2509],[2509,2513],],// alpha1 (1488)
[ [2514,2513],[2513,2509],[2509,2512],[2512,2514],],// alpha1 (1489)
[ [2510,2511],[2511,2515],[2515,2516],[2516,2510],],// alpha1 (1490)
[ [2515,2514],[2514,2512],[2512,2511],[2511,2515],],// alpha1 (1491)

],

[
//BuildingPart53
[ [1415,1416],[1416,1417],[1417,1418],[1418,1419],[1419,1420],[1420,1421],[1421,1422],[1422,1423],[1423,1424],[1424,1425],[1425,1426],[1426,1427],[1427,1428],[1428,1415],],// alpha1 (833)
[ [1429,1430],[1430,1422],[1422,1421],[1421,1429],],// alpha1 (834)
[ [1431,1432],[1432,1418],[1418,1417],[1417,1431],],// alpha1 (835)
[ [1433,1429],[1429,1421],[1421,1420],[1420,1433],],// alpha1 (836)
[ [1434,1433],[1433,1420],[1420,1419],[1419,1434],],// alpha1 (837)
[ [1432,1434],[1434,1419],[1419,1418],[1418,1432],],// alpha1 (838)
[ [1435,1436],[1436,1416],[1416,1415],[1415,1435],],// alpha1 (839)
[ [1415,1428],[1428,1437],[1437,1435],[1435,1415],],// alpha1 (840)
[ [1436,1435],[1435,1437],[1437,1438],[1438,1439],[1439,1440],[1440,1441],[1441,1442],[1442,1430],[1430,1429],[1429,1433],[1433,1434],[1434,1432],[1432,1431],[1431,1436],],// alpha1 (841)
[ [1422,1430],[1430,1442],[1442,1423],[1423,1422],],// alpha1 (842)
[ [1417,1416],[1416,1436],[1436,1431],[1431,1417],],// alpha1 (843)
[ [1443,1444],[1444,1445],[1445,1446],[1446,1443],],// alpha1 (844)
[ [1444,1447],[1447,1448],[1448,1445],[1445,1444],],// alpha1 (845)
[ [1449,1450],[1450,1451],[1451,1452],[1452,1449],],// alpha1 (846)
[ [1453,1454],[1454,1455],[1455,1456],[1456,1453],],// alpha1 (847)
[ [1454,1449],[1449,1452],[1452,1455],[1455,1454],],// alpha1 (848)

],
[
//BuildingPart79
[ [2421,2422],[2422,2423],[2423,2424],[2424,2421],],// alpha1 (1422)
[ [2425,2426],[2426,2427],[2427,2428],[2428,2425],],// alpha1 (1423)
[ [2426,2425],[2425,2421],[2421,2424],[2424,2426],],// alpha1 (1424)
[ [2425,2428],[2428,2422],[2422,2421],[2421,2425],],// alpha1 (1425)
[ [2422,2423],[2423,2427],[2427,2428],[2428,2422],],// alpha1 (1426)
[ [2427,2426],[2426,2424],[2424,2423],[2423,2427],],// alpha1 (1427)

],

[
//BuildingPart57
[ [1579,1341],[1341,1340],[1340,1580],[1580,1581],[1581,1582],[1582,1583],[1583,1584],[1584,1585],[1585,1586],[1586,1587],[1587,1588],[1588,1589],[1589,1590],[1590,1579],],// alpha1 (899)
[ [1591,1592],[1592,1590],[1590,1589],[1589,1591],],// alpha1 (900)
[ [1593,1594],[1594,1595],[1595,1596],[1596,1597],[1597,1361],[1361,1360],[1360,1598],[1598,1592],[1592,1591],[1591,1599],[1599,1600],[1600,1601],[1601,1602],[1602,1593],],// alpha1 (901)
[ [1592,1598],[1598,1579],[1579,1590],[1590,1592],],// alpha1 (902)
[ [1598,1360],[1360,1341],[1341,1579],[1579,1598],],// alpha1 (903)
[ [1597,1596],[1596,1581],[1581,1580],[1580,1597],],// alpha1 (904)
[ [1588,1599],[1599,1591],[1591,1589],[1589,1588],],// alpha1 (905)
[ [1599,1588],[1588,1587],[1587,1600],[1600,1599],],// alpha1 (906)
[ [1603,1604],[1604,1605],[1605,1606],[1606,1603],],// alpha1 (907)
[ [1603,1607],[1607,1608],[1608,1606],[1606,1603],],// alpha1 (908)
[ [1609,1610],[1610,1611],[1611,1612],[1612,1609],],// alpha1 (909)
[ [1612,1613],[1613,1614],[1614,1609],[1609,1612],],// alpha1 (910)
[ [1615,1616],[1616,1617],[1617,1618],[1618,1615],],// alpha1 (911)
[ [1619,1620],[1620,1621],[1621,1622],[1622,1619],],// alpha1 (912)
[ [1618,1623],[1623,1624],[1624,1615],[1615,1618],],// alpha1 (913)
[ [1623,1619],[1619,1622],[1622,1624],[1624,1623],],// alpha1 (914)

],
[
//BuildingPart90
[ [2517,2518],[2518,1588],[1588,2519],[2519,2517],],// alpha1 (1492)
[ [2520,1599],[1599,1588],[1588,2518],[2518,2520],],// alpha1 (1493)
[ [2521,2522],[2522,2517],[2517,2519],[2519,2521],],// alpha1 (1494)
[ [2520,2522],[2522,2521],[2521,1599],[1599,2520],],// alpha1 (1495)
[ [2522,2520],[2520,2518],[2518,2517],[2517,2522],],// alpha1 (1496)
[ [1588,2519],[2519,2521],[2521,1599],[1599,1588],],// alpha1 (1497)

],

[
//BuildingPart60
[ [1715,1716],[1716,1717],[1717,1718],[1718,1719],[1719,1720],[1720,1721],[1721,1722],[1722,1723],[1723,1724],[1724,1424],[1424,1423],[1423,1725],[1725,1726],[1726,1715],],// alpha1 (952)
[ [1442,1727],[1727,1725],[1725,1423],[1423,1442],],// alpha1 (953)
[ [1728,1729],[1729,1718],[1718,1717],[1717,1728],],// alpha1 (954)
[ [1730,1728],[1728,1717],[1717,1716],[1716,1730],],// alpha1 (955)
[ [1731,1730],[1730,1716],[1716,1715],[1715,1731],],// alpha1 (956)
[ [1441,1732],[1732,1733],[1733,1734],[1734,1735],[1735,1736],[1736,1737],[1737,1729],[1729,1728],[1728,1730],[1730,1731],[1731,1738],[1738,1727],[1727,1442],[1442,1441],],// alpha1 (957)
[ [1736,1735],[1735,1721],[1721,1720],[1720,1736],],// alpha1 (958)
[ [1726,1738],[1738,1731],[1731,1715],[1715,1726],],// alpha1 (959)
[ [1738,1726],[1726,1725],[1725,1727],[1727,1738],],// alpha1 (960)
[ [1423,1424],[1424,1441],[1441,1442],[1442,1423],],// alpha1 (961)
[ [1739,1740],[1740,1741],[1741,1742],[1742,1739],],// alpha1 (962)
[ [1743,1739],[1739,1742],[1742,1744],[1744,1743],],// alpha1 (963)
[ [1745,1746],[1746,1747],[1747,1748],[1748,1745],],// alpha1 (964)
[ [1749,1750],[1750,1751],[1751,1752],[1752,1749],],// alpha1 (965)
[ [1748,1749],[1749,1752],[1752,1745],[1745,1748],],// alpha1 (966)
[ [1750,1753],[1753,1754],[1754,1751],[1751,1750],],// alpha1 (967)

],

[
//BuildingPart80
[ [2429,2430],[2430,2431],[2431,2432],[2432,2429],],// alpha1 (1428)
[ [2433,2434],[2434,2429],[2429,2432],[2432,2433],],// alpha1 (1429)
[ [2434,2435],[2435,2430],[2430,2429],[2429,2434],],// alpha1 (1430)
[ [2433,2436],[2436,2431],[2431,2432],[2432,2433],],// alpha1 (1431)
[ [2435,2436],[2436,2431],[2431,2430],[2430,2435],],// alpha1 (1432)
[ [2435,2434],[2434,2433],[2433,2436],[2436,2435],],// alpha1 (1433)

],
[
//BuildingPart59
[ [1679,1680],[1680,1627],[1627,1626],[1626,1681],[1681,1682],[1682,1683],[1683,1684],[1684,1685],[1685,1586],[1586,1585],[1585,1686],[1686,1687],[1687,1688],[1688,1679],],// alpha1 (936)
[ [1689,1690],[1690,1684],[1684,1683],[1683,1689],],// alpha1 (937)
[ [1691,1689],[1689,1683],[1683,1682],[1682,1691],],// alpha1 (938)
[ [1680,1679],[1679,1692],[1692,1693],[1693,1680],],// alpha1 (939)
[ [1690,1694],[1694,1685],[1685,1684],[1684,1690],],// alpha1 (940)
[ [1695,1691],[1691,1682],[1682,1681],[1681,1695],],// alpha1 (941)
[ [1658,1695],[1695,1681],[1681,1626],[1626,1658],],// alpha1 (942)
[ [1691,1695],[1695,1658],[1658,1657],[1657,1693],[1693,1692],[1692,1696],[1696,1697],[1697,1698],[1698,1602],[1602,1601],[1601,1694],[1694,1690],[1690,1689],[1689,1691],],// alpha1 (943)
[ [1601,1586],[1586,1685],[1685,1694],[1694,1601],],// alpha1 (944)
[ [1586,1601],[1601,1602],[1602,1585],[1585,1586],],// alpha1 (945)
[ [1699,1700],[1700,1701],[1701,1702],[1702,1699],],// alpha1 (946)
[ [1701,1703],[1703,1704],[1704,1700],[1700,1701],],// alpha1 (947)
[ [1705,1706],[1706,1707],[1707,1708],[1708,1705],],// alpha1 (948)
[ [1709,1710],[1710,1711],[1711,1712],[1712,1709],],// alpha1 (949)
[ [1713,1709],[1709,1712],[1712,1714],[1714,1713],],// alpha1 (950)
[ [1710,1705],[1705,1708],[1708,1711],[1711,1710],],// alpha1 (951)

],
[
//BuildingPart91
[ [2523,2524],[2524,2525],[2525,2526],[2526,2523],],// alpha1 (1498)
[ [2525,2526],[2526,2527],[2527,2528],[2528,2525],],// alpha1 (1499)
[ [2529,2530],[2530,2527],[2527,2528],[2528,2529],],// alpha1 (1500)
[ [2527,2530],[2530,2523],[2523,2526],[2526,2527],],// alpha1 (1501)
[ [2530,2529],[2529,2524],[2524,2523],[2523,2530],],// alpha1 (1502)
[ [2529,2528],[2528,2525],[2525,2524],[2524,2529],],// alpha1 (1503)

],
[
//BuildingPart62
[ [1799,1719],[1719,1718],[1718,1800],[1800,1801],[1801,1802],[1802,1803],[1803,1804],[1804,1756],[1756,1755],[1755,1805],[1805,1806],[1806,1807],[1807,1808],[1808,1799],],// alpha1 (984)
[ [1729,1809],[1809,1800],[1800,1718],[1718,1729],],// alpha1 (985)
[ [1810,1737],[1737,1719],[1719,1799],[1799,1810],],// alpha1 (986)
[ [1799,1808],[1808,1811],[1811,1810],[1810,1799],],// alpha1 (987)
[ [1812,1813],[1813,1814],[1814,1776],[1776,1775],[1775,1815],[1815,1816],[1816,1817],[1817,1818],[1818,1809],[1809,1729],[1729,1737],[1737,1810],[1810,1811],[1811,1812],],// alpha1 (988)
[ [1809,1818],[1818,1801],[1801,1800],[1800,1809],],// alpha1 (989)
[ [1817,1816],[1816,1803],[1803,1802],[1802,1817],],// alpha1 (990)
[ [1818,1817],[1817,1802],[1802,1801],[1801,1818],],// alpha1 (991)
[ [1816,1815],[1815,1804],[1804,1803],[1803,1816],],// alpha1 (992)
[ [1718,1719],[1719,1737],[1737,1729],[1729,1718],],// alpha1 (993)
[ [1804,1815],[1815,1775],[1775,1756],[1756,1804],],// alpha1 (994)
[ [1819,1820],[1820,1821],[1821,1822],[1822,1819],],// alpha1 (995)
[ [1820,1823],[1823,1824],[1824,1821],[1821,1820],],// alpha1 (996)
[ [1825,1826],[1826,1827],[1827,1828],[1828,1825],],// alpha1 (997)
[ [1829,1825],[1825,1828],[1828,1830],[1830,1829],],// alpha1 (998)
[ [1831,1829],[1829,1830],[1830,1832],[1832,1831],],// alpha1 (999)

],
[
//BuildingPart81
[ [2437,2438],[2438,2439],[2439,2440],[2440,2437],],// alpha1 (1434)
[ [2441,2442],[2442,2438],[2438,2437],[2437,2441],],// alpha1 (1435)
[ [2443,2444],[2444,2440],[2440,2439],[2439,2443],],// alpha1 (1436)
[ [2443,2442],[2442,2441],[2441,2444],[2444,2443],],// alpha1 (1437)
[ [2440,2437],[2437,2441],[2441,2444],[2444,2440],],// alpha1 (1438)
[ [2442,2443],[2443,2439],[2439,2438],[2438,2442],],// alpha1 (1439)

],
[
//BuildingPart58
[ [1625,1626],[1626,1627],[1627,1628],[1628,1629],[1629,1630],[1630,1631],[1631,1632],[1632,1633],[1633,1634],[1634,1635],[1635,1636],[1636,1637],[1637,1638],[1638,1639],[1639,1640],[1640,1641],[1641,1642],[1642,1643],[1643,1625],],// alpha1 (915)
[ [1644,1645],[1645,1637],[1637,1636],[1636,1644],],// alpha1 (916)
[ [1645,1646],[1646,1638],[1638,1637],[1637,1645],],// alpha1 (917)
[ [1646,1647],[1647,1639],[1639,1638],[1638,1646],],// alpha1 (918)
[ [1648,1647],[1647,1646],[1646,1645],[1645,1644],[1644,1649],[1649,1650],[1650,1651],[1651,1652],[1652,1653],[1653,1654],[1654,1655],[1655,1656],[1656,1657],[1657,1658],[1658,1659],[1659,1660],[1660,1661],[1661,1662],[1662,1648],],// alpha1 (919)
[ [1628,1627],[1627,1657],[1657,1656],[1656,1628],],// alpha1 (920)
[ [1647,1648],[1648,1640],[1640,1639],[1639,1647],],// alpha1 (921)
[ [1660,1659],[1659,1625],[1625,1643],[1643,1660],],// alpha1 (922)
[ [1659,1658],[1658,1626],[1626,1625],[1625,1659],],// alpha1 (923)
[ [1642,1641],[1641,1662],[1662,1661],[1661,1642],],// alpha1 (924)
[ [1656,1655],[1655,1629],[1629,1628],[1628,1656],],// alpha1 (925)
[ [1661,1660],[1660,1643],[1643,1642],[1642,1661],],// alpha1 (926)
[ [1655,1654],[1654,1630],[1630,1629],[1629,1655],],// alpha1 (927)
[ [1627,1626],[1626,1658],[1658,1657],[1657,1627],],// alpha1 (928)
[ [1640,1648],[1648,1662],[1662,1641],[1641,1640],],// alpha1 (929)
[ [1663,1664],[1664,1665],[1665,1666],[1666,1663],],// alpha1 (930)
[ [1667,1668],[1668,1669],[1669,1670],[1670,1667],],// alpha1 (931)
[ [1671,1667],[1667,1670],[1670,1672],[1672,1671],],// alpha1 (932)
[ [1673,1671],[1671,1672],[1672,1674],[1674,1673],],// alpha1 (933)
[ [1666,1673],[1673,1674],[1674,1663],[1663,1666],],// alpha1 (934)
[ [1675,1676],[1676,1677],[1677,1678],[1678,1675],],// alpha1 (935)

],
[
//BuildingPart92
[ [2531,2532],[2532,2533],[2533,2534],[2534,2531],],// alpha1 (1504)
[ [2535,2536],[2536,2531],[2531,2534],[2534,2535],],// alpha1 (1505)
[ [2535,2537],[2537,2538],[2538,2536],[2536,2535],],// alpha1 (1506)
[ [2536,2538],[2538,2532],[2532,2531],[2531,2536],],// alpha1 (1507)
[ [2537,2535],[2535,2534],[2534,2533],[2533,2537],],// alpha1 (1508)
[ [2537,2538],[2538,2532],[2532,2533],[2533,2537],],// alpha1 (1509)

],
[
//BuildingPart61
[ [1755,1756],[1756,1757],[1757,1758],[1758,1759],[1759,1760],[1760,1761],[1761,1762],[1762,1763],[1763,1764],[1764,1765],[1765,1766],[1766,1767],[1767,1768],[1768,1755],],// alpha1 (968)
[ [1769,1770],[1770,1762],[1762,1761],[1761,1769],],// alpha1 (969)
[ [1771,1769],[1769,1761],[1761,1760],[1760,1771],],// alpha1 (970)
[ [1772,1771],[1771,1760],[1760,1759],[1759,1772],],// alpha1 (971)
[ [1773,1774],[1774,1775],[1775,1776],[1776,1777],[1777,1778],[1778,1779],[1779,1780],[1780,1781],[1781,1782],[1782,1770],[1770,1769],[1769,1771],[1771,1772],[1772,1773],],// alpha1 (972)
[ [1775,1774],[1774,1757],[1757,1756],[1756,1775],],// alpha1 (973)
[ [1781,1780],[1780,1765],[1765,1764],[1764,1781],],// alpha1 (974)
[ [1756,1755],[1755,1776],[1776,1775],[1775,1756],],// alpha1 (975)
[ [1758,1773],[1773,1772],[1772,1759],[1759,1758],],// alpha1 (976)
[ [1773,1758],[1758,1757],[1757,1774],[1774,1773],],// alpha1 (977)
[ [1783,1784],[1784,1785],[1785,1786],[1786,1783],],// alpha1 (978)
[ [1787,1783],[1783,1786],[1786,1788],[1788,1787],],// alpha1 (979)
[ [1789,1790],[1790,1791],[1791,1792],[1792,1789],],// alpha1 (980)
[ [1793,1794],[1794,1795],[1795,1796],[1796,1793],],// alpha1 (981)
[ [1797,1793],[1793,1796],[1796,1798],[1798,1797],],// alpha1 (982)
[ [1792,1797],[1797,1798],[1798,1789],[1789,1792],],// alpha1 (983)

],
[
//BuildingPart82
[ [2445,2446],[2446,2447],[2447,2448],[2448,2445],],// alpha1 (1440)
[ [2449,2450],[2450,2447],[2447,2448],[2448,2449],],// alpha1 (1441)
[ [2451,2452],[2452,2446],[2446,2445],[2445,2451],],// alpha1 (1442)
[ [2450,2452],[2452,2451],[2451,2449],[2449,2450],],// alpha1 (1443)
[ [2452,2450],[2450,2447],[2447,2446],[2446,2452],],// alpha1 (1444)
[ [2448,2445],[2445,2451],[2451,2449],[2449,2448],],// alpha1 (1445)

],
[
//BuildingPart63
[ [1833,1834],[1834,1835],[1835,1836],[1836,1833],],// alpha1 (1000)
[ [1837,1838],[1838,1834],[1834,1833],[1833,1839],[1839,1840],[1840,1841],[1841,1837],],// alpha1 (1001)
[ [1838,1842],[1842,1843],[1843,1835],[1835,1834],[1834,1838],],// alpha1 (1002)
[ [1839,1833],[1833,1836],[1836,1844],[1844,1845],[1845,1846],[1846,1839],],// alpha1 (1003)
[ [1847,1848],[1848,1841],[1841,1840],[1840,1849],[1849,1850],[1850,1851],[1851,1852],[1852,1853],[1853,1854],[1854,1855],[1855,1856],[1856,1857],[1857,1858],[1858,1847],],// alpha1 (1004)
[ [1859,1860],[1860,1861],[1861,1862],[1862,1863],[1863,1847],[1847,1858],[1858,1864],[1864,1865],[1865,1866],[1866,1867],[1867,1868],[1868,1869],[1869,1870],[1870,1871],[1871,1872],[1872,1873],[1873,1874],[1874,1859],],// alpha1 (1005)
[ [1848,1847],[1847,1863],[1863,1862],[1862,1837],[1837,1841],[1841,1848],],// alpha1 (1006)
[ [1838,1837],[1837,1862],[1862,1861],[1861,1842],[1842,1838],],// alpha1 (1007)
[ [1875,1876],[1876,1872],[1872,1871],[1871,1875],],// alpha1 (1008)
[ [1877,1636],[1636,1635],[1635,1874],[1874,1873],[1873,1877],],// alpha1 (1009)
[ [1878,1879],[1879,1865],[1865,1857],[1857,1856],[1856,1855],[1855,1854],[1854,1878],],// alpha1 (1010)
[ [1857,1865],[1865,1864],[1864,1858],[1858,1857],],// alpha1 (1011)
[ [1876,1877],[1877,1873],[1873,1872],[1872,1876],],// alpha1 (1012)
[ [1845,1880],[1880,1881],[1881,1882],[1882,1883],[1883,1851],[1851,1850],[1850,1849],[1849,1840],[1840,1839],[1839,1846],[1846,1845],],// alpha1 (1013)
[ [1884,1885],[1885,1851],[1851,1883],[1883,1884],],// alpha1 (1014)
[ [1886,1887],[1887,1845],[1845,1846],[1846,1886],],// alpha1 (1015)
[ [1886,1888],[1888,1889],[1889,1890],[1890,1891],[1891,1885],[1885,1884],[1884,1892],[1892,1893],[1893,1887],[1887,1886],],// alpha1 (1016)
[ [1846,1839],[1839,1888],[1888,1886],[1886,1846],],// alpha1 (1017)
[ [1885,1891],[1891,1850],[1850,1851],[1851,1885],],// alpha1 (1018)
[ [1891,1890],[1890,1849],[1849,1850],[1850,1891],],// alpha1 (1019)
[ [1888,1894],[1894,1833],[1833,1839],[1839,1888],],// alpha1 (1020)
[ [1894,1895],[1895,1836],[1836,1833],[1833,1894],],// alpha1 (1021)
[ [1895,1894],[1894,1888],[1888,1886],[1886,1887],[1887,1896],[1896,1895],],// alpha1 (1022)
[ [1893,1892],[1892,1882],[1882,1881],[1881,1880],[1880,1893],],// alpha1 (1023)
[ [1839,1840],[1840,1889],[1889,1888],[1888,1839],],// alpha1 (1024)
[ [1892,1884],[1884,1883],[1883,1882],[1882,1892],],// alpha1 (1025)
[ [1897,1898],[1898,1853],[1853,1852],[1852,1897],],// alpha1 (1026)
[ [1899,1900],[1900,1857],[1857,1856],[1856,1899],],// alpha1 (1027)
[ [1901,1899],[1899,1856],[1856,1855],[1855,1901],],// alpha1 (1028)
[ [1898,1902],[1902,1854],[1854,1853],[1853,1898],],// alpha1 (1029)
[ [1894,1903],[1903,1834],[1834,1833],[1833,1894],],// alpha1 (1030)
[ [1903,1904],[1904,1835],[1835,1834],[1834,1903],],// alpha1 (1031)
[ [1885,1897],[1897,1852],[1852,1851],[1851,1885],],// alpha1 (1032)
[ [1890,1889],[1889,1840],[1840,1849],[1849,1890],],// alpha1 (1033)
[ [1903,1894],[1894,1895],[1895,1904],[1904,1903],],// alpha1 (1034)
[ [1855,1854],[1854,1902],[1902,1901],[1901,1855],],// alpha1 (1035)
[ [1905,1906],[1906,1841],[1841,1848],[1848,1905],],// alpha1 (1036)
[ [1902,1907],[1907,1878],[1878,1854],[1854,1902],],// alpha1 (1037)
[ [1907,1908],[1908,1879],[1879,1878],[1878,1907],],// alpha1 (1038)
[ [1906,1889],[1889,1888],[1888,1894],[1894,1903],[1903,1909],[1909,1910],[1910,1906],],// alpha1 (1039)
[ [1838,1837],[1837,1910],[1910,1909],[1909,1838],],// alpha1 (1040)
[ [1847,1858],[1858,1911],[1911,1912],[1912,1847],],// alpha1 (1041)
[ [1903,1909],[1909,1838],[1838,1834],[1834,1903],],// alpha1 (1042)
[ [1909,1903],[1903,1904],[1904,1913],[1913,1914],[1914,1909],],// alpha1 (1043)
[ [1897,1885],[1885,1891],[1891,1890],[1890,1889],[1889,1906],[1906,1905],[1905,1912],[1912,1911],[1911,1900],[1900,1899],[1899,1901],[1901,1902],[1902,1898],[1898,1897],],// alpha1 (1044)
[ [1912,1905],[1905,1848],[1848,1847],[1847,1912],],// alpha1 (1045)
[ [1889,1906],[1906,1841],[1841,1840],[1840,1889],],// alpha1 (1046)
[ [1915,1916],[1916,1862],[1862,1863],[1863,1915],],// alpha1 (1047)
[ [1874,1873],[1873,1917],[1917,1918],[1918,1874],],// alpha1 (1048)
[ [1906,1910],[1910,1837],[1837,1841],[1841,1906],],// alpha1 (1049)
[ [1919,1920],[1920,1867],[1867,1866],[1866,1919],],// alpha1 (1050)
[ [1921,1922],[1922,1871],[1871,1870],[1870,1921],],// alpha1 (1051)
[ [1869,1868],[1868,1923],[1923,1924],[1924,1869],],// alpha1 (1052)
[ [1925,1919],[1919,1866],[1866,1865],[1865,1925],],// alpha1 (1053)
[ [1916,1910],[1910,1837],[1837,1862],[1862,1916],],// alpha1 (1054)
[ [1926,1925],[1925,1900],[1900,1911],[1911,1926],],// alpha1 (1055)
[ [1926,1911],[1911,1858],[1858,1864],[1864,1926],],// alpha1 (1056)
[ [1923,1920],[1920,1867],[1867,1868],[1868,1923],],// alpha1 (1057)
[ [1927,1928],[1928,1918],[1918,1917],[1917,1929],[1929,1922],[1922,1921],[1921,1924],[1924,1923],[1923,1920],[1920,1919],[1919,1925],[1925,1926],[1926,1911],[1911,1912],[1912,1915],[1915,1916],[1916,1930],[1930,1927],],// alpha1 (1058)
[ [1909,1914],[1914,1842],[1842,1838],[1838,1909],],// alpha1 (1059)
[ [1900,1911],[1911,1858],[1858,1857],[1857,1900],],// alpha1 (1060)
[ [1910,1916],[1916,1915],[1915,1912],[1912,1905],[1905,1906],[1906,1910],],// alpha1 (1061)
[ [1908,1925],[1925,1865],[1865,1879],[1879,1908],],// alpha1 (1062)
[ [1900,1925],[1925,1908],[1908,1907],[1907,1902],[1902,1901],[1901,1899],[1899,1900],],// alpha1 (1063)
[ [1916,1930],[1930,1861],[1861,1862],[1862,1916],],// alpha1 (1064)
[ [1924,1921],[1921,1870],[1870,1869],[1869,1924],],// alpha1 (1065)
[ [1925,1926],[1926,1864],[1864,1865],[1865,1925],],// alpha1 (1066)
[ [1900,1925],[1925,1865],[1865,1857],[1857,1900],],// alpha1 (1067)
[ [1912,1915],[1915,1863],[1863,1847],[1847,1912],],// alpha1 (1068)
[ [1930,1916],[1916,1910],[1910,1909],[1909,1914],[1914,1930],],// alpha1 (1069)
[ [1922,1929],[1929,1872],[1872,1871],[1871,1922],],// alpha1 (1070)
[ [1931,1929],[1929,1917],[1917,1932],[1932,1931],],// alpha1 (1071)
[ [1933,1922],[1922,1929],[1929,1931],[1931,1933],],// alpha1 (1072)
[ [1931,1932],[1932,1877],[1877,1876],[1876,1931],],// alpha1 (1073)
[ [1932,1644],[1644,1636],[1636,1877],[1877,1932],],// alpha1 (1074)
[ [1929,1931],[1931,1876],[1876,1872],[1872,1929],],// alpha1 (1075)
[ [1933,1931],[1931,1876],[1876,1875],[1875,1933],],// alpha1 (1076)
[ [1873,1872],[1872,1929],[1929,1917],[1917,1873],],// alpha1 (1077)
[ [1932,1917],[1917,1873],[1873,1877],[1877,1932],],// alpha1 (1078)
[ [1644,1932],[1932,1917],[1917,1918],[1918,1649],[1649,1644],],// alpha1 (1079)
[ [1922,1933],[1933,1875],[1875,1871],[1871,1922],],// alpha1 (1080)
[ [1874,1918],[1918,1649],[1649,1635],[1635,1874],],// alpha1 (1081)
[ [1928,1859],[1859,1874],[1874,1918],[1918,1928],],// alpha1 (1082)
[ [1927,1860],[1860,1859],[1859,1928],[1928,1927],],// alpha1 (1083)
[ [1927,1860],[1860,1861],[1861,1930],[1930,1927],],// alpha1 (1084)
[ [1913,1843],[1843,1842],[1842,1914],[1914,1913],],// alpha1 (1085)
[ [1843,1913],[1913,1904],[1904,1835],[1835,1843],],// alpha1 (1086)
[ [1835,1904],[1904,1895],[1895,1836],[1836,1835],],// alpha1 (1087)
[ [1836,1895],[1895,1896],[1896,1844],[1844,1836],],// alpha1 (1088)
[ [1861,1930],[1930,1914],[1914,1842],[1842,1861],],// alpha1 (1089)
[ [1636,1644],[1644,1649],[1649,1635],[1635,1636],],// alpha1 (1090)
[ [1887,1845],[1845,1880],[1880,1893],[1893,1887],],// alpha1 (1091)
[ [1845,1887],[1887,1896],[1896,1844],[1844,1845],],// alpha1 (1092)

],
[
//BuildingPart65
[ [1763,1762],[1762,1989],[1989,1990],[1990,1991],[1991,1992],[1992,1993],[1993,1994],[1994,1995],[1995,1996],[1996,1997],[1997,1998],[1998,1999],[1999,2000],[2000,2001],[2001,2002],[2002,2003],[2003,1763],],// alpha1 (1112)
[ [2000,1999],[1999,2004],[2004,2005],[2005,2000],],// alpha1 (1113)
[ [2006,1782],[1782,1763],[1763,2003],[2003,2006],],// alpha1 (1114)
[ [2007,2008],[2008,1991],[1991,1990],[1990,2007],],// alpha1 (1115)
[ [2009,2007],[2007,1990],[1990,1989],[1989,2009],],// alpha1 (1116)
[ [2005,2010],[2010,2001],[2001,2000],[2000,2005],],// alpha1 (1117)
[ [2010,2011],[2011,2002],[2002,2001],[2001,2010],],// alpha1 (1118)
[ [2011,2006],[2006,2003],[2003,2002],[2002,2011],],// alpha1 (1119)
[ [2012,2013],[2013,1993],[1993,1992],[1992,2012],],// alpha1 (1120)
[ [2008,2012],[2012,1992],[1992,1991],[1991,2008],],// alpha1 (1121)
[ [2009,1770],[1770,1782],[1782,2006],[2006,2011],[2011,2010],[2010,2005],[2005,2004],[2004,2014],[2014,2015],[2015,2016],[2016,2017],[2017,2018],[2018,2013],[2013,2012],[2012,2008],[2008,2007],[2007,2009],],// alpha1 (1122)
[ [1770,2009],[2009,1989],[1989,1762],[1762,1770],],// alpha1 (1123)
[ [1762,1763],[1763,1782],[1782,1770],[1770,1762],],// alpha1 (1124)
[ [1993,2013],[2013,2018],[2018,1994],[1994,1993],],// alpha1 (1125)
[ [2019,2020],[2020,2021],[2021,2022],[2022,2019],],// alpha1 (1126)
[ [2020,2023],[2023,2024],[2024,2021],[2021,2020],],// alpha1 (1127)
[ [2025,2026],[2026,2027],[2027,2028],[2028,2025],],// alpha1 (1128)
[ [2029,2025],[2025,2028],[2028,2030],[2030,2029],],// alpha1 (1129)
[ [2031,2029],[2029,2030],[2030,2032],[2032,2031],],// alpha1 (1130)

],

[
//BuildingPart83
[ [2453,2454],[2454,2455],[2455,2456],[2456,2453],],// alpha1 (1446)
[ [2457,2458],[2458,2459],[2459,2460],[2460,2457],],// alpha1 (1447)
[ [2459,2458],[2458,2454],[2454,2453],[2453,2459],],// alpha1 (1448)
[ [2458,2457],[2457,2455],[2455,2454],[2454,2458],],// alpha1 (1449)
[ [2456,2453],[2453,2459],[2459,2460],[2460,2456],],// alpha1 (1450)
[ [2457,2460],[2460,2456],[2456,2455],[2455,2457],],// alpha1 (1451)

],
[
//BuildingPart64
[ [1844,1934],[1934,1935],[1935,1936],[1936,1937],[1937,1938],[1938,1939],[1939,1940],[1940,1941],[1941,1942],[1942,1943],[1943,1944],[1944,1945],[1945,1946],[1946,1947],[1947,1948],[1948,1949],[1949,1880],[1880,1845],[1845,1844],],// alpha1 (1093)
[ [1939,1938],[1938,1950],[1950,1951],[1951,1939],],// alpha1 (1094)
[ [1951,1952],[1952,1941],[1941,1940],[1940,1939],[1939,1951],],// alpha1 (1095)
[ [1953,1954],[1954,1952],[1952,1951],[1951,1950],[1950,1955],[1955,1956],[1956,1957],[1957,1958],[1958,1896],[1896,1887],[1887,1893],[1893,1959],[1959,1960],[1960,1961],[1961,1962],[1962,1963],[1963,1953],],// alpha1 (1096)
[ [1963,1962],[1962,1946],[1946,1945],[1945,1963],],// alpha1 (1097)
[ [1961,1960],[1960,1948],[1948,1947],[1947,1961],],// alpha1 (1098)
[ [1962,1961],[1961,1947],[1947,1946],[1946,1962],],// alpha1 (1099)
[ [1959,1893],[1893,1880],[1880,1949],[1949,1959],],// alpha1 (1100)
[ [1953,1963],[1963,1945],[1945,1944],[1944,1953],],// alpha1 (1101)
[ [1959,1949],[1949,1948],[1948,1960],[1960,1959],],// alpha1 (1102)
[ [1964,1965],[1965,1966],[1966,1967],[1967,1964],],// alpha1 (1103)
[ [1964,1968],[1968,1969],[1969,1970],[1970,1967],[1967,1964],],// alpha1 (1104)
[ [1971,1972],[1972,1973],[1973,1974],[1974,1971],],// alpha1 (1105)
[ [1975,1976],[1976,1977],[1977,1978],[1978,1975],],// alpha1 (1106)
[ [1974,1979],[1979,1980],[1980,1971],[1971,1974],],// alpha1 (1107)
[ [1981,1975],[1975,1978],[1978,1982],[1982,1981],],// alpha1 (1108)
[ [1979,1981],[1981,1982],[1982,1980],[1980,1979],],// alpha1 (1109)
[ [1983,1984],[1984,1985],[1985,1986],[1986,1983],],// alpha1 (1110)
[ [1984,1987],[1987,1988],[1988,1985],[1985,1984],],// alpha1 (1111)

],
[
//BuildingPart93
[ [2539,2540],[2540,2541],[2541,2542],[2542,2539],],// alpha1 (1510)
[ [2543,2544],[2544,2545],[2545,2546],[2546,2543],],// alpha1 (1511)
[ [2540,2541],[2541,2545],[2545,2546],[2546,2540],],// alpha1 (1512)
[ [2545,2544],[2544,2542],[2542,2541],[2541,2545],],// alpha1 (1513)
[ [2543,2546],[2546,2540],[2540,2539],[2539,2543],],// alpha1 (1514)
[ [2544,2543],[2543,2539],[2539,2542],[2542,2544],],// alpha1 (1515)

],
[
//BuildingPart66
[ [2033,2034],[2034,2035],[2035,2036],[2036,2037],[2037,2038],[2038,2039],[2039,2040],[2040,2041],[2041,2042],[2042,2043],[2043,2044],[2044,2045],[2045,2046],[2046,2047],[2047,2048],[2048,2049],[2049,2050],[2050,2051],[2051,2052],[2052,2053],[2053,1995],[1995,1994],[1994,2033],],// alpha1 (1131)
[ [2054,2055],[2055,2044],[2044,2043],[2043,2054],],// alpha1 (1132)
[ [2055,2056],[2056,2045],[2045,2044],[2044,2055],],// alpha1 (1133)
[ [2057,2054],[2054,2043],[2043,2042],[2042,2057],],// alpha1 (1134)
[ [2058,2059],[2059,2049],[2049,2048],[2048,2058],],// alpha1 (1135)
[ [2060,2061],[2061,2041],[2041,2040],[2040,2060],],// alpha1 (1136)
[ [2062,2063],[2063,2037],[2037,2036],[2036,2062],],// alpha1 (1137)
[ [2064,2062],[2062,2036],[2036,2035],[2035,2064],],// alpha1 (1138)
[ [2061,2057],[2057,2042],[2042,2041],[2041,2061],],// alpha1 (1139)
[ [2063,2065],[2065,2038],[2038,2037],[2037,2063],],// alpha1 (1140)
[ [2040,2039],[2039,2066],[2066,2060],[2060,2040],],// alpha1 (1141)
[ [2018,2067],[2067,2033],[2033,1994],[1994,2018],],// alpha1 (1142)
[ [2068,2067],[2067,2018],[2018,2017],[2017,2069],[2069,2070],[2070,2071],[2071,2072],[2072,2059],[2059,2058],[2058,2073],[2073,2074],[2074,2056],[2056,2055],[2055,2054],[2054,2057],[2057,2061],[2061,2060],[2060,2066],[2066,2065],[2065,2063],[2063,2062],[2062,2064],[2064,2068],],// alpha1 (1143)
[ [2059,2072],[2072,2050],[2050,2049],[2049,2059],],// alpha1 (1144)
[ [1994,1995],[1995,2017],[2017,2018],[2018,1994],],// alpha1 (1145)
[ [2034,2068],[2068,2064],[2064,2035],[2035,2034],],// alpha1 (1146)
[ [2068,2034],[2034,2033],[2033,2067],[2067,2068],],// alpha1 (1147)
[ [2038,2065],[2065,2066],[2066,2039],[2039,2038],],// alpha1 (1148)
[ [2048,2047],[2047,2073],[2073,2058],[2058,2048],],// alpha1 (1149)
[ [2075,2076],[2076,2077],[2077,2078],[2078,2075],],// alpha1 (1150)
[ [2076,2079],[2079,2080],[2080,2077],[2077,2076],],// alpha1 (1151)
[ [2081,2082],[2082,2083],[2083,2084],[2084,2081],],// alpha1 (1152)
[ [2085,2086],[2086,2087],[2087,2088],[2088,2085],],// alpha1 (1153)
[ [2089,2085],[2085,2088],[2088,2090],[2090,2089],],// alpha1 (1154)
[ [2084,2089],[2089,2090],[2090,2081],[2081,2084],],// alpha1 (1155)

],
[
//BuildingPart84
[ [2461,2462],[2462,2463],[2463,2464],[2464,2465],[2465,2466],[2466,2461],],// alpha1 (1452)
[ [2467,2468],[2468,2463],[2463,2462],[2462,2467],],// alpha1 (1453)
[ [2468,2469],[2469,2464],[2464,2463],[2463,2468],],// alpha1 (1454)
[ [2469,2470],[2470,2465],[2465,2464],[2464,2469],],// alpha1 (1455)
[ [2471,2472],[2472,2466],[2466,2461],[2461,2471],],// alpha1 (1456)
[ [2469,2468],[2468,2467],[2467,2471],[2471,2472],[2472,2470],[2470,2469],],// alpha1 (1457)
[ [2461,2462],[2462,2467],[2467,2471],[2471,2461],],// alpha1 (1458)
[ [2470,2472],[2472,2466],[2466,2465],[2465,2470],],// alpha1 (1459)

],

[
//BuildingPart85
[ [2473,2474],[2474,2475],[2475,2476],[2476,2473],],// alpha1 (1460)
[ [2477,2478],[2478,2474],[2474,2473],[2473,2477],],// alpha1 (1461)
[ [2476,2473],[2473,2477],[2477,2479],[2479,2476],],// alpha1 (1462)
[ [2480,2478],[2478,2477],[2477,2479],[2479,2480],],// alpha1 (1463)
[ [2480,2479],[2479,2476],[2476,2475],[2475,2480],],// alpha1 (1464)
[ [2478,2480],[2480,2475],[2475,2474],[2474,2478],],// alpha1 (1465)

],
[
//BuildingPart67
[ [1941,2091],[2091,2092],[2092,2093],[2093,2094],[2094,2095],[2095,2096],[2096,2097],[2097,2098],[2098,2099],[2099,2100],[2100,2101],[2101,2102],[2102,1943],[1943,1942],[1942,1941],],// alpha1 (1156)
[ [2103,2104],[2104,2105],[2105,2106],[2106,2107],[2107,2108],[2108,2109],[2109,2110],[2110,2111],[2111,2112],[2112,2113],[2113,1952],[1952,1954],[1954,2114],[2114,2103],],// alpha1 (1157)
[ [2114,1954],[1954,1943],[1943,2102],[2102,2114],],// alpha1 (1158)
[ [2103,2114],[2114,2102],[2102,2101],[2101,2103],],// alpha1 (1159)
[ [1952,2113],[2113,2091],[2091,1941],[1941,1952],],// alpha1 (1160)
[ [2104,2103],[2103,2101],[2101,2100],[2100,2104],],// alpha1 (1161)
[ [2113,2112],[2112,2092],[2092,2091],[2091,2113],],// alpha1 (1162)
[ [1952,1941],[1941,1942],[1942,1943],[1943,1954],[1954,1952],],// alpha1 (1163)
[ [2099,2105],[2105,2104],[2104,2100],[2100,2099],],// alpha1 (1164)
[ [2105,2099],[2099,2098],[2098,2106],[2106,2105],],// alpha1 (1165)
[ [2115,2116],[2116,2117],[2117,2118],[2118,2115],],// alpha1 (1166)
[ [2115,2119],[2119,2120],[2120,2118],[2118,2115],],// alpha1 (1167)
[ [2121,2122],[2122,2123],[2123,2124],[2124,2121],],// alpha1 (1168)
[ [2125,2126],[2126,2127],[2127,2128],[2128,2125],],// alpha1 (1169)
[ [2124,2129],[2129,2130],[2130,2121],[2121,2124],],// alpha1 (1170)
[ [2129,2125],[2125,2128],[2128,2130],[2130,2129],],// alpha1 (1171)

],
[
//BuildingPart94
[ [2547,2548],[2548,2549],[2549,2550],[2550,2547],],// alpha1 (1516)
[ [2551,2552],[2552,2548],[2548,2547],[2547,2551],],// alpha1 (1517)
[ [2553,2554],[2554,2549],[2549,2550],[2550,2553],],// alpha1 (1518)
[ [2554,2552],[2552,2551],[2551,2553],[2553,2554],],// alpha1 (1519)
[ [2552,2554],[2554,2549],[2549,2548],[2548,2552],],// alpha1 (1520)
[ [2550,2547],[2547,2551],[2551,2553],[2553,2550],],// alpha1 (1521)

],
[
//BuildingPart68
[ [2131,2132],[2132,2133],[2133,2134],[2134,2097],[2097,2096],[2096,2135],[2135,2136],[2136,2137],[2137,2138],[2138,2139],[2139,2140],[2140,2141],[2141,2142],[2142,2143],[2143,2144],[2144,2145],[2145,2146],[2146,2147],[2147,2131],],// alpha1 (1172)
[ [2148,2149],[2149,2139],[2139,2138],[2138,2148],],// alpha1 (1173)
[ [2149,2150],[2150,2140],[2140,2139],[2139,2149],],// alpha1 (1174)
[ [2151,2152],[2152,2142],[2142,2141],[2141,2151],],// alpha1 (1175)
[ [2153,2154],[2154,2134],[2134,2133],[2133,2153],],// alpha1 (1176)
[ [2155,2153],[2153,2133],[2133,2132],[2132,2155],],// alpha1 (1177)
[ [2156,2108],[2108,2107],[2107,2154],[2154,2153],[2153,2155],[2155,2157],[2157,2158],[2158,2159],[2159,2160],[2160,2161],[2161,2162],[2162,2152],[2152,2151],[2151,2150],[2150,2149],[2149,2148],[2148,2163],[2163,2164],[2164,2156],],// alpha1 (1178)
[ [2157,2155],[2155,2132],[2132,2131],[2131,2157],],// alpha1 (1179)
[ [2158,2157],[2157,2131],[2131,2147],[2147,2158],],// alpha1 (1180)
[ [2150,2151],[2151,2141],[2141,2140],[2140,2150],],// alpha1 (1181)
[ [2161,2160],[2160,2145],[2145,2144],[2144,2161],],// alpha1 (1182)
[ [2160,2159],[2159,2146],[2146,2145],[2145,2160],],// alpha1 (1183)
[ [2159,2158],[2158,2147],[2147,2146],[2146,2159],],// alpha1 (1184)
[ [2134,2154],[2154,2107],[2107,2097],[2097,2134],],// alpha1 (1185)
[ [2143,2162],[2162,2161],[2161,2144],[2144,2143],],// alpha1 (1186)
[ [2162,2143],[2143,2142],[2142,2152],[2152,2162],],// alpha1 (1187)
[ [2096,2097],[2097,2107],[2107,2108],[2108,2096],],// alpha1 (1188)
[ [2138,2137],[2137,2163],[2163,2148],[2148,2138],],// alpha1 (1189)
[ [2165,2166],[2166,2167],[2167,2168],[2168,2165],],// alpha1 (1190)
[ [2169,2170],[2170,2171],[2171,2172],[2172,2169],],// alpha1 (1191)
[ [2170,2165],[2165,2168],[2168,2171],[2171,2170],],// alpha1 (1192)

],

[
//BuildingPart95
[ [2555,2556],[2556,2557],[2557,2558],[2558,2555],],// alpha1 (1522)
[ [2559,2560],[2560,2556],[2556,2555],[2555,2559],],// alpha1 (1523)
[ [2556,2557],[2557,2561],[2561,2560],[2560,2556],],// alpha1 (1524)
[ [2561,2562],[2562,2558],[2558,2557],[2557,2561],],// alpha1 (1525)
[ [2562,2559],[2559,2555],[2555,2558],[2558,2562],],// alpha1 (1526)
[ [2559,2562],[2562,2561],[2561,2560],[2560,2559],],// alpha1 (1527)

],
[
//BuildingPart96
[ [2563,2564],[2564,2565],[2565,2566],[2566,2563],],// alpha1 (1528)
[ [2567,2568],[2568,2565],[2565,2566],[2566,2567],],// alpha1 (1529)
[ [2569,2568],[2568,2565],[2565,2564],[2564,2569],],// alpha1 (1530)
[ [2568,2569],[2569,2570],[2570,2567],[2567,2568],],// alpha1 (1531)
[ [2570,2569],[2569,2564],[2564,2563],[2563,2570],],// alpha1 (1532)
[ [2566,2563],[2563,2570],[2570,2567],[2567,2566],],// alpha1 (1533)

],

[
//BuildingPart69
[ [2173,2174],[2174,2175],[2175,2176],[2176,2173],],// alpha1 (1193)
[ [2177,2173],[2173,2176],[2176,2178],[2178,2177],],// alpha1 (1194)
[ [2179,2180],[2180,2181],[2181,2182],[2182,2183],[2183,2184],[2184,2185],[2185,2186],[2186,2179],],// alpha1 (1195)
[ [2187,2186],[2186,2176],[2176,2173],[2173,2187],],// alpha1 (1196)
[ [2186,2179],[2179,2178],[2178,2176],[2176,2186],],// alpha1 (1197)
[ [2185,2186],[2186,2176],[2176,2175],[2175,2185],],// alpha1 (1198)
[ [2184,2185],[2185,2175],[2175,2174],[2174,2184],],// alpha1 (1199)
[ [2186,2187],[2187,2188],[2188,2179],[2179,2186],],// alpha1 (1200)
[ [2185,2184],[2184,2187],[2187,2186],[2186,2185],],// alpha1 (1201)
[ [2189,2190],[2190,2178],[2178,2176],[2176,2175],[2175,2174],[2174,2191],[2191,2192],[2192,2189],],// alpha1 (1202)
[ [2183,2182],[2182,2192],[2192,2191],[2191,2183],],// alpha1 (1203)
[ [2189,2181],[2181,2182],[2182,2192],[2192,2189],],// alpha1 (1204)
[ [2181,2189],[2189,2190],[2190,2180],[2180,2181],],// alpha1 (1205)
[ [2188,2177],[2177,2178],[2178,2179],[2179,2188],],// alpha1 (1206)
[ [2177,2188],[2188,2187],[2187,2173],[2173,2177],],// alpha1 (1207)
[ [2184,2174],[2174,2191],[2191,2183],[2183,2184],],// alpha1 (1208)
[ [2174,2184],[2184,2187],[2187,2173],[2173,2174],],// alpha1 (1209)
[ [2180,2190],[2190,2178],[2178,2179],[2179,2180],],// alpha1 (1210)

],
[
//BuildingPart71
[ [2239,2240],[2240,2241],[2241,2242],[2242,2239],],// alpha1 (1232)
[ [2243,2244],[2244,2245],[2245,2246],[2246,2243],],// alpha1 (1233)
[ [2246,2247],[2247,2248],[2248,2243],[2243,2246],],// alpha1 (1234)
[ [2249,2148],[2148,2138],[2138,2250],[2250,2249],],// alpha1 (1235)
[ [2182,2251],[2251,2252],[2252,2192],[2192,2182],],// alpha1 (1236)
[ [2251,2253],[2253,2254],[2254,2252],[2252,2251],],// alpha1 (1237)
[ [2251,2182],[2182,2181],[2181,2180],[2180,2255],[2255,2163],[2163,2148],[2148,2249],[2249,2244],[2244,2243],[2243,2248],[2248,2240],[2240,2239],[2239,2253],[2253,2251],],// alpha1 (1238)
[ [2244,2249],[2249,2250],[2250,2245],[2245,2244],],// alpha1 (1239)
[ [2253,2239],[2239,2242],[2242,2254],[2254,2253],],// alpha1 (1240)
[ [2256,2190],[2190,2189],[2189,2192],[2192,2252],[2252,2254],[2254,2242],[2242,2241],[2241,2247],[2247,2246],[2246,2245],[2245,2250],[2250,2138],[2138,2137],[2137,2256],],// alpha1 (1241)
[ [2248,2247],[2247,2241],[2241,2240],[2240,2248],],// alpha1 (1242)
[ [2257,2258],[2258,2259],[2259,2260],[2260,2257],],// alpha1 (1243)
[ [2261,2262],[2262,2263],[2263,2264],[2264,2261],],// alpha1 (1244)
[ [2265,2261],[2261,2264],[2264,2266],[2266,2265],],// alpha1 (1245)
[ [2267,2262],[2262,2263],[2263,2268],[2268,2267],],// alpha1 (1246)
[ [2258,2267],[2267,2268],[2268,2259],[2259,2258],],// alpha1 (1247)

],
[
//BuildingPart86
[ [2481,2482],[2482,2483],[2483,2484],[2484,2485],[2485,2486],[2486,2481],],// alpha1 (1466)
[ [2487,2488],[2488,2485],[2485,2484],[2484,2487],],// alpha1 (1467)
[ [2489,2490],[2490,2486],[2486,2481],[2481,2489],],// alpha1 (1468)
[ [2489,2491],[2491,2482],[2482,2481],[2481,2489],],// alpha1 (1469)
[ [2491,2492],[2492,2483],[2483,2482],[2482,2491],],// alpha1 (1470)
[ [2488,2490],[2490,2486],[2486,2485],[2485,2488],],// alpha1 (1471)
[ [2492,2487],[2487,2484],[2484,2483],[2483,2492],],// alpha1 (1472)
[ [2491,2489],[2489,2490],[2490,2488],[2488,2487],[2487,2492],[2492,2491],],// alpha1 (1473)

],

];


var surface = 
[
	
[
//BuildingPart24

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'RoofSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
'WallSurface' ,  //22			
'WallSurface' ,  //23			
'WallSurface' ,  //24			
'WallSurface' ,  //25			
'WallSurface' ,  //26			
'WallSurface' ,  //27			
'WallSurface' ,  //28			
'WallSurface' ,  //29			
'WallSurface' ,  //30			
'WallSurface' ,  //31			
'WallSurface' ,  //32			
'WallSurface' ,  //33			
'WallSurface' ,  //34			
'WallSurface' ,  //35			
'WallSurface' ,  //36			
'WallSurface' ,  //37			
'WallSurface' ,  //38			
'WallSurface' ,  //39			
'WallSurface' ,  //40			
'WallSurface' ,  //41			
'WallSurface' ,  //42			
'WallSurface' ,  //43			
'WallSurface' ,  //44			
'WallSurface' ,  //45			
'WallSurface' ,  //46			
'WallSurface' ,  //47			
'WallSurface' ,  //48			
'WallSurface' ,  //49			
'WallSurface' ,  //50			
'WallSurface' ,  //51			
'WallSurface' ,  //52			
'WallSurface' ,  //53			
'WallSurface' ,  //54			
'WallSurface' ,  //55			
'WallSurface' ,  //56			
'WallSurface' ,  //57			
'WallSurface' ,  //58			
'WallSurface' ,  //59			
'WallSurface' ,  //60			
'WallSurface' ,  //61			
'WallSurface' ,  //62			
'WallSurface' ,  //63			
'WallSurface' ,  //64			
'WallSurface' ,  //65			
'WallSurface' ,  //66			
'WallSurface' ,  //67			
'WallSurface' ,  //68			
'WallSurface' ,  //69			
'WallSurface' ,  //70			
'WallSurface' ,  //71			
'WallSurface' ,  //72			
'WallSurface' ,  //73			
'WallSurface' ,  //74			
'WallSurface' ,  //75			
'WallSurface' ,  //76			
'WallSurface' ,  //77			
'WallSurface' ,  //78			
'WallSurface' ,  //79			
'WallSurface' ,  //80			
'WallSurface' ,  //81			
'WallSurface' ,  //82			
'WallSurface' ,  //83			
'WallSurface' ,  //84			
'WallSurface' ,  //85			
'WallSurface' ,  //86			
'WallSurface' ,  //87			
'WallSurface' ,  //88			
'WallSurface' ,  //89			
'WallSurface' ,  //90			
'WallSurface' ,  //91			
'WallSurface' ,  //92			
'WallSurface' ,  //93			
'WallSurface' ,  //94			
'WallSurface' ,  //95			
'WallSurface' ,  //96			
'WallSurface' ,  //97			
'WallSurface' ,  //98			
'WallSurface' ,  //99			
'WallSurface' ,  //100			
'WallSurface' ,  //101			
'WallSurface' ,  //102			
'WallSurface' ,  //103			
'WallSurface' ,  //104			
'WallSurface' ,  //105			
'WallSurface' ,  //106			
'WallSurface' ,  //107			
'WallSurface' ,  //108			
'WallSurface' ,  //109			
'WallSurface' ,  //110			
'WallSurface' ,  //111			
'WallSurface' ,  //112			
'WallSurface' ,  //113			
'WallSurface' ,  //114			
'WallSurface' ,  //115			
'WallSurface' ,  //116			
'WallSurface' ,  //117			
],

[
//BuildingPart27

'WallSurface' ,  //1			
'RoofSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'GroundSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
],


[
//BuildingPart25

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'RoofSurface' ,  //7			
],

[
//BuildingPart26

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'RoofSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart23

'WallSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'RoofSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'GroundSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
'WallSurface' ,  //22			
'WallSurface' ,  //23			
'WallSurface' ,  //24			
'WallSurface' ,  //25			
'WallSurface' ,  //26			
],
[
//BuildingPart39

'GroundSurface' ,  //1			
'RoofSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart2

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
],
[
//BuildingPart28

'WallSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'RoofSurface' ,  //5			
'GroundSurface' ,  //6			
],
[
//BuildingPart8

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'RoofSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart40

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'RoofSurface' ,  //6			
],
[
//BuildingPart7

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart29

'WallSurface' ,  //1			
'GroundSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart4

'GroundSurface' ,  //1			
'GroundSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'RoofSurface' ,  //8			
'RoofSurface' ,  //9			
'RoofSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'GroundSurface' ,  //13			
'WallSurface' ,  //14			
'RoofSurface' ,  //15			
'GroundSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
'WallSurface' ,  //22			
'WallSurface' ,  //23			
'WallSurface' ,  //24			
'WallSurface' ,  //25			
'WallSurface' ,  //26			
'WallSurface' ,  //27			
],
[
//BuildingPart6

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'RoofSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
],
[
//BuildingPart30

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'RoofSurface' ,  //6			
],
[
//BuildingPart3

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'RoofSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
],
[
//BuildingPart41

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'RoofSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart5

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'RoofSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],

[
//BuildingPart31

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'RoofSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],

[
//BuildingPart9

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'RoofSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart42

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'RoofSurface' ,  //6			
],
[
//BuildingPart12

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'RoofSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart32

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'RoofSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart11

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'RoofSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart43

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'RoofSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart14

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart33

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'RoofSurface' ,  //6			
],
[
//BuildingPart10

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'RoofSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
],
[
//BuildingPart44

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'RoofSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],

[
//BuildingPart13

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'RoofSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart34

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'RoofSurface' ,  //6			
],
[
//BuildingPart15

'GroundSurface' ,  //1			
'GroundSurface' ,  //2			
'GroundSurface' ,  //3			
'GroundSurface' ,  //4			
'GroundSurface' ,  //5			
'GroundSurface' ,  //6			
'GroundSurface' ,  //7			
'GroundSurface' ,  //8			
'GroundSurface' ,  //9			
'GroundSurface' ,  //10			
'GroundSurface' ,  //11			
'GroundSurface' ,  //12			
'GroundSurface' ,  //13			
'GroundSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'RoofSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
'WallSurface' ,  //22			
'RoofSurface' ,  //23			
'WallSurface' ,  //24			
'WallSurface' ,  //25			
'WallSurface' ,  //26			
'WallSurface' ,  //27			
'WallSurface' ,  //28			
'WallSurface' ,  //29			
'WallSurface' ,  //30			
'WallSurface' ,  //31			
'WallSurface' ,  //32			
'WallSurface' ,  //33			
'WallSurface' ,  //34			
'RoofSurface' ,  //35			
'WallSurface' ,  //36			
'WallSurface' ,  //37			
'WallSurface' ,  //38			
'WallSurface' ,  //39			
'RoofSurface' ,  //40			
'WallSurface' ,  //41			
'WallSurface' ,  //42			
'WallSurface' ,  //43			
'RoofSurface' ,  //44			
'RoofSurface' ,  //45			
'WallSurface' ,  //46			
'WallSurface' ,  //47			
'WallSurface' ,  //48			
'WallSurface' ,  //49			
'WallSurface' ,  //50			
'WallSurface' ,  //51			
'WallSurface' ,  //52			
'WallSurface' ,  //53			
'WallSurface' ,  //54			
'WallSurface' ,  //55			
'RoofSurface' ,  //56			
'WallSurface' ,  //57			
'WallSurface' ,  //58			
'RoofSurface' ,  //59			
'WallSurface' ,  //60			
'WallSurface' ,  //61			
'RoofSurface' ,  //62			
'WallSurface' ,  //63			
'RoofSurface' ,  //64			
'WallSurface' ,  //65			
'WallSurface' ,  //66			
'WallSurface' ,  //67			
'WallSurface' ,  //68			
'WallSurface' ,  //69			
'RoofSurface' ,  //70			
'WallSurface' ,  //71			
'RoofSurface' ,  //72			
'RoofSurface' ,  //73			
'WallSurface' ,  //74			
'WallSurface' ,  //75			
'WallSurface' ,  //76			
'WallSurface' ,  //77			
'WallSurface' ,  //78			
'WallSurface' ,  //79			
'RoofSurface' ,  //80			
'WallSurface' ,  //81			
'WallSurface' ,  //82			
'WallSurface' ,  //83			
'WallSurface' ,  //84			
'WallSurface' ,  //85			
'WallSurface' ,  //86			
'WallSurface' ,  //87			
'WallSurface' ,  //88			
'WallSurface' ,  //89			
'WallSurface' ,  //90			
'WallSurface' ,  //91			
'WallSurface' ,  //92			
'WallSurface' ,  //93			
],

[
//BuildingPart17

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'RoofSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
],
[
//BuildingPart35

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'RoofSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart16

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'RoofSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
],
[
//BuildingPart45

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'RoofSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart18

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'RoofSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
'WallSurface' ,  //22			
'WallSurface' ,  //23			
'WallSurface' ,  //24			
'WallSurface' ,  //25			
],
[
//BuildingPart36

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'RoofSurface' ,  //7			
'WallSurface' ,  //8			
],

[
//BuildingPart37

'GroundSurface' ,  //1			
'RoofSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart19

'GroundSurface' ,  //1			
'RoofSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],


[
//BuildingPart46

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],

[
//BuildingPart20

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'RoofSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
],
[
//BuildingPart47

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],

[
//BuildingPart48

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'RoofSurface' ,  //5			
'WallSurface' ,  //6			
],

[
//BuildingPart21

'GroundSurface' ,  //1			
'GroundSurface' ,  //2			
'RoofSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'RoofSurface' ,  //8			
'RoofSurface' ,  //9			
'WallSurface' ,  //10			
'GroundSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
],

[
//BuildingPart22

'WallSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'RoofSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'GroundSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],


[
//BuildingPart38

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
],

[
//BuildingPart73

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'RoofSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
'WallSurface' ,  //22			
'WallSurface' ,  //23			
'WallSurface' ,  //24			
'WallSurface' ,  //25			
'WallSurface' ,  //26			
'WallSurface' ,  //27			
'WallSurface' ,  //28			
'WallSurface' ,  //29			
'WallSurface' ,  //30			
'WallSurface' ,  //31			
'WallSurface' ,  //32			
'WallSurface' ,  //33			
'WallSurface' ,  //34			
'WallSurface' ,  //35			
'WallSurface' ,  //36			
'WallSurface' ,  //37			
'WallSurface' ,  //38			
'WallSurface' ,  //39			
'WallSurface' ,  //40			
'WallSurface' ,  //41			
'WallSurface' ,  //42			
'WallSurface' ,  //43			
'WallSurface' ,  //44			
'WallSurface' ,  //45			
'WallSurface' ,  //46			
'WallSurface' ,  //47			
'WallSurface' ,  //48			
'WallSurface' ,  //49			
'WallSurface' ,  //50			
'WallSurface' ,  //51			
'WallSurface' ,  //52			
'WallSurface' ,  //53			
'WallSurface' ,  //54			
'WallSurface' ,  //55			
'WallSurface' ,  //56			
'WallSurface' ,  //57			
'WallSurface' ,  //58			
'WallSurface' ,  //59			
'WallSurface' ,  //60			
'WallSurface' ,  //61			
'WallSurface' ,  //62			
'WallSurface' ,  //63			
'WallSurface' ,  //64			
'WallSurface' ,  //65			
'WallSurface' ,  //66			
'WallSurface' ,  //67			
'WallSurface' ,  //68			
'WallSurface' ,  //69			
'WallSurface' ,  //70			
'WallSurface' ,  //71			
'WallSurface' ,  //72			
'WallSurface' ,  //73			
'WallSurface' ,  //74			
'WallSurface' ,  //75			
'WallSurface' ,  //76			
'WallSurface' ,  //77			
'WallSurface' ,  //78			
'WallSurface' ,  //79			
'WallSurface' ,  //80			
'WallSurface' ,  //81			
'WallSurface' ,  //82			
'WallSurface' ,  //83			
'WallSurface' ,  //84			
'WallSurface' ,  //85			
'WallSurface' ,  //86			
'WallSurface' ,  //87			
'WallSurface' ,  //88			
'WallSurface' ,  //89			
'WallSurface' ,  //90			
'WallSurface' ,  //91			
'WallSurface' ,  //92			
'WallSurface' ,  //93			
'WallSurface' ,  //94			
'WallSurface' ,  //95			
'WallSurface' ,  //96			
'WallSurface' ,  //97			
'WallSurface' ,  //98			
'WallSurface' ,  //99			
'WallSurface' ,  //100			
'WallSurface' ,  //101			
'WallSurface' ,  //102			
'WallSurface' ,  //103			
'WallSurface' ,  //104			
'WallSurface' ,  //105			
'WallSurface' ,  //106			
'WallSurface' ,  //107			
'WallSurface' ,  //108			
'WallSurface' ,  //109			
'WallSurface' ,  //110			
'WallSurface' ,  //111			
'WallSurface' ,  //112			
'WallSurface' ,  //113			
'WallSurface' ,  //114			
'WallSurface' ,  //115			
'WallSurface' ,  //116			
'WallSurface' ,  //117			
],

[
//BuildingPart70

'WallSurface' ,  //1			
'WallSurface' ,  //2			
'RoofSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'GroundSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
],


[
//BuildingPart74

'WallSurface' ,  //1			
'WallSurface' ,  //2			
'GroundSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'RoofSurface' ,  //7			
],

[
//BuildingPart75

'WallSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'GroundSurface' ,  //6			
],
[
//BuildingPart72

'WallSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'RoofSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'GroundSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
'WallSurface' ,  //22			
'WallSurface' ,  //23			
'WallSurface' ,  //24			
'WallSurface' ,  //25			
'WallSurface' ,  //26			
],
[
//BuildingPart87

'GroundSurface' ,  //1			
'RoofSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],

[
//BuildingPart50

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'RoofSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
],
[
//BuildingPart76

'WallSurface' ,  //1			
'WallSurface' ,  //2			
'RoofSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'GroundSurface' ,  //6			
],
[
//BuildingPart56

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'RoofSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart88

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart55

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'RoofSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart77

'WallSurface' ,  //1			
'WallSurface' ,  //2			
'GroundSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart52

'GroundSurface' ,  //1			
'GroundSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'RoofSurface' ,  //8			
'RoofSurface' ,  //9			
'RoofSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'GroundSurface' ,  //13			
'WallSurface' ,  //14			
'RoofSurface' ,  //15			
'GroundSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
'WallSurface' ,  //22			
'WallSurface' ,  //23			
'WallSurface' ,  //24			
'WallSurface' ,  //25			
'WallSurface' ,  //26			
'WallSurface' ,  //27			
],
[
//BuildingPart54

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'RoofSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
],
[
//BuildingPart78

'WallSurface' ,  //1			
'GroundSurface' ,  //2			
'RoofSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],

[
//BuildingPart51

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
],
[
//BuildingPart89

'GroundSurface' ,  //1			
'RoofSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart53

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'RoofSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart79

'GroundSurface' ,  //1			
'RoofSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart57

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'RoofSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart90

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart60

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'RoofSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart80

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'RoofSurface' ,  //6			
],
[
//BuildingPart59

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'RoofSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart91

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'RoofSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart62

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'RoofSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart81

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart58

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'RoofSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
],
[
//BuildingPart92

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'RoofSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart61

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'RoofSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart82

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart63

'GroundSurface' ,  //1			
'GroundSurface' ,  //2			
'GroundSurface' ,  //3			
'GroundSurface' ,  //4			
'GroundSurface' ,  //5			
'GroundSurface' ,  //6			
'GroundSurface' ,  //7			
'GroundSurface' ,  //8			
'GroundSurface' ,  //9			
'GroundSurface' ,  //10			
'GroundSurface' ,  //11			
'GroundSurface' ,  //12			
'GroundSurface' ,  //13			
'GroundSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'RoofSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
'WallSurface' ,  //22			
'RoofSurface' ,  //23			
'WallSurface' ,  //24			
'WallSurface' ,  //25			
'WallSurface' ,  //26			
'WallSurface' ,  //27			
'WallSurface' ,  //28			
'WallSurface' ,  //29			
'WallSurface' ,  //30			
'WallSurface' ,  //31			
'WallSurface' ,  //32			
'WallSurface' ,  //33			
'WallSurface' ,  //34			
'RoofSurface' ,  //35			
'WallSurface' ,  //36			
'WallSurface' ,  //37			
'WallSurface' ,  //38			
'WallSurface' ,  //39			
'RoofSurface' ,  //40			
'WallSurface' ,  //41			
'WallSurface' ,  //42			
'WallSurface' ,  //43			
'RoofSurface' ,  //44			
'RoofSurface' ,  //45			
'WallSurface' ,  //46			
'WallSurface' ,  //47			
'WallSurface' ,  //48			
'WallSurface' ,  //49			
'WallSurface' ,  //50			
'WallSurface' ,  //51			
'WallSurface' ,  //52			
'WallSurface' ,  //53			
'WallSurface' ,  //54			
'WallSurface' ,  //55			
'RoofSurface' ,  //56			
'WallSurface' ,  //57			
'WallSurface' ,  //58			
'RoofSurface' ,  //59			
'WallSurface' ,  //60			
'WallSurface' ,  //61			
'RoofSurface' ,  //62			
'WallSurface' ,  //63			
'RoofSurface' ,  //64			
'WallSurface' ,  //65			
'WallSurface' ,  //66			
'WallSurface' ,  //67			
'WallSurface' ,  //68			
'WallSurface' ,  //69			
'RoofSurface' ,  //70			
'WallSurface' ,  //71			
'RoofSurface' ,  //72			
'RoofSurface' ,  //73			
'WallSurface' ,  //74			
'WallSurface' ,  //75			
'WallSurface' ,  //76			
'WallSurface' ,  //77			
'WallSurface' ,  //78			
'WallSurface' ,  //79			
'RoofSurface' ,  //80			
'WallSurface' ,  //81			
'WallSurface' ,  //82			
'WallSurface' ,  //83			
'WallSurface' ,  //84			
'WallSurface' ,  //85			
'WallSurface' ,  //86			
'WallSurface' ,  //87			
'WallSurface' ,  //88			
'WallSurface' ,  //89			
'WallSurface' ,  //90			
'WallSurface' ,  //91			
'WallSurface' ,  //92			
'WallSurface' ,  //93			
],


[
//BuildingPart65

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'RoofSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
],
[
//BuildingPart83

'GroundSurface' ,  //1			
'RoofSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart64

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
],

[
//BuildingPart93

'GroundSurface' ,  //1			
'RoofSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart66

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'RoofSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
'WallSurface' ,  //22			
'WallSurface' ,  //23			
'WallSurface' ,  //24			
'WallSurface' ,  //25			
],

[
//BuildingPart84

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'RoofSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
],

[
//BuildingPart85

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart67

'GroundSurface' ,  //1			
'RoofSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],

[
//BuildingPart94

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart68

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'RoofSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'WallSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
'WallSurface' ,  //19			
'WallSurface' ,  //20			
'WallSurface' ,  //21			
],

[
//BuildingPart95

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'RoofSurface' ,  //6			
],

[
//BuildingPart96

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'RoofSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
],
[
//BuildingPart69

'GroundSurface' ,  //1			
'GroundSurface' ,  //2			
'RoofSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'RoofSurface' ,  //8			
'RoofSurface' ,  //9			
'GroundSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
'WallSurface' ,  //17			
'WallSurface' ,  //18			
],
[
//BuildingPart71

'WallSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'RoofSurface' ,  //7			
'WallSurface' ,  //8			
'WallSurface' ,  //9			
'GroundSurface' ,  //10			
'WallSurface' ,  //11			
'WallSurface' ,  //12			
'WallSurface' ,  //13			
'WallSurface' ,  //14			
'WallSurface' ,  //15			
'WallSurface' ,  //16			
],
[
//BuildingPart86

'GroundSurface' ,  //1			
'WallSurface' ,  //2			
'WallSurface' ,  //3			
'WallSurface' ,  //4			
'WallSurface' ,  //5			
'WallSurface' ,  //6			
'WallSurface' ,  //7			
'RoofSurface' ,  //8			
],

]         


/*
//To Display alpha-links on console
check_closedAlpha1(alpha0)
Alpha1(alpha0)
Alpha2(alpha0)

//find if the alpha1 is closed or not
function check_closedAlpha1(alpha0)
{
	new_count = 0, arr_a0=[]
	for( var i in alpha0)
	{	
		//console.log('BuildingPart',i)
		for ( var j in alpha0[i])
		{
			for ( var k in alpha0[i][j])
			{
				arr_a0.push(['a0('+new_count+') :',alpha0[i][j][k]])
				//console.log('a0('+new_count+') :',  alpha0[i][j][k])
				new_count = new_count + 1
			}
		}
	}
	console.log('a0',arr_a0)

	for ( var i in arr_a0)
	{
		//console.log(arr_a0[i][0] + arr_a0[i][1].join('-'))
	}
	
}

function Alpha1(alpha0)
{
	yes = 0
	for( var i in alpha0)
	{	
		for ( var j = 0; j < alpha0[i].length; j++)
		{
			a = alpha0[i][j].length - 1

			if (alpha0[i][j][0][0] != alpha0[i][j][a][1])
			{
				yes = yes +1
				console.log('array of alpha: ',i , '\nsurface', String(j) , '(' +surface[i][j] +") are not closed polygon")
			}
		}
	}
	
	new_count = 0, new_count2 =0, arr_a1=[]
	for( var i in alpha0)
	{	
		for ( var j in alpha0[i])
		{
			arr_a0=[]
			for ( var k in alpha0[i][j])
			{
				arr_a0.push('a0('+new_count+')')
				new_count = new_count + 1
			}
			alpha1_ = 'a1('+new_count2+') :'
			arr_a1.push([alpha1_,arr_a0])	
			new_count2 = new_count2 + 1
		}
	}
	console.log('Alpha1',arr_a1)

	for ( var i in arr_a1)
	{
		//console.log(arr_a1[i][0],arr_a1[i][1].join(' - '))
	}
}

function Alpha2(alpha0)
{
	new_count = 0, new_count2 =0, new_count3 = 0, arr_a2=[]
	for( var i in alpha0)
	{	
		arr_a1 =[]
		for ( var j in alpha0[i])
		{
			arr_a0=[]
			for ( var k in alpha0[i][j])
			{
				arr_a0.push('a0('+new_count+')')
				new_count = new_count + 1
			}
			alpha1_ = 'a1('+new_count2+')'
			arr_a1.push(alpha1_)	
			new_count2 = new_count2 + 1
		}
		alpha2_ = 'a2('+new_count3+') :'
		arr_a2.push([alpha2_ , arr_a1])
		new_count3 = new_count3 + 1

	}
	console.log('Alpha2',arr_a2)

	for ( var i in arr_a2)
	{
		//console.log(arr_a2[i][0],arr_a2[i][1].join(' - '))
	}
}
*/

//assign index for line
function createLinesGeometry(start_alpha, alpha_floor){

	t1 = 1, temp2 =[], idx = [] , id = 1 , total = 0
	for ( var i = start_alpha; i < alpha_floor; i++)
	{
		for (var j = 0; j < alpha0[i].length; j++)
		{
			for (var k = 0; k < alpha0[i][j].length; k++)
			{
				if ( i == 0 && j == 0)
				{
					continue;
				}
				else
				{
					total = total + 1
					if (k == 0)
					{
						aboi = id - 1
						idx.push(id - 1 , id)
					}

					else if ( k != 0)
					{
						if ( k == alpha0[i][j].length - 1)
						{
							idx.push(id - 1 , aboi)
						}

						else
						{
							idx.push(id - 1, id)
						}
					}

					temp2.push(points.vertices[alpha0[i][j][k][0]-1])
					id = id + 1
				}
				
			}
		}
	}
	
	const bg = new THREE.BufferGeometry().setFromPoints(temp2)
	bg.setIndex(idx)
	return [bg , total]
}

//Change connection Format
function conn_format()
{
	new_con =[]
	for ( var i in connection)
	{
		new_con1 =[]
		for( var j in connection[i])
		{
			bp1 = "BuildingPart"
			if (connection[i][j][0] == 0 || connection[i][j][0] == 47)
			{
				if (connection[i][j][0] == 0)
				{
					bp = "Floor 9's Corridor"
				}

				else
				{
					bp = "Floor 10's Corridor"
				}
			}

			else
			{
				aoi = String(connection[i][j][0])
				bp = bp1.concat(" ",aoi)
			}
			no = String(connection[i][j][1])
			surfaces_ = connection[i][j][2]
			
			result = bp.concat(": " , no , " " , surfaces_ , "\n")
			new_con1.push(result)
		}

		new_con.push(new_con1)
	}

	return new_con
}

//display Total Roof/Wall/Surface for each BP
function display_surface()
{
	surface_list =[]
	for ( var i in alpha0)
	{
		tr = 0, tw = 0, tg =0
		for (var j in alpha0[i])
		{
			if ( surface[i][j] == "RoofSurface")
			{
				tr = tr + 1
			}

			else if ( surface[i][j] == "WallSurface")
			{
				tw = tw + 1
			}

			else if ( surface[i][j] == "GroundSurface")
			{
				tg = tg + 1
			}
		}
		surface_list.push([tr,tw,tg])
	}

	//console.log('surface_list',surface_list)
	return surface_list
}

//find index of the triangle
function triangle_index ()
{
	newpoly = newpoly_face (poly_face)
	total_wall =[] , wall1 = 0
	total_roof =[] , roof1 = 0
	total_ground =[] , ground1 = 0
	for ( var i in newpoly)
	{
		for (var j in newpoly[i])
		{
			roof = 0, wall = 0 , ground = 0
			if ( surface[i][j] == "RoofSurface")
			{
				roof = newpoly[i][j].length
			}

			else if ( surface[i][j] == "WallSurface")
			{
				wall = newpoly[i][j].length
			}

			else if ( surface[i][j] == "GroundSurface")
			{
				ground = newpoly[i][j].length
			}

			roof1 = roof1 + roof
			wall1 = wall1 + wall 
			ground1 = ground1 + ground
		}
		total_roof.push(roof1)
		total_wall.push(wall1)
		total_ground.push(ground1)
	}

	return [total_roof,total_wall,total_ground]
}

//delete Scene
function removeEntitiy(object)
{
	var selectedobject = scene.getObjectByName(object.name)
	scene.remove(selectedobject)
}

function generateRandomColor() 
{
	var letters = '0123456789ABCDEF';
	var color = '#';
	for (var i = 0; i < 6; i++) {
	  color += letters[Math.floor(Math.random() * 16)];
	}
	return color;
  }
//convert xyz to xy coord
function coord_conv(a)
{
	if (a[2] == 0)
	{
		return [a[0] , a[1]]
	}

	else if (a[2] != 0)
	{
		return [a[0]/a[2] , a[1]/a[2]]
	}
}

// function for index
function index_count(index){
	if (index >= e_vertices.length)
	{
		
		return index % e_vertices.length
	}
	
	else if (index < 0)
	{     
		
		return index % e_vertices.length + e_vertices.length
		
	}
	
	else 
	{
		
		return index;
		
		
	}
	
}

// find vector
function find_vector( vb, va){

	if ( vb[2] ==  va[2] )
	{
		
		vab = [vb[0] - va[0], vb[1] - va[1], 0]
		return vab;
	}

	else if (va[2] !=0 && vb[2] !=0 )
	{
		
		vab = [(vb[0])/vb[2]  - (va[0] )/va[2], (vb[1] )/vb[2]  - (va[1])/va[2], 0];
		return vab
	}

	else if (vb[2] !=0 )
	{
		
		vab = [ (vb[0])/vb[2]  - (va[0]), (vb[1])/vb[2]  - (va[1]), 0]
		return vab;
	}

	else if (va[2] !=0 )
	{
		vab = [ (vb[0]) - (va[0])/va[2]  , (vb[1]) - (va[1])/va[2]  , 0]
		return vab;
	}

	

}

// crossproduct of the results
function cross_product(a, b){
	 //cz = axby − aybx
	 cz = (a[0] * b[1]) - (a[1] * b[0])
	 return cz;
}

//Chechk if any point in the triangle
function IsPointInTriangle(p, a, b, c){
	ac = find_vector(c,a);
	cb = find_vector(b,c);
	ba = find_vector(a,b);

	bp = find_vector(p,b);
	cp = find_vector(p,c);
	ap = find_vector(p,a);

	cross1 = cross_product(ba, bp);
	cross2 = cross_product(cb, cp);
	cross3 = cross_product(ac, ap);

	if (cross1 > 0 || cross2 > 0 || cross3 > 0)
	{
		// tiada point dalam triangle
		return false;
	}

	else
	{
		//console.log("point yang tak masuk:",p)
		// ada point dalam triangle
		return true;
	}
}

//check if the polygon is in clockwise or anti-clockwise
function clockwise_Checker (a, num_triangle , b)
{
	var total1 = 0, total2 = 0;
	for (var i = 0; i < a.length; i++)
	{
		if (a[i] > 0)
		{
			//kalau cz banyak positive
			var total1 = total1 + 1
		}

		else
		{
			total2 = total2 + 1
		}
		
	}

	
	if ( num_triangle == b-2 )
	{
		return false
	}

	else if (total1>=total2)
	{
		return false
	}

	else if (num_triangle != b-2 )
	{
		return true
	}

	else if ( total1<total2 )
	{
		return true
	}
}
// reverse the vertices when it in clockwise
function convert_e_vertices(e_vertices){
	return e_vertices.reverse()
}

// round the num to 5 decimal places
function round(num , n) {
	const d = Math.pow(10, n);
	return Math.round((num + Number.EPSILON) * d) / d;
  }
 
// find the rest of the point in another building
function point2(a)
{
	var point , arr_point = []
	for (var i = 0; i<alpha0.length;i++)  
	{
		
	var temp_p2 = []
	{
		for (var j = 0; j<alpha0[i].length; j++) // 
		{
			var temp_p1 = []

			for ( var k = 0 ; k<alpha0[i][j].length;k++)
			{
				if (i ==a )
				{
					continue
				}
				else
				{
					point = [round(points.vertices[alpha0[i][j][k][0] - 1].x , 5) , round(points.vertices[alpha0[i][j][k][0] - 1].y , 5) , round(points.vertices[alpha0[i][j][k][0] - 1].z , 5)];
					temp_p1.push(point)	
					
				}		
						
			}
			
			temp_p2.push(temp_p1)
		}
		arr_point.push(temp_p2)	

	}
	}

	return arr_point;
}

//check if point is same as the point in the another building or not
function check_point(a,b,c)
{
	var storeAlpha = []

	for (var i  = 0; i < alpha0.length; i++)
	{
		if (i == a)
		{
			continue
		}
		else
		{
			for(var j = 0 ; j < alpha0[i].length; j++)
			{
				for (var k = 0; k <alpha0[i][j].length; k++)
				{
					x = b[i][j][k][0];
					y = b[i][j][k][1];
					z = b[i][j][k][2];

					if (c[0] == x && c[1] == y && c[2] == z)
					{

						storeAlpha.push(alpha0[i][j][k][0]);
					}
					else
					{
						continue
					}
				}
			}
		}
	}
	return storeAlpha;
}

//function for remove duplicate in 2D array
function multiDimensionalUnique(arr) {
var uniques = [];
var itemsFound = {};
for(var i = 0, l = arr.length; i < l; i++) {
	var stringified = JSON.stringify(arr[i]);
	if(itemsFound[stringified]) { continue; }
	uniques.push(arr[i]);
	itemsFound[stringified] = true;
}
return uniques;
}

function remove_duplicate(building3)
{
	var newb1=[]
	for (var i in building3)
	{
		var newb = []
		for(var j in building3[i])
		{
			newb.push(building3[i][j][1])
		}
		 newb1.push([...new Set(newb)])
		
	}
	return newb1
}

function findBP_row (a) // a = building3
{
	var turn3=[]
	for(var i in alpha0)//totalBP
	{
		var turn2=[]
		jLoop: for (var j in alpha0[i])//Row dalam BP
		{
			var total = 0, turn1 = []

			for(var k in a[i])//alpha0
			{
				if (a[i].length>2)
				{

					var p = a[i][k]
					
					//find point tu di surfaces yang mana
					for(var l in alpha0[i][j])
					{
						t = alpha0[i][j].length
						var p1 = alpha0[i][j][l][0]
						
						if (p == p1)
						{							
							total = total + 1
						}
						
						else
						{
							continue ;
						}
					}

					if (total - t == 0)
					{
						turn1.push(i , j)
						break;		
					}
					
				}

				else
				{
					continue jLoop;
				}

			}
			
			if (turn1.length > 0)
			{
				turn2.push(turn1)
			}				
		}
		
		if (a[i].length == 2)
		{
			turn2.push("line" , a[i][0][1], a[i][1][1])			
		}

		turn3.push(turn2)
	}

	return turn3
}

function sortFunction(a, b) {
    if (a[0] === b[0]) {
        return 0;
    }
    else {
        return (a[0] < b[0]) ? -1 : 1;
    }
}

function find_tri(tri, newpolyface)
{
	BP = tri[0]
	sur = tri[1]

	new_tri = newpolyface[BP][sur]
	g = surface[BP][sur]
	new_tri1 =[]
	for ( var i in new_tri)
	{
		new_tri1.push([new_tri[i][0],new_tri[i][1],new_tri[i][2],g])
	}
	return new_tri1
}

function newpoly_face (poly_face)
{
	newpoly =[]
	for ( var i in alpha0)
	{
		if ( i == 0)
		{
			total = 0
		}

		total1 = alpha0[i].length + total
		newpoly1=[]

		for ( var j = total; j < total1; j++)
		{
			newpoly1.push(poly_face[j])
		}
		total = total1

		newpoly.push(newpoly1)
	}

	return newpoly
}

function poly_face_count(a)
{
	if (a.length != 0 || null)
	{
		var t = 0
		for(var i in alpha0)
		{
			for(var j in alpha0[i])
			{
				if ( i == a[0] && j == a[1])
				{
					a = poly_face[t]
					return a
				}
				t = t + 1
			}
		}
	}
}

function faces_index(new_tri)
{
	boroi =[]
	for ( var i in new_tri)
	{
		p1 = new_tri[i][0]
		p2 = new_tri[i][1]
		p3 = new_tri[i][2]
		sr = new_tri[i][3]
		boroi1 =[]
		
		if (sr == 'RoofSurface')
		{
			for ( var j in face_roof_f9.faces)
			{
				face1 = face_roof_f9.faces[j].a
				face2 = face_roof_f9.faces[j].b
				face3 = face_roof_f9.faces[j].c

				if ( p1 == face1 && p2 == face2 && p3 == face3)
				{
					boroi1.push(0 , j , 'RoofSurface')
					break;
				}
			}

			for ( var j in face_roof_f10.faces)
			{
				face1 = face_roof_f10.faces[j].a
				face2 = face_roof_f10.faces[j].b
				face3 = face_roof_f10.faces[j].c

				if ( p1 == face1 && p2 == face2 && p3 == face3)
				{
					boroi1.push(1 , j , 'RoofSurface')
					break;
				}
			}
		}

		else if (sr == 'WallSurface' )
		{
			for ( var j in face_wall_f9.faces)
			{
				face1 = face_wall_f9.faces[j].a
				face2 = face_wall_f9.faces[j].b
				face3 = face_wall_f9.faces[j].c

				if ( p1 == face1 && p2 == face2 && p3 == face3)
				{
					boroi1.push(0 , j , 'WallSurface')
					break;
				}
			}

			for ( var j in face_wall_f10.faces)
			{
				face1 = face_wall_f10.faces[j].a
				face2 = face_wall_f10.faces[j].b
				face3 = face_wall_f10.faces[j].c

				if ( p1 == face1 && p2 == face2 && p3 == face3)
				{
					boroi1.push(1 , j , 'WallSurface')
					break;
				}
			}
		}

		else if (sr == 'GroundSurface')
		{
			for ( var j in face_ground_f9.faces)
			{
				face1 = face_ground_f9.faces[j].a
				face2 = face_ground_f9.faces[j].b
				face3 = face_ground_f9.faces[j].c

				if ( p1 == face1 && p2 == face2 && p3 == face3)
				{
					boroi1.push(0 , j , 'GroundSurface')
					break;
				}
			}

			for ( var j in face_ground_f10.faces)
			{
				face1 = face_ground_f10.faces[j].a
				face2 = face_ground_f10.faces[j].b
				face3 = face_ground_f10.faces[j].c

				if ( p1 == face1 && p2 == face2 && p3 == face3)
				{
					boroi1.push(1 , j , 'GroundSurface')
					break;
				}
			}
		}
		boroi.push(boroi1)
	}

	return boroi
}

function find_connectedBP(a)
{
	var a2 = [] , b2 =[]
	for (var i in a)
	{
		var a1 = [], b1 = []
		for(var j in a[i])
		{
			var boi = a[i][j][0]
			a1.push(boi)
		}
		b2.push([...new Set(a1)])
	}
	return b2

}

//check ada line ke tak dalam connected building
function find_line1(building3,message,findBP1)
{
	BPin =[]
	for (var i =0; i < message.length; i++)
	{

		var BPin1= [] , BPin2 = [], check =0
		for (var j = 0 ; j < findBP1[i].length ; j++)
		{
			check = j + 1

			if (check == findBP1[i].length )
			{
				check = 0
				
				if (findBP1[i][j][0] == findBP1[i][check][0])
				{
					BPin2.push(findBP1[i][j][0])
				}
			}

			if (findBP1[i][j][0] != findBP1[i][check][0])
			{
				BPin2.push(findBP1[i][j][0])
			}
		}
		BPin.push(BPin2)
	}
	//console.log('BPin: ', BPin)

	arr_line =[]
	for (var i in BPin)
	{
		arr_line1=[]
		if (message[i].length != BPin[i].length)
		{
			for (var j = 0; j< message[i].length ; j++)
			{
				p = message[i][j]
				if ( BPin[i].includes(p) == false)
				{
					for ( var k in building3[i])
					{
						if ( p ==  building3[i][k][0])
						{
							arr_line1.push( [building3[i][k][0] ,building3[i][k][1]])
						}
					}
				}	
			}
		}
		arr_line.push(arr_line1)
	}
	return arr_line
}

function find_point(arr_line)
{
	for (var i = 0; i < arr_line.length; i++)
	{
		check = 0, total = 0 , sama=[]
		for (var j = 0; j < arr_line[i].length; j++)
		{
			sama.push(arr_line[i][j])
			total = total +1
			check = j +1

			if ( check == arr_line[i].length)
			{
				check = 0
				for ( var k in sama)
				{
					p1 = [round(points.vertices[sama[k][1]-1].x,5) , round(points.vertices[sama[k][1]-1].y,5),round(points.vertices[sama[k][1]-1].z,5)]
					
					for ( var l in sama)
					{
						if ( k != l)
						{
							
							p2 = [round(points.vertices[sama[l][1]-1].x,5) , round(points.vertices[sama[l][1]-1].y,5),round(points.vertices[sama[l][1]-1].z,5)]
							
							if (p1[0] == p2[0] && p1[1] == p2[1] && p1[2] == p2[2])
							{
								sama[l][1] = sama[k][1]
							}
						}
					}
				}		
			}

			else if ( arr_line[i][j][0] != arr_line[i][check][0])
			{
				for ( var k in sama)
				{
					p1 = [round(points.vertices[sama[k][1]-1].x,5) , round(points.vertices[sama[k][1]-1].y,5),round(points.vertices[sama[k][1]-1].z,5)]
					
					for ( var l in sama)
					{
						if ( k != l)
						{
							
							p2 = [round(points.vertices[sama[l][1]-1].x,5) , round(points.vertices[sama[l][1]-1].y,5),round(points.vertices[sama[l][1]-1].z,5)]
							
							if (p1[0] == p2[0] && p1[1] == p2[1] && p1[2] == p2[2])
							{
								sama[l][1] = sama[k][1]
							}
						}
					}
				}
				sama =[]
			}
		}	
	}
	
	for (var i in arr_line)
	{
		arr_line[i] = multiDimensionalUnique(arr_line[i])
	}

	
	//remove point from arr_line
	sharedPoint =[] , new_arrline =[]
	for (var i = 0; i < arr_line.length; i++)
	{
		total = 0 , check = 0 , sharedPoint1 =[] , new_arr_line1=[],point=[]
		for (var j = 0; j < arr_line[i].length; j++)
		{
			check = j +1
			total = total +1
			point.push(arr_line[i][j])
			if ( check == arr_line[i].length)
			{
				check = 0	
				if ( total == 1)
				{
					sharedPoint1.push(... new Set(point))
				}
				
				else
				{
					new_arr_line1.push(... new Set(point))
				}
			}

			else if ( arr_line[i][j][0] != arr_line[i][check][0])
			{
				
				if ( total == 1)
				{
					sharedPoint1.push(... new Set(point))
				}

				else
				{
					new_arr_line1.push(... new Set(point))
				}
				point=[]
				total = 0
			}
		}

		
		new_arrline.push(new_arr_line1)
		sharedPoint.push(sharedPoint1)
	}

	return ([new_arrline , sharedPoint])
}

function sort_line_order(findline1)
{
	store1 = [] , new_arr2=[], Check= 0, CountBP_Point =[],eachpoint=[]
	for ( var i in findline1)
	{
		store =[] , new_arr1=[], Total =0 , Total1 = 0, CountBP_Point1 =[],eachpoint1=[]
		for ( var j= 0; j < findline1[i].length ; j++)
		{
			Check = j+1
			Total = Total +1 , 
			Total1 = Total1 +1
			if ( Check == findline1[i].length)
			{
				Check = 0
				CountBP_Point1.push(Total)
				eachpoint1.push(Total1)
			}
			
			else if ( findline1[i][j][0] != findline1[i][Check][0])
			{
				CountBP_Point1.push(Total)
				eachpoint1.push(Total1)
				Total1 = 0
			}

			p1 = [round(points.vertices[findline1[i][j][1] - 1].x, 5), round(points.vertices[findline1[i][j][1] - 1].y, 5) , round(points.vertices[findline1[i][j][1] - 1].z, 5)]
			index = findline1[i][j][0]
			
			for(var k in alpha0[index])
			{
				for( var l in alpha0[index][k])
				{
					p2 = [round(points.vertices[alpha0[index][k][l][0] -1].x , 5), round(points.vertices[alpha0[index][k][l][0] -1].y , 5), round(points.vertices[alpha0[index][k][l][0] -1].z , 5)]
					
					if (p1[0] == p2[0] && p1[1] == p2[1] && p1[2] == p2[2] )
					{
						store.push([findline1[i][j][0],findline1[i][j][1],alpha0[index][k][l][0], k])	
					}
				}	
			}		
		}
		
		if ( CountBP_Point1.length == 1)
		{
			CountBP_Point1 = [store.length]
		}

		else
		{
			CountBP_Point2=[]
			for ( var j = 0; j < CountBP_Point1.length; j++)
			{
				l = CountBP_Point1[j]
				if ( j== 0)
				{
					count_store = 0
					for ( var k = 0; k < CountBP_Point1[j];k++ )
					{
						p1 = [findline1[i][k][0], findline1[i][k][1]]

						for ( var op = 0; op < store.length; op++)
						{
							if ( p1[0] == store[op][0] && p1[1] == store[op][1])
							{
								count_store = count_store +1
							}
						}
					}
					CountBP_Point2.push(count_store)
				}

				else
				{

					for ( var k = CountBP_Point1[j-1]; k < l;k++ )
					{
						p1 = [findline1[i][k][0], findline1[i][k][1]]

						for ( var op = 0; op < store.length; op++)
						{
							if ( p1[0] == store[op][0] &&p1[1] == store[op][1] )
							{
								count_store = count_store +1
							}
						}
					}
					CountBP_Point2.push(count_store)
				}
			}
			CountBP_Point1 = CountBP_Point2
		}
	
		if (CountBP_Point1.length == 1)
		{
			new_arr =[] , total =[], check = 0
			for ( var m = 0; m < store.length; m++)
			{

				p1 = store[m][3] , total=0 , new_arr=[] , totalcount =0
				new_arr.push(store[m])

				for ( var n = 0; n <store.length; n++)
				{
					if ( m != n)
					{
						p2 = store[n][3]
						if ( p1 == p2)
						{
							total = total +1 
							new_arr.push(store[n])
						}
					}
				}

				if (total == findline1[i].length - 1)
				{
					//break the array
					new_arr1.push(...new Set(new_arr))
					break;
				}
			}
		}

		else
		{
			
			for ( var a = 0; a< CountBP_Point1.length; a++)
			{
				if (a == 0)
				{
					for ( var b = 0; b< CountBP_Point1[a]; b++)
					{
						num = 0 , new_arr=[]
						p1 = store[b][3]
						new_arr.push(store[b])
						for ( var c = 0; c < CountBP_Point1[a]; c++)
						{
							if ( b!= c)
							{
								p2 = store[c][3]
								if ( p1==p2)
								{
									
									num = num +1
									new_arr.push(store[c])

									if ( num == eachpoint1[a] - 1)
									{
										new_arr1.push(...new Set(new_arr))
										c = CountBP_Point1[a]
										b = CountBP_Point1[a]
										break;
									}
								}
							}
						}	
					}
				}

				else
				{
					for ( var b = CountBP_Point1[a-1]; b< CountBP_Point1[a]; b++)
					{
						num = 0 , new_arr=[]
						p1 = store[b][3]
						new_arr.push(store[b])
						for ( var c = CountBP_Point1[a-1]; c < CountBP_Point1[a]; c++)
						{
							if ( b!= c)
							{
								p2 = store[c][3]
								if ( p1==p2)
								{
									num = num +1
									new_arr.push(store[c])

									if ( num == eachpoint1[a] - 1)
									{
										new_arr1.push(...new Set(new_arr))
										c = CountBP_Point1[a]
										b = CountBP_Point1[a]
										break;
									}
								}
							}

						}
						
					}
				}
			}
		}
		eachpoint.push(eachpoint1)
		CountBP_Point.push(CountBP_Point1)
		new_arr2.push(new_arr1)
		store1.push(store)
	}
	new_arr3 =[] 
	for( var u in new_arr2)
	{
		stress=[]
		for ( var v in new_arr2[u])
		{
			stress.push([new_arr2[u][v][0],new_arr2[u][v][2],new_arr2[u][v][3]])
		}
		
		new_arr3.push(stress)
	}

	for(var i in new_arr3)
	{
		new_arr3[i] = multiDimensionalUnique(new_arr3[i])
	}
	
	//console.log('eachpoint', eachpoint)
	//console.log('store1', store1)
	//console.log('CountBP_Point:', CountBP_Point)
	//console.log('new_arr3',new_arr3)
	//console.log('new_arr2: ' , new_arr2)
	

	indexlist2 =[]
	for ( var i in new_arr2)
	{
		indexlist1 =[]
		for ( var j in new_arr2[i])
		{
			index = new_arr2[i][j][0]
			p1 = new_arr2[i][j][2]
			indexlist =[]
			for ( var k in alpha0[index][new_arr2[i][j][3]])
			{
				p2 = alpha0[index][new_arr2[i][j][3]][k][0]

				if ( p1 == p2)
				{
					indexlist.push([p1,k])
					break;
				}
			}
			indexlist1 .push(...new Set(indexlist))
		}
		indexlist2.push(indexlist1)
	}
	
	//console.log('indexlist2 :' , indexlist2)
	max_num =[]
	for ( var i in indexlist2)
	{

		if (indexlist2[i].length != 0)
		{
			for( var j in indexlist2[i])
			{
				max1 = Number(indexlist2[i][j][1])
				if (j == 0)
				{
					max = Number(indexlist2[i][j][1])
				}

				if ( max1 >= max)
				{
					max = Number(indexlist2[i][j][1])
				}
			}
		}

		if (indexlist2[i].length == 0 )
		{
			max = 0
		}
		max_num.push(max)

	}
	new_line2=[]
	for ( var i =0; i < indexlist2.length; i++)
	{
		new_line1 =[]
		for ( var j = 0; j < max_num[i] +1; j++)
		{
			for ( var k = 0 ; k < indexlist2[i].length; k++)
			{
				if ( j == indexlist2[i][k][1] )
				{
					new_line1.push([new_arr2[i][k][0], indexlist2[i][k][0]])
				}
			}
		}

		new_line2.push(new_line1.sort(sortFunction))
		
	}

	//remove redundant
	for( var i in new_line2)
	{
		new_line2[i] = multiDimensionalUnique(new_line2[i])
	}
	
	dpn2 =[] , save2=[], arr_save3=[]
	for( var i = 0; i<new_line2.length; i++)
	{
		if (i != 100)
		{
			//console.log('i',i)
			check = 0, dpn =[],  dpn1 =[], save1=[],start=[],end=[],arr_save=[], arr_save2=[]
			for(j = 0; j< new_line2[i].length; j++)
			{
				
				check = j +1
				dpn.push(new_line2[i][j])
				if(check == new_line2[i].length )
				{
					check =0
					if ( dpn.length == 2)
					{

						dpn1.push(...new Set(dpn))
						save1.push(...new Set(dpn))	
						dpn =[]
						
					}

					else
					{
						for ( var k = dpn1.length; k < dpn1.length + dpn.length; k++)
						{
							p1 = new_line2[i][k][1]
							BP = new_line2[i][k][0]
							surfaces = new_arr3[i][k][2]
							
							for ( var l = 0; l < alpha0[BP][surfaces].length;l++)
							{
								belakang = alpha0[BP][surfaces][l][0]
								depan = alpha0[BP][surfaces][l][1]
								if ( p1 == belakang || p1 == depan)
								{
									save = alpha0[BP][surfaces][l]
										
									array1D =[]
									for ( var m = dpn1.length; m < dpn1.length + dpn.length; m++)
									{
										array1D.push(new_line2[i][m][1])
									}
									
									if ( array1D.includes(save[0]) == false && array1D.includes(save[1]) == true)
									{
										start = alpha0[BP][surfaces][l][1]
										if ( i == 34)
										{
											//console.log('start',start)
										}

									}

									else if (array1D.includes(save[0]) == true && array1D.includes(save[1]) == false)
									{
										end =  alpha0[BP][surfaces][l]
										if ( i == 34)
										{
											//console.log('end',end)
										}
									}
									else if ( array1D.includes(save[0]) == true && array1D.includes(save[1]) == true)
									{
										arr_save.push(save)
										
									}

								}
							}
							
						}
						dpn =[]	
						for ( var n = 0; n< arr_save.length ; n++)
						{
							if ( arr_save[n][0] == start)
							{
								start = arr_save[n]
								break;
							}
						}

						arr_save.unshift(start)
						arr_save = [...new Set(arr_save)]						
						arr_save1 =[]
						arr_save1.push(arr_save[0])
						//console.log('arr_save',arr_save,'\narr_save1',arr_save1)
						
						for(var n=0; n< arr_save.length; n++)
						{
							insert = arr_save1[n][1]

							//console.log('insert', arr_save1[s])
							for( var o = 0; o < arr_save.length; o++ )
							{
								if (insert == arr_save[o][0])
								{
									arr_save1.push(arr_save[o])
									break;
								}
							}
						}
						arr_save1.push(end)

						for ( var p in arr_save1)
						{
							dpn1.push([BP,arr_save1[p][0]])
						}
						
						save1 = [...new Set(save1)]	
						arr_save=[], start=[],end=[]
					}
				}

				
				else if (new_line2[i][j][0] != new_line2[i][check][0])
				{
					//console.log('i',i)
					if ( dpn.length == 2)
					{
						dpn1.push(...new Set(dpn))
						save1.push(...new Set(dpn))	
						dpn =[]
					}

					else
					{
						arr_start=[] , arr_end=[]
						for ( var k = dpn1.length; k < dpn1.length + dpn.length; k++)
						{
							//console.log('k', k , '\nlength',dpn1.length + dpn.length)
							p1 = new_line2[i][k][1]
							BP = new_line2[i][k][0]
							surfaces = new_arr3[i][k][2]

							//console.log('BP',BP , '\nsurfaces',surfaces)
							
							for ( var l = 0; l < alpha0[BP][surfaces].length;l++)
							{
								belakang = alpha0[BP][surfaces][l][0]
								depan = alpha0[BP][surfaces][l][1]
								if ( p1 == belakang || p1 == depan)
								{
									save = alpha0[BP][surfaces][l]
										
									array1D =[]
									for ( var m = dpn1.length; m < dpn1.length + dpn.length; m++)
									{
										array1D.push(new_line2[i][m][1])
									}

									if ( array1D.includes(save[0]) == false && array1D.includes(save[1]) == true)
									{
										start = alpha0[BP][surfaces][l][1]
										arr_start.push(alpha0[BP][surfaces][l])
										if ( i == 34)
										{
											//console.log('start',alpha0[BP][surfaces][l])
										}
									}

									else if (array1D.includes(save[0]) == true && array1D.includes(save[1]) == false)
									{
										end =  alpha0[BP][surfaces][l]
										arr_end.push(end)
										if ( i == 34)
										{
											//console.log('end',end)
										}
										
									}
									else if ( array1D.includes(save[0]) == true && array1D.includes(save[1]) == true)
									{
										arr_save.push(save)
									}

								}
							}
							
						}
						dpn =[]	

						if ( arr_start.length < 2)
						{
							for ( var n = 0; n< arr_save.length ; n++)
							{
								if ( arr_save[n][0] == start)
								{
									start = arr_save[n]
									break;
								}
							}	

							arr_save.unshift(start)
							//remove redundant
							arr_save = [...new Set(arr_save)]						
							arr_save1 =[]
							arr_save1.push(arr_save[0])
							
							
							for(var n=0; n< arr_save.length; n++)
							{
								insert = arr_save1[n][1]

								//console.log('insert', arr_save1[s])
								for( var o = 0; o < arr_save.length; o++ )
								{
									if (insert == arr_save[o][0])
									{
										arr_save1.push(arr_save[o])
										break;
									}
								}
							}
							arr_save1.push(end)
						}

						else if (arr_start.length > 1)
						{
							arr_save1=[]					
							for ( var l in arr_start)
							{
								//cari start
								for ( var n = 0; n< arr_save.length ; n++)
								{
									if ( arr_start[l][1] == arr_save[n][0])
									{
										start = arr_save[n]
										break;
									}
								}
								
								if ( start.length == undefined)
								{
									start = arr_start[l][1]
								}

								arr_save.unshift(start)
								arr_save = [...new Set(arr_save)]
								new_arrsave=[]	
								new_arrsave.push(start)
							
								for ( var n in arr_save)
								{
									insert = new_arrsave[n][1]
									total = 0
									for( var o in arr_save)
									{
										total = total +1
										if ( insert == arr_save[o][0])
										{
											new_arrsave.push(arr_save[o])
											break;
										}
									}
									if (total == arr_save.length)
									{
										new_arrsave.push([arr_end[l][0] , arr_end[l][1] , 0])

										break;
									}

																	
								}

								arr_save1.push(...new Set(new_arrsave))
							}
						}

						for ( var p in arr_save1)
						{
							if ( arr_save1[p].length == 3)
							{
								dpn1.push([BP,arr_save1[p][0] , 0])
							}

							else
							{
								dpn1.push([BP,arr_save1[p][0]])
							}
						}

						save1 = [...new Set(save1)]	
						arr_save=[], start=[],end=[]
					}
				}
			}
		}
		dpn2.push(dpn1)
		save2.push(save1)

	}
	
	new_dpn=[]
	for ( var i in dpn2)
	{
		new_dpn1=[]
		for(var j in dpn2[i])
		{
			if ( dpn2[i][j].length == 3)
			{
				new_dpn1.push(dpn2[i][j])
				new_dpn1.push([])
			}

			else
			{
				new_dpn1.push(dpn2[i][j])
			}
		}

		if ( i == 36 || i == 83 )
		{
			new_dpn1 =[]
		}
		new_dpn.push(new_dpn1)
	}
	//console.log('new_dpn', new_dpn)
	//console.log('dpn2', dpn2)
	return new_dpn
}

function topology_connection(findBP1, findline1, shared_point )
{
	BPsurface1 =[] , LineCount1 =[], pointcount1=[]
	for ( var i in findBP1)
	{
		check = 0, total =0, BPsurface =[] , LineCount =[] , pointcount=[]
		for ( var j = 0; j < findBP1[i].length; j++)
		{
			check = j +1
			total = total +1
			surface_yangmana = surface[findBP1[i][j][0]][findBP1[i][j][1]]
			
			if ( check == findBP1[i].length)
			{
				BPsurface.push([findBP1[i][j][0] , total , surface_yangmana]) 
				total = 0
			}

			else if (findBP1[i][j][0] != findBP1[i][check][0])
			{
				BPsurface.push([findBP1[i][j][0] , total , surface_yangmana]) 
				total =0
			}

		}
		
		for ( var j = 0; j < findline1[i].length; j++)
		{
			check = j +1
			total = total +1
			
			if ( check == findline1[i].length)
			{
				LineCount.push([findline1[i][j][0] , total-1]) 
				total = 0
			}

			else if (findline1[i][j][0] != findline1[i][check][0])
			{
				if ( findline1[i][j][0] == undefined)
				{
					total =0
				}

				else
				{
					LineCount.push([findline1[i][j][0] , total-1]) 
					total =0
				}
				
			}

		}

		if ( i == 36 || i == 83)
		{
			if ( i == 36)
			{
				LineCount.push(
					[47,6],
					[79,1],
					[84,2],
					[85,2],
					[33,1]
				)
			}

			else if ( i == 83)
			{
				LineCount.push(
					[0,6],
					[32,1],
					[37,2],
					[38,1],
					[80,1]
				)
			}
			
		}

		for ( var j = 0; j < shared_point[i].length; j++)
		{
			check = j +1
			total = total +1
			
			if ( check == shared_point[i].length)
			{
				pointcount.push([shared_point[i][j][0] , total]) 
				total = 0
			}

			else if (shared_point[i][j][0] != shared_point[i][check][0])
			{
				
				pointcount.push([shared_point[i][j][0] , total]) 
				total =0
			}

		}
		BPsurface1.push(BPsurface)
		LineCount1.push(LineCount)
		pointcount1.push(pointcount)
	}

	new_linecount1 =[]
	for ( var i in LineCount1)
	{	
		new_linecount =[] , total = 0
		for ( var j = 0; j< LineCount1[i].length; j++)
		{
			check = j + 1
			total = total +1

			if ( check == LineCount1[i].length)
			{
				new_linecount.push(LineCount1[i][j])
				total = 0
			}

			else if (LineCount1[i][j][0] != LineCount1[i][check][0])
			{
				
				if ( total == 2)
				{
					new_linecount.push([LineCount1[i][j][0], LineCount1[i][j][1] + LineCount1[i][j-1][1]])
					total = 0
				}

				else
				{
					new_linecount.push(LineCount1[i][j])
					total = 0
				}
			}
		}
		new_linecount1.push(new_linecount)
	}
	//console.log('BPsurface1' ,BPsurface1)
	//console.log('pointcount1',pointcount1)
	//console.log('new_linecount1' ,new_linecount1)

	//Display if the BP shared surface, line or point
	new_m2 =[]
	for ( var i in message)
	{
		new_m1 =[]
		for ( var j in message[i])
		{
			new_m =[]
			new_m.push(message[i][j])

			for ( var k in BPsurface1[i])
			{
				if (message[i][j] ==  BPsurface1[i][k][0])
				{
					if (BPsurface1[i][k][1] == 1 )
					{
						new_m.push(BPsurface1[i][k][1] , BPsurface1[i][k][2])
						break
					}

					else
					{
						new_m.push(BPsurface1[i][k][1] , BPsurface1[i][k][2])
						break
					}
					
				}
			}

			for ( var k in new_linecount1[i])
			{
				if (message[i][j] ==  new_linecount1[i][k][0])
				{
					if (new_linecount1[i][k][1] == 1 )
					{
						new_m.push(new_linecount1[i][k][1] , 'line')
						break
					}
					else
					{
						new_m.push(new_linecount1[i][k][1] , 'lines')
						break
					}

				}
			}

			for ( var k in pointcount1[i])
			{
				if (message[i][j] ==  pointcount1[i][k][0])
				{
					new_m.push(pointcount1[i][k][1] , 'vertice')
					break
				}
			}

			new_m1.push(new_m)
		}

		new_m2.push(new_m1)
	}

	//console.log('try tengok', new_m2)
	return new_m2
	
}

function find_pointfaces_order (x)
{
	for (var i = 0; i < points.faces.length ; i++)
	{
		if( x[0] == points.faces[i].a && x[1] == points.faces[i].b && x[2] == points.faces[i].c )
		{
			return i
		}
	}

}


function findBP_row1 (arr_point3 , message)
{
	var real3 = []
	for (var i in arr_point3)
	{
		var real2 = []
		
		for (var j in message[i])
		{
			count = message[i][j]
			var real1 = []
			for (var k in alpha0[count])
			{
				var total = 0
				t = alpha0[count][k].length
				for (var l in alpha0[count][k])
				{
					p = alpha0[count][k][l][0]

					for (var m in arr_point3[i])
					{
						p1 = arr_point3[i][m]

						if ( p == p1)
						{
							total = total + 1
						}
					}
				}
				if (t - total == 0)
				{
					//console.log("Surface yang sama dengan BP" , i , "adalah BP", count , " row ", k)
					if ( i == 36 || i == 83)
					{
						if ( i == 36)
						{
							if ((count == 0 && k == 8) || (count == 47 && k == 7))
							{
								continue;
							}

							else
							{
								real1.push([count, k])
							}
						}

						if ( i == 83)
						{
							if ((count == 0 && k == 8) || (count == 47 && k == 7))
							{
								continue
							}

							else
							{
								real1.push([count, k])
							}
						}
					}

					else
					{
						real1.push([count, k])
					}
					
				}
			}
			real2.push(real1)
		}
		real3.push(real2.flat())
		
	}


	
	return real3
}

//cari wall paling panjang
function find_highestWall (new_line2)
{
	var arr=[]
	for (var i = 0; i< new_line2.length ; i++)
	{
		p1 = new_line2[i][0]
		p2 = new_line2[i][1]

		x = round(points.vertices[p1 - 1].x , 5) - round(points.vertices[p2 - 1].x , 5)
		y = round(points.vertices[p1 - 1].y , 5) - round(points.vertices[p2 - 1].y , 5)
		z = round(points.vertices[p1 - 1].z , 5) - round(points.vertices[p2 - 1].z , 5)

		dist = Math.sqrt( Math.pow(x , 2) + Math.pow(y, 2) + Math.pow(z, 2) )
		arr.push([dist , new_line2[i]])
	}

	for ( var j = 0 ; j<arr.length ; j++)
	{
		if ( j == 0)
		{
			line = round(arr[j][0] , 5)
			line1 = arr[j][1]
		}

		if ( line < round(arr[j][0] , 5))
		{
			line = round(arr[j][0] , 5)
			line1 = arr[j][1]
		}

		else
		{
			continue;
		}

	}

	return line1;

}

// cari wall yang nak digunakan untuk mewakili BP
function find_right_wall( storewall )
{
	var  newline2 = []
	for (var i = 0; i <storewall.length ; i++)
	{
		var new_line1 = [] 
		for (var j in alpha0[storewall[i][0]][storewall[i][1]])
		{
			p1 = alpha0[storewall[i][0]] [storewall[i][1]] [j][0]
			p2 = alpha0[storewall[i][0]] [storewall[i][1]] [j][1]

			if ( round(points.vertices[p1 - 1].z , 5) == round(points.vertices[995-1].z , 5) && round(points.vertices[p2 - 1].z , 5) == round(points.vertices[995-1].z , 5) )
			{
				new_line1.push(alpha0[storewall[i][0]] [storewall[i][1]] [j][0] , alpha0[storewall[i][0]] [storewall[i][1]] [j][1])
			}
		}
		newline2.push(new_line1)
	}

	// find wall paling panjang
	return find_highestWall(newline2)
}

//boleh guna untuk semua
function find_middle (a)
{
	var arr_midpoint = []
	for ( var i in a)
	{
		p1 = a[i][0]
		p2 = a[i][1]

		midpoint = [round((points.vertices[p1 - 1].x + points.vertices[p2 - 1].x ) , 5) /2,  round((points.vertices[p1 - 1].y + points.vertices[p2 - 1].y ) , 5) /2 , round(points.vertices[p1-1].z , 5 )]
		arr_midpoint.push(midpoint)
	}
	
	return arr_midpoint
}

//use for all lift except lift 44

function find_middle_corridor2 (point_main_L , point_main_R , MP_main , a)
{
	// a = wall_midpoint
	var arr= []
	for (var i in a)
	{
		XmL = point_main_L[0] - a[i][0]
		YmL = point_main_L[1] - a[i][1]

		distL = Math.sqrt( Math.pow(XmL , 2) + Math.pow(YmL, 2))
		//console.log('Distance from L : ' , distL)

		XmR = point_main_R[0] - a[i][0]
		YmR = point_main_R[1] - a[i][1]

		distR = Math.sqrt( Math.pow(XmR , 2) + Math.pow(YmR, 2))
		//console.log('Distance from R : ' , distR)

		//kalau BP tu dok belah kiri
		if (distR > distL )
		{
			
			Xm = point_main_L[0] - MP_main[0]
			Ym = point_main_L[1] - MP_main[1]
			Zm = point_main_L[2]

			Xcm = a[i][0] - Xm
			Ycm = a[i][1] - Ym
			Zcm = Zm

			arr.push( [Xcm, Ycm , Zcm] )
		}

		//kalau BP tu dok belah kanan
		else
		{
			Xm = point_main_R[0] - MP_main[0]
			Ym = point_main_R[1] - MP_main[1] 
			Zm = point_main_R[2]

			Xcm = a[i][0] - Xm
			Ycm = a[i][1] - Ym 
			Zcm = Zm

			arr.push( [Xcm, Ycm , Zcm] )
		}
		
	}
	
	//find intercept line in corridor
	m1 = -0.20527 , c1 = -0.021 , middle_cor = []

	for ( var i = 0; i<a.length ; i++)
	{
		m2 = (a[i][1] - arr[i][1]) / (a[i][0] - arr[i][0])
		c2 = a[i][1] - (m2 * a[i][0])
		eq1 = m1 - m2
		eq2 = ((-c1 * m2/m1)  + c2) * m1 
		y = (eq2 / eq1)
		x = ( y - c1) / m1
		middle_cor. push([x,y,Zcm])
	}

	//middle_cor[0] adalah wall , [1] adalah corridor
	// a = wall_midpoint , a[0] adalah MP wall1 , a[1] adalah MP wall lift
	// titik tengah untuk corridor
	lift_cor = []
	MP_Lift44 = [0.11373, -0.316415 , 3.67]
	L3 = [round(points.vertices[999-1].x , 5) , round(points.vertices[999-1].y , 5) , round(points.vertices[999-1].z , 5)]
	L4 = [round(points.vertices[898-1].x , 5) , round(points.vertices[898-1].y , 5) , round(points.vertices[898-1].z , 5)]
	Mp_L3L4 = [ round((points.vertices[999 - 1].x + points.vertices[898 - 1].x ) , 5) /2,  round((points.vertices[999 - 1].y + points.vertices[898 - 1].y ) , 5) /2 , round(points.vertices[999-1].z , 5 )]
	M_Eq2_x = (L3[0] - Mp_L3L4[0])
	M_Eq2_y = (L3[1] - Mp_L3L4[1])
	M_Eq2 = M_Eq2_x / M_Eq2_y

	//MC = MiddleCorridor
	
	MC1 = [(0.11373 + M_Eq2_x) , (-0.316415 + M_Eq2_y) , 3.67]

	//equation line  1 dan 3
	M_Eq1 = -0.20527
	C_Eq1 = -0.021
	M_Eq3 = (round(Mp_L3L4[1], 5) - round(MC1[1], 5)) / (round(Mp_L3L4[0], 5) - round(MC1[0], 5))
	C_Eq3 = Mp_L3L4[1] - (M_Eq3 * Mp_L3L4[0]) 

	//find interception point
	eq1 =  M_Eq1 - M_Eq3
	eq2 = ((-C_Eq1 * M_Eq3/M_Eq1)  + C_Eq3) * M_Eq1 
	MC2_y = (eq2 / eq1)
	MC2_x = ( MC2_y - C_Eq1) / M_Eq1

	MC2 = [MC2_x , MC2_y , 3.67]

	
	
	lift_cor = [MC1 , MC2]	
	//console.log('MC1' , MC1 , '\nMC2' , MC2)	


	if (r3[0] == 41 || r3[1] == 41)
	{
		L5 = [round(points.vertices[844-1].x , 5) , round(points.vertices[844-1].y , 5) , round(points.vertices[844-1].z , 5)] 
		L6 = [round(points.vertices[845-1].x , 5) , round(points.vertices[845-1].y , 5) , round(points.vertices[845-1].z , 5)] 
		M_Eq4 = ((L5[1] - L6[1]) /(L5[0] - L6[0]))
		
		C_Eq4 = L5[1] - (M_Eq4 * L5[0])

		//first interception line
		eq1 =  M_Eq3 - M_Eq4
		eq2 = ((-C_Eq3 * M_Eq4/M_Eq3)  + C_Eq4) * M_Eq3
		MW1_y = (eq2 / eq1)
		MW1_x = ( MW1_y - C_Eq3) / M_Eq3

		MW1 = [MW1_x , MW1_y , 3.67]

		middle_41 = [MC2 , MW1]
	}

	if (r3[0] == 45 || r3[1] == 45)
	{
		L5 = [round(points.vertices[844-1].x , 5) , round(points.vertices[844-1].y , 5) , round(points.vertices[844-1].z , 5)] 
		L6 = [round(points.vertices[845-1].x , 5) , round(points.vertices[845-1].y , 5) , round(points.vertices[845-1].z , 5)] 

		M_Eq5 = ((L5[1] - L6[1]) /(L5[0] - L6[0]))
		C_Eq5 = a[1][1] - (M_Eq5 * a[1][0])

		//interception line
		eq1 =  M_Eq3 - M_Eq5
		eq2 = ((-C_Eq3 * M_Eq5/M_Eq3)  + C_Eq5) * M_Eq3
		MW2_y = (eq2 / eq1)
		MW2_x = ( MW2_y - C_Eq3) / M_Eq3

		MW2 = [MW2_x , MW2_y , 3.67]

		middle_45 = [MC2 , MW2]

	}

	if (r3[0] == 44 || r3[1] == 44)
	{

		if (r3[0] != 41 && r3[1] != 45)
		{
			return middle_cor = [middle_cor[0] , MC2 , MC1 ]
		}

		else if (r3[0] == 41 )
		{
			return middle_cor = [MW1,MC2,MC1]
		}

		else if (r3[1] == 45)
		{
			return middle_cor = [MC1,MC2, MW2]
		}

	}

	
	else if ( (r3[0] == 41 &&  r3[1] == 45) )
	{
		
		return middle_cor = [ MW1, MW2, middle_cor[1] ]
	}
	
	
	else if (r3[1] == 41)
	{
		return middle_cor = [middle_cor[0] ,MC2, MW1]
	}

	else if (r3[1] == 45)
	{
		return middle_cor = [middle_cor[0] ,MC2, MW2]
	}

	return middle_cor 
}

//form connected line
function findpath(a,b, r1, r2)
{
	var arr = []
	if (a.length + b.length == 4)
	{

		if(r1<r2)
		{
			arr.push(a[0] , b[0], b[1] , a[1])
		}

		else
		{
			arr.push(a[1] , b[1], b[0] , a[0])
		}
		
	}

	else
	{
		if (r1 <r2)
		{
			if ( r1 == 41 && r2 == 45)
			{
				arr.push(b[0],b[1],a[1])


				console.log('ahoi')
			}

			else if (r1 == 41 || r2 == 41)
			{
				if (r1 == 41)
				{
					arr.push( b[0], b[1], b[2] , a[1])
				}

				else if (r2 ==41)
				{
					arr.push(  a[0],b[0], b[1], b[2])
				}

			}
			else
			{
				arr.push(a[0], b[0], b[1], b[2],a[1])
			}
		}

		else if (r2 < r1)
		{
			if ( r2 == 41 && r1 ==45)
			{

				arr.push( a[1] , b[1], b[0] )
			}

			else if (r1 == 41 || r2 ==41)
			{
				if (r1 == 41)
				{
					arr.push(  b[2],b[1], b[0], a[0])
				}

				else if (r2 == 41)
				{
					arr.push(  a[1],b[2], b[1], b[0])
				}
			}

			
			else
			{
				arr.push(a[1] , b[2], b[1], b[0],a[0])
			}

		}
		
	}

	return arr
}

function pathArr (path)
{
	newpath = []

	if((path[0][0] == 7.278135 && path[0][1]== -1.408165) || (path[0][0] == 3.36957 && path[0][1] == -0.559405))
	{
		newpath.push(path[3] , path[2], path[1] , path[0])
		return newpath
	}

	else
	{
		return path
	}
}

function getDist (path)
{
	distance = 0
	for ( var i = 0; i < path.length - 1; i++)
	{
		Px = round(path[i][0],2) - round(path[i+1][0],2)
		Py = round(path[i][1],2) - round(path[i+1][1],2)
		dist = Math.sqrt(Math.pow(Px , 2) + Math.pow(Py, 2))
		distance = distance + dist
	}

	distance = round(distance,2)
	return distance * 10
}

function shortest_room_to_lift(f9_to_f10L)
{
	arr_short = [ ]
	for ( var i in f9_to_f10L)
	{
		dist1 = f9_to_f10L[i][2]
		if (i == 0)
		{
			short = f9_to_f10L[i][2]
		}

		if ( dist1 <= short)
		{
			short = f9_to_f10L[i][2]
			arr_short = [f9_to_f10L[i][0],f9_to_f10L[i][1],f9_to_f10L[i][2]]
		}
	}

	return arr_short
}
function find_short(room1,room2 , wall_con, BP_con)
{
	
	var MP_main = [ round((points.vertices[995 - 1].x + points.vertices[968 - 1].x ) , 5) /2,  round((points.vertices[995 - 1].y + points.vertices[968 - 1].y ) , 5) /2 , round(points.vertices[995-1].z , 5 )]
	var point_main_L= [round(points.vertices[995-1].x , 5) , round(points.vertices[995-1].y , 5) , round(points.vertices[995-1].z , 5)]
	var point_main_R= [round(points.vertices[968-1].x , 5) , round(points.vertices[968-1].y , 5) , round(points.vertices[968-1].z , 5)]


	wall_con  //findBP1[0] = wall yang intercept with corridor
	BP_con //BP_con[0] = BP yang intercept dengan corridor
	r1 = Number(room1)
	r2 = Number(room2)

	if (r2 > r1)
	{
		r3 = [r1,r2]
	}
	
	else 
	{
		r3 = [r2,r1]
	}
	
	var new_arr = [] , total = 0 , storewall =[] , check=0 , storewall2 =[] 
	for ( var i = 0 ; i < wall_con.length ; i++)
	{
		if (total == 0)
		{
			if (r3[0] == wall_con[i][0])
			{
				storewall.push(wall_con[i])
				check = i+1

				if (r3[0] != wall_con[check][0])
				{
					if(r3[0] == 12 || r3[0] == 17 || r3[0] == 25 
						|| r3[0] == 32 || r3[0] == 44 || r3[0] == 45 )
					{
						if ( r3[0] == 12)
						{
							storewall = [122, 113]
						}
						else if ( r3[0] == 17)
						{
							storewall = [170, 171]
						}
						else if ( r3[0] == 25)
						{
							storewall = [535, 538]
						}
						else if ( r3[0] == 32)
						{
							storewall = [736, 739]
						}

						else if ( r3[0] == 44)
						{
							storewall = [898, 882]
						}

						else if (r3[0] == 45)
						{
							storewall = [925, 926]
						}

						total = 1
						new_arr.push(storewall)
					}

					else
					{

						right = find_right_wall(storewall)	
						total  = 1
						new_arr.push(right)	
					}								
				}
			}
		}
		
		else if(total == 1)
		{
			if (r3[1] == wall_con[i][0])
			{
				storewall2.push(wall_con[i])
				check = i+1
				
				if (check >= wall_con.length)
				{
					check = wall_con.length -  wall_con.length
				}

				if (r3[1] != wall_con[check][0])
				{
					if(r3[1] == 12 || r3[1] == 17 || r3[1] == 25 
						|| r3[1] == 32 || r3[1] == 44 || r3[1] == 45 )
					{
						if ( r3[1] == 12)
						{
							storewall2 = [122, 113]
						}
						else if ( r3[1] == 17)
						{
							storewall2 = [170, 171]
						}
						else if ( r3[1] == 25)
						{
							storewall2 = [535, 538]
						}
						else if ( r3[1] == 32)
						{
							storewall2 = [736, 739]
						}

						else if ( r3[1] == 44)
						{
							storewall2 = [898, 882]
						}

						else if (r3[1] == 45)
						{
							storewall2 = [925, 926]
						}

						total = 1
						new_arr.push(storewall2)
					}

					else
					{
						right = find_right_wall(storewall2)	
						total  = 1 + 1
						new_arr.push(right)	
						continue
					}	
				}			
			}
		}
	}
	
//find middle point for wall
wall_midpoint = find_middle(new_arr)

//find middle of the corridor
//create connection to form path line
MiddleCorr = find_middle_corridor2 (point_main_L , point_main_R ,MP_main, wall_midpoint)

return [wall_midpoint, MiddleCorr]
}


//for camera setting
function getStats(vertices){

  var minX = Number.MAX_VALUE;
  var minY = Number.MAX_VALUE;
  var minZ = Number.MAX_VALUE;

  var sumX = 0;
  var sumY = 0;
  var sumZ = 0
  var counter = 0

  for (var i in vertices)
  {
    sumX = sumX + vertices[i].x
    if (vertices[i].x < minX){
      minX = vertices[i].x
    }

    sumY = sumY + vertices[i].y
    if (vertices[i].y < minY){
      minY = vertices[i].y
    }

    if (vertices[i].z < minZ){
      minZ = vertices[i].z
    }

    sumZ = sumZ + vertices[i].z
    counter = counter + 1
  }

  var avgX = sumX/counter
  var avgY = sumY/counter
  var avgZ = sumZ/counter

  return ([minX, minY, minZ, avgX, avgY, avgZ])

}


//start di sini
// find faces
// store points yang ada dalam polygon 1 ke dalam e_vertices

//copy geometry from main geometry
copy_points = points.clone()
copy2_points = points.clone()
var tr = 0 
var poly_face = []


for (o = 0; o < alpha0.length; o++)
{
	for (var i = 0; i<alpha0[o].length; i++)
	{
		var e_vertices = [] //existing vertices
		var num_triangle = [] //current triangle
		var real_vertices = []
		
		for (var j = 0; j<alpha0[o][i].length; j++)
		{
			var n = 0;
			e_vertices.push(alpha0[o][i][j][n]);
			real_vertices.push(alpha0[o][i][j][n]);
		}
		Triangle = e_vertices.length - 2;
		var m = 0;
		var index = 0;

		var cz_checker = [];
		TriangleLoop: while ( m < Triangle )
		{
			//store triangle index
			if ( e_vertices.length == 3)
			{
				var temp_triangle;
				x = e_vertices[index_count(index-1) ] -1; 
				y = e_vertices[index_count(index)   ] -1; 
				z = e_vertices[index_count(index+1) ] -1;

				temp_triangle = [x,y,z];
				num_triangle.push(temp_triangle);

				m=m+1;
			}

			else
			{
				// find vector of the triangle which va is the center	
				va = [points.vertices[e_vertices[index_count(index) ] -1].x , points.vertices[e_vertices[index_count(index)   ]-1].y, points.vertices[e_vertices[index_count(index)    ]-1].z] //A current
				vb = [points.vertices[e_vertices[index_count(index-1)]-1].x, points.vertices[e_vertices[index_count(index-1) ]- 1].y, points.vertices[e_vertices[index_count(index-1) ]- 1].z] //B -1
				vc = [points.vertices[e_vertices[index_count(index+1)]-1].x , points.vertices[e_vertices[index_count(index+1) ]-1].y, points.vertices[e_vertices[index_count(index+1) ]- 1].z] //C +1

				//find cross product for the triangle
				var a_vba, b_vbc , cz;
				a_vba = find_vector(vb, va);
				b_vbc = find_vector(vc, va);

				cz = cross_product(a_vba, b_vbc)
				cz_checker.push(cz)
				
				if (cz_checker.length > 1000)
				{
					break;
				}
				
				// find vector for remaining index
				var p = []
				for (var k = 0; k < e_vertices.length - 1; k++)
				{
					// point lain tidak boleh sama dengan current triangle
					if (k == index_count(index) || k == index_count(index+1) || k == index_count(index-1))
					{
						continue;           
					}
					
					else 
					{				
						temp_p = [points.vertices[e_vertices[index_count(k)]-1].x, points.vertices[e_vertices[index_count(k) ]- 1].y, points.vertices[e_vertices[index_count(k) ]- 1].z] //points
						p.push(temp_p);
					}
				}

				if (cz > 0 )
				{
					var result = 1;
					// check if other point is in the triangle or not
					for (var l = 0; l < p.length; l++)
					{   

						if (IsPointInTriangle(p[l],va,vb,vc) == true)
						{
							result = 0;
						}
					}

					// if there is no point in the triangle then store the current index
					if (result == 1)
					{
						var tem_triangle = [];
						x = e_vertices[index_count(index-1)] -1 ; 
						y = e_vertices[index_count(index)  ] -1 ; 
						z = e_vertices[index_count(index+1)] -1 ;
						

						// remove an array item
						var reverse_array, pos , final
						
						pos = e_vertices.length - index_count(index) - 1;
						reverse_array = e_vertices.reverse();
						reverse_array.splice(pos,1 );
						final = reverse_array.reverse();
						tem_triangle = [x,y,z]
						num_triangle.push(tem_triangle);
						e_vertices = final;
						m=m+1;
						index = 0
						
					}

					else{
						
						index = index + 1;
						if (index > e_vertices.length)
						{
							m=50;
						}
					}
				}
				

				else
				{
					
					index = index + 1;
						if (index > e_vertices.length)
						{
							m=50;
						}
				}
			}

			if (index >e_vertices.length)
			{
				m=50;
			}                        
		}  

		var b_tri=[]
		b_tri = num_triangle
		
		if (clockwise_Checker(cz_checker, num_triangle.length, alpha0[o][i].length) == true)
		{
			num_triangle = []
			m = 0;
			index = 0
			e_vertices = convert_e_vertices(real_vertices)
			TriangleLoop: while ( m < Triangle )
			{
				//store triangle index
				if ( e_vertices.length == 3)
				{
					var temp_triangle;
					x = e_vertices[index_count(index-1) ] -1; 
					y = e_vertices[index_count(index)   ] -1; 
					z = e_vertices[index_count(index+1) ] -1;

					temp_triangle = [x,y,z];
					num_triangle.push(temp_triangle);
					m=m+1;
				}

				else
				{
					// find vector of the triangle which va is the center
					
					va = [points.vertices[e_vertices[index_count(index) ] -1].x , points.vertices[e_vertices[index_count(index)   ]-1].y, points.vertices[e_vertices[index_count(index)    ]-1].z] //A
					vb = [points.vertices[e_vertices[index_count(index-1)]-1].x, points.vertices[e_vertices[index_count(index-1) ]- 1].y, points.vertices[e_vertices[index_count(index-1) ]- 1].z] //B
					vc = [points.vertices[e_vertices[index_count(index+1)]-1].x , points.vertices[e_vertices[index_count(index+1) ]-1].y, points.vertices[e_vertices[index_count(index+1) ]- 1].z] //C
					
					//find cross product for the triangle
					var a_vba, b_vbc , cz;
					a_vba = find_vector(vb, va);
					b_vbc = find_vector(vc, va);
					cz = cross_product(a_vba, b_vbc)
					
					/*
					if (cz_checker.length > 2000)
					{
						break;
					}
					*/
					// find vector for remaining index
					var p = []
					for (var k = 0; k < e_vertices.length - 1; k++)
					{
						if (k == index_count(index) || k == index_count(index+1) || k == index_count(index-1))
						{
							continue;           
						}
						
						else 
						{
							temp_p = [points.vertices[e_vertices[index_count(k)]-1].x, points.vertices[e_vertices[index_count(k) ]- 1].y, points.vertices[e_vertices[index_count(k) ]- 1].z] //points
							p.push(temp_p);
						}
					}

					if (cz > 0 )
					{
						
						var result = 1;
						// check if other point is in the triangle or not
						for (var l = 0; l < p.length; l++)
						{   

							if (IsPointInTriangle(p[l],va,vb,vc) == true)
							{
								result = 0;
							}
						}
						
						// if there is no point in the triangle then store the current index
						if (result == 1)
						{
							var tem_triangle = [];
							x = e_vertices[index_count(index-1)] -1 ; 
							y = e_vertices[index_count(index)  ] -1 ; 
							z = e_vertices[index_count(index+1)] -1 ;
							

							// remove an array item
							var reverse_array, pos , final
							
							pos = e_vertices.length - index_count(index) - 1;
							reverse_array = e_vertices.reverse();
							reverse_array.splice(pos,1 );
							final = reverse_array.reverse();
							tem_triangle = [x,y,z]
							num_triangle.push(tem_triangle);
							e_vertices = final;
							m=m+1;
							index = 0
							
						}

						else
						{
							index = index + 1;
							if (index > e_vertices.length)
							{
								m=50;
							}
						}
					}

					else
					{
						index = index + 1;
						if (index > e_vertices.length)
						{
							m=50;
						}
					}
				}

				if (index >e_vertices.length)
				{
					m=50;
				} 
			}       
		}
		if (b_tri.length > num_triangle.length)
		{
			num_triangle = b_tri
		}

		 
        poly_face.push(num_triangle)		
		
		/*
		//draw triangle line
		var len = num_triangle.length;
		for (var sl = 0; sl < len; sl++ )
		{
			var add = 1
			
			for (var b = 0; b < num_triangle[sl].length; b++)
			{

				p1 = points.vertices [num_triangle[sl][b]]
				if (b +1 == num_triangle[sl].length)
				{
					add = 1
				}

				p2 = points.vertices [num_triangle[sl][add]]
				temp= ([p1,p2]);
				const material1 = new THREE.MeshBasicMaterial( { color: 'blue' } );
				const geometry1 = new THREE.BufferGeometry().setFromPoints(temp);
				const line = new THREE.Line( geometry1, material1 );
				temp = []
				scene.add( line );
				 

				add = add + 1
			}
		}
		*/
		
		tr = tr + 1
	}
}

//floor list

const floor9_check = document.getElementById("face_f9");
var check_points = [] , check_lines=[], polyface=[], geo=[]
floor9_check.addEventListener('change' , function(){
	receive()
	//remove points
	if (floor9_check.checked == false)
	{
		
		//remove points in floor9
		for ( var i = 0; i < 1327; i ++)
		{
			scene.remove(check_points[i])
		}

		for( var i = 0 ; i < 3883 ; i++)
		{
			scene.remove(check_lines[i])
		}

		removeEntitiy(poly_face_roof_f9)
		removeEntitiy(poly_face_wall_f9)
		removeEntitiy(poly_face_ground_f9)

		//deleting alpha3
		//delete points
		for(var i = 0; i <check_pointsf9.length; i++)
		{
			scene.remove(check_pointsf9[i])
		}

		//delete lines
		for ( var i = 0; i<check_linesf9.length; i++)
		{
			scene.remove(check_linesf9[i])
		}

		//delete faces alpha3
		removeEntitiy(polyfaces_f9)

		
		//delete path line if exist
		for ( var i in path_line9)
		{
			scene.remove(path_line9[i])
		}

		//untick the box
		roof_checkbox_f9.checked = false
		wall_checkbox_f9.checked = false
		ground_checkbox_f9.checked = false

		scene.remove(poly_volume_roof)
		scene.remove(poly_volume_wall)
		scene.remove(poly_volume_ground)

		conn_Roofs.checked = false 
		conn_Walls.checked = false 
		conn_Grounds.checked = false 

	}
})
const floor10_check = document.getElementById("face_f10");

floor10_check.addEventListener('change' , function(){
	receive()
	//remove points
	if (floor10_check.checked == false && floor9_check.checked == true)
	{
		//remove points in floor10
		for ( var i = 1327; i < check_points.length; i++)
		{
			scene.remove(check_points[i])
		}
		//remove lines from scene
		for( var i = 3883 ; i < check_lines.length ; i++)
		{
			scene.remove(check_lines[i])
		}

		//deleting faces for floor9
		removeEntitiy(poly_face_roof_f10)
		removeEntitiy(poly_face_wall_f10)
		removeEntitiy(poly_face_ground_f10)

		//deleting alpha3
		//delete points
		for(var i = 0; i <check_pointsf10.length; i++)
		{
			scene.remove(check_pointsf10[i])
		}

		//delete lines
		for ( var i = 0; i<check_linesf10.length; i++)
		{
			scene.remove(check_linesf10[i])
		}

		//delete faces
		removeEntitiy(polyfaces_f10)
		
		//delete path line if exist
		for ( var i in path_line10)
		{
			scene.remove(path_line10[i])
		}

		//untick the box
		roof_checkbox_f10.checked = false
		wall_checkbox_f10.checked = false
		ground_checkbox_f10.checked = false
	}

	else if (floor10_check.checked == false)
	{
		for ( var i = 0; i < check_points.length; i++)
		{
			scene.remove(check_points[i])
		}

		for( var i = 0 ; i < check_lines.length ; i++)
		{
			scene.remove(check_lines[i])
		}
		//remove face for floor10
		removeEntitiy(poly_face_roof_f10)
		removeEntitiy(poly_face_wall_f10)
		removeEntitiy(poly_face_ground_f10)

		//deleting alpha3
		//delete points
		for(var i = 0; i <check_pointsf10.length; i++)
		{
			scene.remove(check_pointsf10[i])
		}

		//delete lines
		for ( var i = 0; i<check_linesf10.length; i++)
		{
			scene.remove(check_linesf10[i])
		}
		
		//delete faces
		removeEntitiy(polyfaces_f10)

		//delete path line if exist
		for ( var i in path_line10)
		{
			scene.remove(path_line10[i])
		}

		//untick the box
		roof_checkbox_f10.checked = false
		wall_checkbox_f10.checked = false
		ground_checkbox_f10.checked = false

		scene.remove(poly_volume_roof)
		scene.remove(poly_volume_wall)
		scene.remove(poly_volume_ground)

		conn_Roofs.checked = false 
		conn_Walls.checked = false 
		conn_Grounds.checked = false 
	}
})

var btn = document.querySelector("#point");
btn.addEventListener("click", function(){
	if (floor9_check.checked == true || floor10_check.checked == true)
	{
		if ( floor9_check.checked == true && floor10_check.checked == false)
		{
			alpha_floor = alpha0.length - 47
			start_alpha = 0
			//remove the points
			for ( var i = 0; i < check_points.length; i++)
			{
				scene.remove(check_points[i])
			}
			check_points=[]
		}

		else if (floor9_check.checked == false && floor10_check.checked == true)
		{
			alpha_floor = alpha0.length
			start_alpha = 47
			for ( var i = 0; i < check_points.length; i++)
			{
				scene.remove(check_points[i])
			}
			check_points=[]
		}
		
		else if (floor9_check.checked == true && floor10_check.checked == true)
		{
			alpha_floor = alpha0.length
			start_alpha = 0
			for ( var i = 0; i < check_points.length; i++)
			{
				scene.remove(check_points[i])
			}
			check_points=[]
		}

		var performance_a = performance.now();

		var point_len = []
		//find point needed to form the building
		for (var i = start_alpha; i<alpha_floor ;i++)
		{
			for (var j = 0; j<alpha0[i].length; j++)
			{
				for ( var k = 0 ; k<alpha0[i][j].length;k++)
				{
					point_len.push(alpha0[i][j][k][0])
				}
			}
		}

		//remoe redundant point
		var new_point = [...new Set (point_len)]
		
		
		//create geometry of the vertices
		circle =[]
		var circleGeometry = new THREE.Geometry();
		const geometry1 = new THREE.SphereGeometry( 0.015, 5, 4 );
		circle = new THREE.Mesh( geometry1);
		for (var i = 0; i < new_point.length; i++)
		{
			circle.position.set(round(points.vertices[new_point[i] - 1].x , 5) , round(points.vertices[new_point[i] - 1].y , 5), round(points.vertices[new_point[i] - 1].z , 5))
			circle.updateMatrix(); // as needed
    		circleGeometry.merge(circle.geometry, circle.matrix); 
			/*
			if ( new_point[i] ==1941 || new_point[i] == 1939 )  
			{
				
				const geometry2 = new THREE.SphereGeometry( 0.012, 32, 16 );
				const material1 = new THREE.MeshBasicMaterial( { color: 'red' } );
				const circle = new THREE.Mesh( geometry2, material1 );
				//circle.position.set(0.152295, 0.28175, 3.67)
				circle.position.set(round(points.vertices[new_point[i] - 1].x , 5) , round(points.vertices[new_point[i] - 1].y , 5), round(points.vertices[new_point[i] - 1].z , 5))
				scene.add( circle );  

			}
			*/
		}
		
		const material1 = new THREE.MeshBasicMaterial( { color: '#5e0561' } );
		CombineCircle = new THREE.Mesh(circleGeometry,material1)
		scene.add(CombineCircle)
		check_points.push(CombineCircle)

		var performance_b = performance.now();
		alert ("time taken: " + round((performance_b - performance_a) / 1000 , 2) + "s. \n" + new_point.length + " points have been added.")
	}
	
  })

  //display edge
  const btn1 = document.querySelector("#edge");
  btn1.addEventListener("click",function(){
	if (floor9_check.checked == true || floor10_check.checked == true)
	{
		var performance_a = performance.now();

		if ( floor9_check.checked == true && floor10_check.checked == false)
		{
			alpha_floor = alpha0.length - 47
			start_alpha = 0
			//remove existing lines 
			for( var i = 0 ; i < check_lines.length ; i++)
			{
				scene.remove(check_lines[i])
			}
			check_lines =[]
		}

		else if (floor9_check.checked == false && floor10_check.checked == true)
		{
			alpha_floor = alpha0.length
			start_alpha = 47
			//remove existing lines 
			for( var i = 0 ; i < check_lines.length ; i++)
			{
				scene.remove(check_lines[i])
			}
			check_lines =[]
		}

		else if (floor9_check.checked == true && floor10_check.checked == true)
		{
			alpha_floor = alpha0.length
			start_alpha = 0
			//remove existing lines 
			for( var i = 0 ; i < check_lines.length ; i++)
			{
				scene.remove(check_lines[i])
			}
			check_lines =[]
		}
		
		//draw line
		var geo = createLinesGeometry(start_alpha,alpha_floor)
		geometry2 = geo[0]
		total = geo[1]
		var lsMaterial = new THREE.LineBasicMaterial( { color: 'blue' } );

		var lineSegments = new THREE.LineSegments( geometry2, lsMaterial );
		check_lines. push(lineSegments)
		scene.add( lineSegments );
		var performance_b = performance.now();
		alert( "time taken: " + round((performance_b - performance_a) / 1000 , 2) + "s. \n" + total + " lines have been added.")
 } 
})

//var geometry2 = createLinesGeometry(0,47)

const roof_checkbox_f9 = document.getElementById("rooff9");
const wall_checkbox_f9 = document.getElementById("wallf9");
const ground_checkbox_f9 = document.getElementById("groundf9");

roof_checkbox_f9.addEventListener('change',function(){

	animate()
	if (roof_checkbox_f9.checked == true)
	{
		//for faces
		scene.add(poly_face_roof_f9)
	}

	else if (roof_checkbox_f9.checked == false)
	{
		removeEntitiy(poly_face_roof_f9)
	}
})
wall_checkbox_f9.addEventListener('change',function(){
	
	if (wall_checkbox_f9.checked == true)
	{
		//for faces
		scene.add(poly_face_wall_f9)
	}

	else if (wall_checkbox_f9.checked == false)
	{
		removeEntitiy(poly_face_wall_f9)
	}
})
ground_checkbox_f9.addEventListener('change',function(){

	if (ground_checkbox_f9.checked == true)
	{
		//for faces
		scene.add(poly_face_ground_f9)

		for ( var i in path_line9)
		{
			scene.add(path_line9[i])
		}
	}

	else if (ground_checkbox_f9.checked == false)
	{
		removeEntitiy(poly_face_ground_f9)

		//delete path line if exist
		for ( var i in path_line9)
		{
			scene.remove(path_line9[i])
		}
	}
})
  
const roof_checkbox_f10 = document.getElementById("rooff10");
const wall_checkbox_f10 = document.getElementById("wallf10");
const ground_checkbox_f10 = document.getElementById("groundf10");

roof_checkbox_f10.addEventListener('change',function(){

	if (roof_checkbox_f10.checked == true)
	{
		//for faces
		scene.add(poly_face_roof_f10)
	}

	else if (roof_checkbox_f10.checked == false)
	{
		removeEntitiy(poly_face_roof_f10)
	}
})
wall_checkbox_f10.addEventListener('change',function(){

	if (wall_checkbox_f10.checked == true)
	{
		//for faces
		scene.add(poly_face_wall_f10)
	}

	else if (wall_checkbox_f10.checked == false)
	{
		removeEntitiy(poly_face_wall_f10)
	}
})
ground_checkbox_f10.addEventListener('change',function(){

	if (ground_checkbox_f10.checked == true)
	{
		//for faces
		scene.add(poly_face_ground_f10)

		for ( var i in path_line10)
		{
			scene.add(path_line10[i])
		}
	}

	else if (ground_checkbox_f10.checked == false)
	{
		removeEntitiy(poly_face_ground_f10)

		for ( var i in path_line10)
		{
			scene.remove(path_line10[i])
		}
	}
})
 
  f9_points = points.clone()
  f10_points = points.clone()
  f9f10_points = points.clone()

  //layer for face f9
  face_roof_f9 =  points.clone()
  face_wall_f9 =  points.clone()
  face_ground_f9 =  points.clone()

  //layer for face f10
  face_roof_f10 =  points.clone()
  face_wall_f10 =  points.clone()
  face_ground_f10 =  points.clone()

  //geometry for face f9
  poly_face_roof_f9 = []
  poly_face_wall_f9=[]
  poly_face_ground_f9=[]

  //geometry for face f10
  poly_face_roof_f10 = []
  poly_face_wall_f10=[]
  poly_face_ground_f10=[]

  //layer for volume 
  volume_roof =  points.clone()
  volume_wall =  points.clone()
  volume_ground =  points.clone()


  copy_f9points = points.clone()
  copy_f10points = points.clone()
  copy_f9f10points = points.clone()
  
  
  const btn2 = document.querySelector("#faces");
  const layer = document.querySelector("#surfaces");
  const legend = document.querySelector("#legend")
  btn2.addEventListener("click",function(){ 
	if (floor9_check.checked == true || floor10_check.checked == true)
	{
		camera.position.set(50.18923405112446 /10,  -80.956398337114543 /10,  100.7 /10)
		layer.style.display='block';
		legend.style.display = 'block';
		var performance_a = performance.now();
		findBP1 =[] , connection =[]
		
		len = poly_face.length, calc1 =0, calc2 = 0;
		if ( floor9_check.checked == true)
		{
			alpha_floor = alpha0.length - 47
			start_alpha = 0
			
			//remove existing scene
			removeEntitiy(poly_face_roof_f9)
			removeEntitiy(poly_face_wall_f9)
			removeEntitiy(poly_face_ground_f9)

			
			newpoly = newpoly_face (poly_face)

			//push faces based on its surface
			intel_roof = 0, intel_wall =0, intel_ground =0
			for ( var i in newpoly)
			{
				for ( var j in newpoly[i])
				{
					for ( var k in newpoly[i][j])
					{
						if ( i < 47)
						{
							if (surface[i][j] == "RoofSurface")
							{
								face_roof_f9.faces.push( new THREE.Face3(newpoly[i][j][k][0],newpoly[i][j][k][1],newpoly[i][j][k][2]))
								face_roof_f9.faces[intel_roof].color = new THREE.Color('red');
								intel_roof = intel_roof + 1
							}

							else if (surface[i][j] == "WallSurface")
							{
								face_wall_f9.faces.push( new THREE.Face3(newpoly[i][j][k][0],newpoly[i][j][k][1],newpoly[i][j][k][2]))
								face_wall_f9.faces[intel_wall].color = new THREE.Color('gray');
								intel_wall = intel_wall + 1

							}
							else if (surface[i][j] == "GroundSurface")
							{
								face_ground_f9.faces.push( new THREE.Face3(newpoly[i][j][k][0],newpoly[i][j][k][1],newpoly[i][j][k][2]))
								face_ground_f9.faces[intel_ground].color = new THREE.Color('lightblue');
								intel_ground = intel_ground + 1
							}
							calc1 = calc1 + 1
						}
					}
				}
			}

			var material1 = new THREE.MeshBasicMaterial({
				vertexColors: THREE.FaceColors, 
				side: THREE.DoubleSide,
				transparent: false,
				opacity:0.8});

			material2 = new THREE.MeshPhongMaterial({
				vertexColors: THREE.FaceColors, 
				side: THREE.DoubleSide,	
			});
			var texture_ = new THREE.TextureLoader().load ('bg/Location Snapshot.jpg')

			material3 = new THREE.MeshStandardMaterial({ map: texture_})

			face_wall_f9.computeFaceNormals();
			face_wall_f9.computeVertexNormals();

			face_roof_f9.computeFaceNormals();
			face_roof_f9.computeVertexNormals();

			face_ground_f9.computeFaceNormals();
			face_ground_f9.computeVertexNormals();

			poly_face_roof_f9 = new THREE.Mesh(face_roof_f9,material2)
			poly_face_wall_f9 = new THREE.Mesh(face_wall_f9,material2)
			poly_face_ground_f9 = new THREE.Mesh(face_ground_f9,material2)

			//poly_face_roof_f9.scale.setScalar(2)
			//poly_face_wall_f9.scale.setScalar(2)
			//poly_face_ground_f9.scale.setScalar(2)
			scene.add(poly_face_roof_f9)
			scene.add(poly_face_wall_f9)
			scene.add(poly_face_ground_f9)

			poly_face_roof_f9.name = 'poly_face_roof_f9'
			poly_face_wall_f9.name = 'poly_face_wall_f9'
			poly_face_ground_f9.name = 'poly_face_ground_f9'
			
			roof_checkbox_f9.checked = true
			ground_checkbox_f9.checked = true
			wall_checkbox_f9.checked = true
			
			//add surfaces into volume
			volume_roof_f9 = face_roof_f9.clone()
			volume_wall_f9 = face_wall_f9.clone()
			volume_ground_f9 = face_ground_f9.clone()
		}	

		if (floor10_check.checked == true)
		{
			alpha_floor = alpha0.length
			start_alpha = 47
			
			removeEntitiy(poly_face_roof_f10)
			removeEntitiy(poly_face_wall_f10)
			removeEntitiy(poly_face_ground_f10)

			newpoly = newpoly_face (poly_face)
			//push faces based on its surface
			intel_roof = 0, intel_wall =0, intel_ground =0
			for ( var i = start_alpha; i < alpha_floor; i++)
			{
				for ( var j in newpoly[i])
				{
					for ( var k in newpoly[i][j])
					{
						if (surface[i][j] == "RoofSurface")
						{
							face_roof_f10.faces.push( new THREE.Face3(newpoly[i][j][k][0],newpoly[i][j][k][1],newpoly[i][j][k][2]))
							face_roof_f10.faces[intel_roof].color = new THREE.Color('red');
							intel_roof = intel_roof + 1
						}

						else if (surface[i][j] == "WallSurface")
						{
							face_wall_f10.faces.push( new THREE.Face3(newpoly[i][j][k][0],newpoly[i][j][k][1],newpoly[i][j][k][2]))
							face_wall_f10.faces[intel_wall].color = new THREE.Color('gray');
							intel_wall = intel_wall + 1

						}
						else if (surface[i][j] == "GroundSurface")
						{
							face_ground_f10.faces.push( new THREE.Face3(newpoly[i][j][k][0],newpoly[i][j][k][1],newpoly[i][j][k][2]))
							face_ground_f10.faces[intel_ground].color = new THREE.Color('lightblue');
							intel_ground = intel_ground + 1
						}
						calc2 = calc2 + 1
					}
				}
			}

			var material1 = new THREE.MeshBasicMaterial({
				vertexColors: THREE.FaceColors, 
				side: THREE.DoubleSide,
				transparent: false,
				opacity:0.7});
			
			material2 = new THREE.MeshPhongMaterial({
				vertexColors: THREE.FaceColors, 
				side: THREE.DoubleSide,});
			
			face_wall_f10.computeFaceNormals();
			face_wall_f10.computeVertexNormals();

			face_roof_f10.computeFaceNormals();
			face_roof_f10.computeVertexNormals();

			face_ground_f10.computeFaceNormals();
			face_ground_f10.computeVertexNormals();

			poly_face_roof_f10 = new THREE.Mesh(face_roof_f10,material2)
			poly_face_wall_f10 = new THREE.Mesh(face_wall_f10,material2)
			poly_face_ground_f10 = new THREE.Mesh(face_ground_f10,material2)

			scene.add(poly_face_roof_f10)
			scene.add(poly_face_wall_f10)
			scene.add(poly_face_ground_f10)

			poly_face_roof_f10.name = 'poly_face_roof_f10'
			poly_face_wall_f10.name = 'poly_face_wall_f10'
			poly_face_ground_f10.name	= 'poly_face_ground_f10'		
			
			roof_checkbox_f10.checked = true
			ground_checkbox_f10.checked = true
			wall_checkbox_f10.checked = true

			//add surfaces into volume
			volume_roof_f10 = face_roof_f10.clone()
			volume_wall_f10 = face_wall_f10.clone()
			volume_ground_f10 = face_ground_f10.clone()
		}
		var performance_b = performance.now();
		alert( "time taken: " + round((performance_b - performance_a) / 1000 , 2) + "s. \n" + (calc1 + calc2) + " tri-faces formed")  
	}
  })

 
  findBP1 =[], message = []
  polyfaces_f9=[], polyfaces_f10=[]
  
  check_linesf9=[],check_linesf10=[]
  check_pointsf9=[],check_pointsf10=[]
  connection =[]

	//layer for connected surface
	volume_conn_roof = points.clone()
	volume_conn_wall = points.clone()
	volume_conn_ground = points.clone()

	//geometry
	poly_volume_roof = []
	poly_volume_wall = []
	poly_volume_ground = []
 
  // find volume-to-volume
  const btn3 = document.querySelector("#alpha3");  
  const vol = document.querySelector("#volume")
  const vol2 = document.querySelector("#volume1")
  const conn_point = document.querySelector("#conn_point")
  const conn_line = document.querySelector("#conn_line")
  const conn_Roofs = document.querySelector("#conn_surface_roof")
  const conn_Walls = document.querySelector("#conn_surface_wall")
  const conn_Grounds = document.querySelector("#conn_surface_ground")

  //check_linesf9 check_linesf10 check_pointsf9,check_pointsf10a
  conn_point.addEventListener("change", function(){
	if (conn_point.checked == false)
	{
		for ( var i in check_pointsf9)
		{
			scene.remove(check_pointsf9[i])
		}

		for ( var i in check_pointsf10)
		{
			scene.remove(check_pointsf10[i])
		}
	}

	else 
	{
		for ( var i in check_pointsf9)
		{
			scene.add(check_pointsf9[i])
		}

		for ( var i in check_pointsf10)
		{
			scene.add(check_pointsf10[i])
		}
	}
  })

  conn_line.addEventListener("change", function(){

	if (conn_line.checked == false)
	{
		for ( var i in check_linesf9)
		{
			scene.remove(check_linesf9[i])
		}

		for ( var i in check_linesf10)
		{
			scene.remove(check_linesf10[i])
		}
	}

	else 
	{
		for ( var i in check_linesf9)
		{
			scene.add(check_linesf9[i])
		}

		for ( var i in check_linesf10)
		{
			scene.add(check_linesf10[i])
		}
	}
  })

  conn_Roofs.addEventListener('change',function(){

	
	if ( conn_Roofs.checked == true)
	{
		scene.add(poly_volume_roof)
	}
	else
	{
		scene.remove(poly_volume_roof)
	}
	
	

  })
  conn_Walls.addEventListener('change',function(){

	if ( conn_Walls.checked == true)
	{
		scene.add(poly_volume_wall)
	}
	else
	{
		scene.remove(poly_volume_wall)
	}

  })
  conn_Grounds.addEventListener('change',function(){

	
	if ( conn_Grounds.checked == true)
	{
		scene.add(poly_volume_ground)
	}
	else
	{
		scene.remove(poly_volume_ground)
	}
	
  })

  btn3.addEventListener("click", function(){
	//points.faces.splice(0,points.faces.length)

	if (floor9_check.checked == true || floor10_check.checked == true)
	{
		vol2.style.display = "block"
		vol.style.display = "block"
		conn_point.checked = true
		conn_line.checked = true

		//remove existing floor9 from scene
		removeEntitiy(poly_face_roof_f9)
		removeEntitiy(poly_face_wall_f9)
		removeEntitiy(poly_face_ground_f9)
		
		//remove existing floor10 from scene
		removeEntitiy(poly_face_roof_f10)
		removeEntitiy(poly_face_wall_f10)
		removeEntitiy(poly_face_ground_f10)


		var performance_a = performance.now();

		if ( floor9_check.checked == true && floor10_check.checked == false)
		{
			alpha_floor = alpha0.length - 47
			start_alpha = 0

			var arr_point3 = []
			for (var i  = start_alpha; i < alpha_floor; i++)
			{	
				var arr_point2=[]
				for(var j = 0 ; j < alpha0[i].length; j++)
				{
					var arr_point1=[]
					for (var k = 0; k <alpha0[i][j].length; k++)
					{
						var point = [round(points.vertices[alpha0[i][j][k][0] - 1].x , 5) , round(points.vertices[alpha0[i][j][k][0] - 1].y , 5) , round(points.vertices[alpha0[i][j][k][0] - 1].z , 5)];
						var point_2  = point2(i)
						var same = check_point(i , point_2 , point)
						if (same.length != 0)
						{
							//remove redundant point
							same = [...new Set (same)]
							arr_point1.push(same)
						}
					}
					if (arr_point1.length != 0)
					{
						arr_point1 = arr_point1.flat()
						arr_point2.push(arr_point1)
					}	
				}

				if (arr_point2.length != -1)
				{
					//convert array to 1D array
					arr_point3.push(arr_point2.flat())			
				}
					
			}
			
			//remove redundant alpha
			for ( i in arr_point3)
			{
				//remove redundtant
				arr_point3[i] = [...new Set (arr_point3[i])]
			}

			//find building that consist of same alpha
			var building1 = [], building2 = [], building3 = []
			for (var i = start_alpha; i<alpha_floor ; i++)
			{
				building1 = []
				for (var j = 0; j<alpha0[i].length ; j++)
				{
					for (var k = 0; k < alpha0[i][j].length; k++)
					{
						for (var l = 0; l < arr_point3.length; l++)
						{
							for (var m = 0; m < arr_point3[l].length; m++)
							{
								//console.log("nilai p", arr_point3[i][m] , "\t nilai alpha: ", alpha0[i][j][k][0])
								if ( i != l)
								{
									p = arr_point3[l][m]
									if ( p == alpha0[i][j][k][0])
									{
										//console.log("nilai P", p , "\t sama di buildingPart", i)
										building1.push( [l , p])
									}
									else
									{
										continue;
									}
								}
							}
						}
					}
				}
				building2.push(building1)
			}

			//remove duplicate in 2D
			for (var i in building2)
			{
				building2[i] = multiDimensionalUnique(building2[i])
				building3.push(building2[i])
			}

			//sort the array
			for (var i in building3)
			{
				building3[i].sort(sortFunction)
			}

			//remove redundant 
			message = find_connectedBP(building3)
			findBP1 = findBP_row1(arr_point3, message) // cari brapa banyak surface
			console.log('findBP_row1',findBP1)
			console.log('alpha0',alpha0)
			//console.log('alpha0', alpha0)
			//console.log('arr_point3: ', arr_point3)
			//console.log('building3 :',building3)
			//Display alpha3 form
			console.log('Alpha3 (Connectivity Boundary)\n\n')
			a3 = 0
			
			for ( var i in message)
			{
				if ( i == 0 || i == 47)
				{
					if ( i == 0)
					{
						console.log("Floor 9's Corridor ")
					}

					if ( i == 47)
					{
						console.log("\nFloor 10's Corridor ")
					}
				}

				else
				{
					console.log("\nBuildingPart",i)
				}

				a2 =[] , test1 =[]
				for ( var j in message[i])
				{
					m_1 = 'a3('
					m_2 = String(a3)
					m_3 = ')'
					equal = ': '
					ayo = m_1.concat(m_2,m_3,equal)

					remain = 'a2('
					remain2 = String(i)
					remain3 = ')'
					space = '-'
					ayo2 = remain.concat(remain2,remain3,space)

					one = 'a2('
					two =  String(message[i][j])
					three = ')'
					main_find = one.concat(two,three)

					test = ayo.concat(ayo2,main_find)

					console.log(test)
					a3 = a3 + 1
				}

				//console.log('a3('+ a3 +'): a2('+ (Number(i) + 47) +') -' ,test1.join(' - '))
			}
			
			//find line
			var findline1 = find_line1(building3 , message, findBP1)
			shared= find_point(findline1)
			findline1 = shared[0] 
			shared_point = shared[1] // boleh guna untuk cari point mana
			findline1 = sort_line_order(findline1) // boleh guna untuk line mana
			
			newpolyface = newpoly_face (poly_face)
			countRoof =0, countWall =0, countground = 0
			for( var i in findBP1)
			{
				for ( var j in findBP1[i])
				{
					tri =  findBP1[i][j]
					new_tri =  find_tri(tri, newpolyface)
					tri_index = faces_index(new_tri)
					for ( var k in tri_index)
					{
						f = tri_index[k][0]
						idx =  tri_index[k][1]
						sr = tri_index[k][2]
						//kalau f dekat floor 9
						if ( f == 0)
						{
							if ( sr == 'RoofSurface')
							{
								faces_a =volume_roof_f9.faces[idx].a
								faces_b =volume_roof_f9.faces[idx].b
								faces_c =volume_roof_f9.faces[idx].c
								volume_conn_roof.faces.push(new THREE.Face3(faces_a,faces_b,faces_c))
								volume_conn_roof.faces[countRoof].color = new THREE.Color('yellow')
								countRoof = countRoof + 1
							}

							else if (sr == 'WallSurface')
							{
								
								faces_a =volume_wall_f9.faces[idx].a
								faces_b =volume_wall_f9.faces[idx].b
								faces_c =volume_wall_f9.faces[idx].c
								volume_conn_wall.faces.push(new THREE.Face3(faces_a,faces_b,faces_c))
								volume_conn_wall.faces[countWall].color = new THREE.Color('green')
								countWall = countWall + 1
							}

							else if (sr == 'GroundSurface')
							{
								faces_a =volume_ground_f9.faces[idx].a
								faces_b =volume_ground_f9.faces[idx].b
								faces_c =volume_ground_f9.faces[idx].c
								volume_conn_ground.faces.push(new THREE.Face3(faces_a,faces_b,faces_c))
								volume_conn_ground.faces[countground].color = new THREE.Color('yellow')
								countground = countground + 1
							}
						}
					}			
				}	
			}	
			material3 = new THREE.MeshPhongMaterial({
				vertexColors: THREE.FaceColors, 
				side: THREE.DoubleSide,
				transparent: true,
				opacity:0.6
			});

			material2 = new THREE.MeshPhongMaterial({
				vertexColors: THREE.FaceColors, 
				side: THREE.DoubleSide,
				
			});
			
			volume_conn_roof.computeFaceNormals();
			volume_conn_roof.computeVertexNormals();
			volume_conn_wall.computeFaceNormals();
			volume_conn_wall.computeVertexNormals();
			volume_conn_ground.computeFaceNormals();
			volume_conn_ground.computeVertexNormals();

			poly_volume_roof = new THREE.Mesh(volume_conn_roof,material2)
			poly_volume_wall = new THREE.Mesh(volume_conn_wall,material3)
			poly_volume_ground = new THREE.Mesh(volume_conn_ground,material2)

			//add old Scene
			//scene.add(poly_face_roof_f9)
			scene.add(poly_face_wall_f9)
			scene.add(poly_face_ground_f9)
			
			//scene.add(poly_volume_roof)
			scene.add(poly_volume_wall)
			//scene.add(poly_volume_ground)

			roof_checkbox_f9.checked = false
			ground_checkbox_f9.checked = true
			wall_checkbox_f9.checked = true

			conn_Walls.checked = true 

			//draw shared line
			for(var i = 0; i<findline1.length; i++)
			{
				check = 0
				if(findline1[i].length != 0)
				{
					for(var j = 0; j < findline1[i].length -1; j++)
					{
						
						check = j+1
						if (findline1[i][j][0] == findline1[i][check][0] )
						{
							if ( findline1[i][j][1] == undefined || findline1[i][check][1] == undefined)
							{
								continue
							}

							else
							{
								temp= [points.vertices[findline1[i][j][1]-1], points.vertices[findline1[i][check][1]-1]];
							}
						}

						else if (findline1[i][j][0] != findline1[i][check][0])
						{
							continue;
						}

						const material1 = new THREE.LineBasicMaterial( { 
							color: 'red' , 
							side: THREE.DoubleSide,
							linewidth: 4
						
						} );
						//console.log('i', i , '\nalpha0 (a)',findline1[i][j],'\nalpha0(b)',findline1[i][check])
						const geometry1 = new THREE.BufferGeometry().setFromPoints(temp);
						const line = new THREE.Line( geometry1, material1 );
						temp = []
						scene.add( line )
						check_linesf9.push(line);
					}
				} 
			}

			//draw shared points
			check_pointsf9 =[]
			for(var i = 0; i<shared_point.length; i++)
			{
				if(shared_point[i].length != 0)
				{
					for(var j = 0; j < shared_point[i].length ; j++)
					{
						var geometry2 = new THREE.SphereGeometry( 0.01, 32, 16 );
						var material2 = new THREE.MeshBasicMaterial( { color: 'black' } );
						var circle = new THREE.Mesh( geometry2, material2 );
						circle.position.set(round(points.vertices[shared_point[i][j][1] - 1].x , 5) , round(points.vertices[shared_point[i][j][1] - 1].y , 5), round(points.vertices[shared_point[i][j][1] - 1].z , 5))
						check_pointsf9.push(circle)
						scene.add( circle ); 
					}
				}
			}

			
			//find topology of the building
			connection = topology_connection(findBP1, findline1, shared_point)
			// connection message
			
			for (var i = 0; i < connection.length; i++)
			{
				if (connection[i].length ==0 )
				{
					console.log("\nThere was no connection in the BuildingPart.",i +1)
				}

				else if ( i ==0 || i== 47)
				{
					if ( i == 0)
					{
						console.log("Floor9's Corridor connect with", connection[i].length ,"BuildingPart.",)
					}

					else
					{
						console.log("Floor10's Corridor connect with", connection[i].length ,"BuildingPart.",)

					}
				}

				else
				{
					console.log("\nBuildingPart",i, "connect with", connection[i].length ,"BuildingPart.",)
				}

				for(var j = 0; j< message[i].length; j++)
				{
					if (connection[i][j][0] == 0 || connection[i][j][0] == 47)
					{
						if (connection[i][j][0] == 0)
						{
							console.log("Floor9's Corridor shared" , String(connection[i][j][1]) , connection[i][j][2] )
						}

						else
						{
							console.log("Floor10's Corridor shared" , String(connection[i][j][1]) , connection[i][j][2] )

						}
					}

					else if ( message[0][j] == 59 ||  message[0][j] == 78 ||  message[0][j] == 91 )
					{
						if (message[0][j] == 59 )
						{
							console.log("BuildingPart", message[0][j] , 'shared', '6' , 'lines' )
						}

						else if (message[0][j] == 78 )
						{
							console.log("BuildingPart", message[0][j] , 'shared', '9' , 'lines')

						}

						else if (message[0][j] == 91 )
						{
							console.log("BuildingPart", message[0][j] , 'shared', '5' , 'lines')
						}

					}
					else
					{
						console.log("BuildingPart", connection[i][j][0] , 'shared', String(connection[i][j][1]) , connection[i][j][2])
					}
					
				}
			}
			
		}

		else if (floor10_check.checked == true && floor9_check.checked == false)
		{

			alpha_floor = alpha0.length
			start_alpha = 47
			
			var arr_point3 = []
			for (var i  = start_alpha; i < alpha_floor; i++)
			{	
				var arr_point2=[]
				for(var j = 0 ; j < alpha0[i].length; j++)
				{
					var arr_point1=[]
					for (var k = 0; k <alpha0[i][j].length; k++)
					{
						var point = [round(points.vertices[alpha0[i][j][k][0] - 1].x , 5) , round(points.vertices[alpha0[i][j][k][0] - 1].y , 5) , round(points.vertices[alpha0[i][j][k][0] - 1].z , 5)];
						var point_2  = point2(i)
						var same = check_point(i , point_2 , point)
						if (same.length != 0)
						{
							//remove redundant point
							same = [...new Set (same)]
							arr_point1.push(same)
						}
					}
					if (arr_point1.length != 0)
					{
						arr_point1 = arr_point1.flat()
						arr_point2.push(arr_point1)
					}	
				}

				if (arr_point2.length != -1)
				{
					//convert array to 1D array
					arr_point3.push(arr_point2.flat())			
				}
					
			}
			//remove redundant alpha
			for ( i in arr_point3)
			{
				//remove redundtant
				arr_point3[i] = [...new Set (arr_point3[i])]
			}

			//find building that consist of same alpha
			var building1 = [], building2 = [], building3 = []
			for (var i = start_alpha; i<alpha_floor ; i++)
			{
				building1 = []
				for (var j = 0; j<alpha0[i].length ; j++)
				{
					for (var k = 0; k < alpha0[i][j].length; k++)
					{
						for (var l = 0; l < arr_point3.length; l++)
						{
							for (var m = 0; m < arr_point3[l].length; m++)
							{
								if ( i != l + start_alpha)
								{
									p = arr_point3[l][m]
									if ( p == alpha0[i][j][k][0])
									{
										building1.push( [l + start_alpha , p])
									}
									else
									{
										continue;
									}
								}
							}
						}
					}
				}
				building2.push(building1)
			}

			//remove duplicate in 2D
			for (var i in building2)
			{
				building2[i] = multiDimensionalUnique(building2[i])
				building3.push(building2[i])
			}

			//sort the array
			for (var i in building3)
			{
				building3[i].sort(sortFunction)
			}

			//remove redundant 
			message = find_connectedBP(building3)
			findBP1 = findBP_row1(arr_point3, message) // cari brapa banyak surface
				
			//console.log('alpha0', alpha0)
			//console.log('arr_point3: ', arr_point3)
			//console.log('building3 :',building3)
			//console.log('message :' , message)
			//console.log('findBP1',findBP1)

			//Display alpha3 form
			a3 = 0
			console.log('Alpha3 (Connectivity Boundary)\n\n')
			for ( var i = 0; i < message.length; i++)
			{
				b_p = i + 47
				if ( i == 0)
				{
					if ( i == 0)
					{
						console.log("\nFloor 10's Corridor ")
					}
				}

				else
				{
					console.log("\nBuildingPart",String(b_p))
				}

				
				a2 =[] , test1 =[]
				for ( var j in message[i])
				{
					m_1 = 'a3('
					m_2 = String(a3)
					m_3 = ')'
					equal = ': '
					ayo = m_1.concat(m_2,m_3,equal)

					remain = 'a2('
					remain2 = String(b_p)
					remain3 = ')'
					space = '-'
					ayo2 = remain.concat(remain2,remain3,space)

					one = 'a2('
					two =  String(message[i][j])
					three = ')'
					main_find = one.concat(two,three)

					test = ayo.concat(ayo2,main_find)

					console.log(test)
					a3 = a3 + 1
				}

				//console.log('a3('+ a3 +'): a2('+ (Number(i) + 47) +') -' ,test1.join(' - '))
			}
			
			//find line
			var findline1 = find_line1(building3 , message, findBP1)
			shared= find_point(findline1)
			findline1 = shared[0] 
			shared_point = shared[1] // boleh guna untuk cari point mana
			findline1 = sort_line_order(findline1) // boleh guna untuk line mana
			
			newpolyface = newpoly_face (poly_face)
			countWall =0
			for( var i in findBP1)
			{
				for ( var j in findBP1[i])
				{
					tri =  findBP1[i][j]
					new_tri =  find_tri(tri, newpolyface)
					tri_index = faces_index(new_tri)

					for ( var k in tri_index)
					{
						f = tri_index[k][0]
						idx =  tri_index[k][1]
						sr = tri_index[k][2]
						//kalau k dekat floor10
						if ( f == 1)
						{
							if ( sr == 'RoofSurface')
							{
								//volume_roof_f10.faces[idx].color = new THREE.Color('green')
							}

							else if (sr == 'WallSurface')
							{
								faces_a =volume_wall_f10.faces[idx].a
								faces_b =volume_wall_f10.faces[idx].b
								faces_c =volume_wall_f10.faces[idx].c
								volume_conn_wall.faces.push(new THREE.Face3(faces_a,faces_b,faces_c))
								volume_conn_wall.faces[countWall].color = new THREE.Color('green')
								countWall = countWall + 1
							}

							else if (sr == 'GroundSurface')
							{
								//volume_ground_f10.faces[idx].color = new THREE.Color('green')
							}
							
						}
					}			
				}	
			}
			
			material2 = new THREE.MeshPhongMaterial({
				vertexColors: THREE.FaceColors, 
				side: THREE.DoubleSide,});

			material3 = new THREE.MeshPhongMaterial({
				vertexColors: THREE.FaceColors, 
				side: THREE.DoubleSide,
				transparent: true,
				opacity:0.6
			});
			volume_conn_wall.computeFaceNormals();
			volume_conn_wall.computeVertexNormals();

			poly_volume_wall = new THREE.Mesh(volume_conn_wall,material3)

			//scene.add(poly_face_roof_f10)
			scene.add(poly_face_wall_f10)
			scene.add(poly_face_ground_f10)

			scene.add(poly_volume_wall)

			roof_checkbox_f10.checked = false
			ground_checkbox_f10.checked = true
			wall_checkbox_f10.checked = true

			conn_Walls.checked = true 

			//draw shared line
			for(var i = 0; i<findline1.length; i++)
			{
				check = 0
				if(findline1[i].length != 0)
				{
					for(var j = 0; j < findline1[i].length -1; j++)
					{
						
						check = j+1
						if (findline1[i][j][0] == findline1[i][check][0] )
						{
							if ( findline1[i][j][1] == undefined || findline1[i][check][1] == undefined)
							{
								continue
							}

							else
							{
								temp= [points.vertices[findline1[i][j][1]-1], points.vertices[findline1[i][check][1]-1]];
							}
						}

						else if (findline1[i][j][0] != findline1[i][check][0])
						{
							continue;
						}

						const material1 = new THREE.MeshBasicMaterial( { 
							color: 'red' , 
							side: THREE.DoubleSide} );
						//console.log('i', i , '\nalpha0 (a)',findline1[i][j],'\nalpha0(b)',findline1[i][check])
						const geometry1 = new THREE.BufferGeometry().setFromPoints(temp);
						const line = new THREE.Line( geometry1, material1 );
						temp = []
						scene.add( line )
						check_linesf10.push(line);
					}
				} 
			}

			//draw shared points
			check_pointsf9 =[]
			for(var i = 0; i<shared_point.length; i++)
			{
				if(shared_point[i].length != 0)
				{
					for(var j = 0; j < shared_point[i].length ; j++)
					{
						var geometry2 = new THREE.SphereGeometry( 0.01, 32, 16 );
						var material2 = new THREE.MeshBasicMaterial( { color: 'black' } );
						var circle = new THREE.Mesh( geometry2, material2 );
						circle.position.set(round(points.vertices[shared_point[i][j][1] - 1].x , 5) , round(points.vertices[shared_point[i][j][1] - 1].y , 5), round(points.vertices[shared_point[i][j][1] - 1].z , 5))
						check_pointsf9.push(circle)
						scene.add( circle ); 
					}
				}
			}

			//find topology of the building
			connection = topology_connection(findBP1, findline1, shared_point)
			// connection message
			//console.log('connection',connection)
			for (var i = 0; i < connection.length; i++)
			{
				if (connection[i].length ==0 )
				{
					console.log("\nThere was no connection in the BuildingPart.",i +1)
				}

				else if ( i ==0 || i== 47)
				{
					if ( i == 0)
					{
						console.log("Floor10's Corridor connect with", connection[i].length ,"BuildingPart.",)
					}
				}

				else
				{
					console.log("\nBuildingPart",i+start_alpha, "connect with", connection[i].length ,"BuildingPart.",)
				}

				for(var j = 0; j< message[i].length; j++)
				{
					if (connection[i][j][0] == 0 || connection[i][j][0] == 47)
					{
						if (connection[i][j][0] == 0)
						{
							console.log("Floor10's Corridor shared" , String(connection[i][j][1]) , connection[i][j][2] )
						}

						else
						{
							console.log("Floor10's Corridor shared" , String(connection[i][j][1]) , connection[i][j][2] )

						}
					}

					else if (i == 36 && connection[i][j][0] == 80)
					{
						console.log("BuildingPart", connection[i][j][0] , 'shared', '1' , 'lines' )
						
					}
					else
					{
						console.log("BuildingPart", connection[i][j][0] , 'shared', String(connection[i][j][1]) , connection[i][j][2])
					}
					
				}
			}
		}

		else if (floor9_check.checked == true && floor10_check.checked == true)
		{
			alpha_floor = alpha0.length
			start_alpha = 0

			var arr_point3 = []
			for (var i  = start_alpha; i < alpha_floor; i++)
			{	
				var arr_point2=[]
				for(var j = 0 ; j < alpha0[i].length; j++)
				{
					var arr_point1=[]
					for (var k = 0; k <alpha0[i][j].length; k++)
					{
						var point = [round(points.vertices[alpha0[i][j][k][0] - 1].x , 5) , round(points.vertices[alpha0[i][j][k][0] - 1].y , 5) , round(points.vertices[alpha0[i][j][k][0] - 1].z , 5)];
						var point_2  = point2(i)
						var same = check_point(i , point_2 , point)
						if (same.length != 0)
						{
							//remove redundant point
							same = [...new Set (same)]
							arr_point1.push(same)
						}
					}
					if (arr_point1.length != 0)
					{
						arr_point1 = arr_point1.flat()
						arr_point2.push(arr_point1)
					}	
				}

				if (arr_point2.length != -1)
				{
					//convert array to 1D array
					arr_point3.push(arr_point2.flat())			
				}
					
			}
			//remove redundant alpha
			for ( i in arr_point3)
			{
				//remove redundtant
				arr_point3[i] = [...new Set (arr_point3[i])]
			}

			//find building that consist of same alpha
			var building1 = [], building2 = [], building3 = []
			for (var i = start_alpha; i<alpha_floor ; i++)
			{
				building1 = []
				for (var j = 0; j<alpha0[i].length ; j++)
				{
					for (var k = 0; k < alpha0[i][j].length; k++)
					{
						for (var l = 0; l < arr_point3.length; l++)
						{
							for (var m = 0; m < arr_point3[l].length; m++)
							{
								//console.log("nilai p", arr_point3[i][m] , "\t nilai alpha: ", alpha0[i][j][k][0])
								if ( i != l)
								{
									p = arr_point3[l][m]
									if ( p == alpha0[i][j][k][0])
									{
										//console.log("nilai P", p , "\t sama di buildingPart", i)
										building1.push( [l , p])
									}
									else
									{
										continue;
									}
								}
							}
						}
					}
				}
				building2.push(building1)
			}

			//remove duplicate in 2D
			for (var i in building2)
			{
				building2[i] = multiDimensionalUnique(building2[i])
				building3.push(building2[i])
			}

			//sort the array
			for (var i in building3)
			{
				building3[i].sort(sortFunction)
			}

			//remove redundant 
			message = find_connectedBP(building3)
			findBP1 = findBP_row1(arr_point3, message) // cari brapa banyak surface
			

			//console.log('alpha0', alpha0)
			//console.log('arr_point3: ', arr_point3)
			//console.log('building3 :',building3)
			//console.log('message :' , message)
			
			//Display alpha3 form
			console.log('Alpha3 (Connectivity Boundary)\n\n')
			a3 = 0
			for ( var i in message)
			{
				if ( i == 0 || i == 47)
				{
					if ( i == 0)
					{
						console.log("Floor 9's Corridor ")
					}

					if ( i == 47)
					{
						console.log("\nFloor 10's Corridor ")
					}
				}

				else
				{
					console.log("\nBuildingPart",i)
				}

				a2 =[] , test1 =[]
				for ( var j in message[i])
				{
					m_1 = 'a3('
					m_2 = String(a3)
					m_3 = ')'
					equal = ': '
					ayo = m_1.concat(m_2,m_3,equal)

					remain = 'a2('
					remain2 = String(i)
					remain3 = ')'
					space = '-'
					ayo2 = remain.concat(remain2,remain3,space)

					one = 'a2('
					two =  String(message[i][j])
					three = ')'
					main_find = one.concat(two,three)

					test = ayo.concat(ayo2,main_find)

					console.log(test)
					a3 = a3 + 1
				}

				//console.log('a3('+ a3 +'): a2('+ (Number(i) + 47) +') -' ,test1.join(' - '))
			}

			//find line
			var findline1 = find_line1(building3 , message, findBP1)
			shared= find_point(findline1)
			findline1 = shared[0] 
			shared_point = shared[1] // boleh guna untuk cari point mana
			line_ori = shared[0]
			findline1 = sort_line_order(findline1) // boleh guna untuk line mana
			
			newpolyface = newpoly_face (poly_face)
			countWall =0 , countRoof = 0, countground = 0
			for( var i in findBP1)
			{
				for ( var j in findBP1[i])
				{
					tri =  findBP1[i][j]
					new_tri =  find_tri(tri, newpolyface)
					tri_index = faces_index(new_tri)

					for ( var k in tri_index)
					{
						f = tri_index[k][0]
						idx =  tri_index[k][1]
						sr = tri_index[k][2]
						//kalau k dekat floor 9
						if ( f == 0)
						{
							if ( sr == 'RoofSurface')
							{
								faces_a =volume_roof_f9.faces[idx].a
								faces_b =volume_roof_f9.faces[idx].b
								faces_c =volume_roof_f9.faces[idx].c
								volume_conn_roof.faces.push(new THREE.Face3(faces_a,faces_b,faces_c))
								volume_conn_roof.faces[countRoof].color = new THREE.Color('yellow')
								countRoof = countRoof + 1
							}

							else if (sr == 'WallSurface')
							{
								faces_a =volume_wall_f9.faces[idx].a
								faces_b =volume_wall_f9.faces[idx].b
								faces_c =volume_wall_f9.faces[idx].c
								volume_conn_wall.faces.push(new THREE.Face3(faces_a,faces_b,faces_c))
								volume_conn_wall.faces[countWall].color = new THREE.Color('green')
								countWall = countWall + 1
							}

							else if (sr == 'GroundSurface')
							{
								faces_a =volume_ground_f9.faces[idx].a
								faces_b =volume_ground_f9.faces[idx].b
								faces_c =volume_ground_f9.faces[idx].c
								volume_conn_ground.faces.push(new THREE.Face3(faces_a,faces_b,faces_c))
								volume_conn_ground.faces[countground].color = new THREE.Color('#CF9FFF')
								countground = countground + 1
							}
						}

						//kalau k dekat floor10
						else if ( f == 1)
						{
							if ( sr == 'RoofSurface')
							{
								faces_a =volume_roof_f10.faces[idx].a
								faces_b =volume_roof_f10.faces[idx].b
								faces_c =volume_roof_f10.faces[idx].c
								volume_conn_roof.faces.push(new THREE.Face3(faces_a,faces_b,faces_c))
								volume_conn_roof.faces[countRoof].color = new THREE.Color('yellow')
								countRoof = countRoof + 1
							}

							else if (sr == 'WallSurface')
							{
								faces_a =volume_wall_f10.faces[idx].a
								faces_b =volume_wall_f10.faces[idx].b
								faces_c =volume_wall_f10.faces[idx].c
								volume_conn_wall.faces.push(new THREE.Face3(faces_a,faces_b,faces_c))
								volume_conn_wall.faces[countWall].color = new THREE.Color('green')
								countWall = countWall + 1
							}

							else if (sr == 'GroundSurface')
							{
								faces_a =volume_ground_f10.faces[idx].a
								faces_b =volume_ground_f10.faces[idx].b
								faces_c =volume_ground_f10.faces[idx].c
								volume_conn_ground.faces.push(new THREE.Face3(faces_a,faces_b,faces_c))
								volume_conn_ground.faces[countground].color = new THREE.Color('#CF9FFF')
								countground = countground + 1
							}
						}
					}		
				}	
			}
			
			material2 = new THREE.MeshPhongMaterial({
				vertexColors: THREE.FaceColors, 
				side: THREE.DoubleSide,});
			material3 = new THREE.MeshPhongMaterial({
				vertexColors: THREE.FaceColors, 
				side: THREE.DoubleSide,
				transparent: true,
				opacity:0.6
			});
				
			volume_conn_roof.computeFaceNormals();
			volume_conn_roof.computeVertexNormals();
			volume_conn_wall.computeFaceNormals();
			volume_conn_wall.computeVertexNormals();
			volume_conn_ground.computeFaceNormals();
			volume_conn_ground.computeVertexNormals();

			poly_volume_roof = new THREE.Mesh(volume_conn_roof,material3)
			poly_volume_wall = new THREE.Mesh(volume_conn_wall,material3)
			poly_volume_ground = new THREE.Mesh(volume_conn_ground,material2)
			
			//floor9
			//scene.add(poly_face_roof_f9)
			scene.add(poly_face_wall_f9)
			scene.add(poly_face_ground_f9)
			//floor10
			//scene.add(poly_face_roof_f10)
			scene.add(poly_face_wall_f10)
			scene.add(poly_face_ground_f10)

			//connected wall
			//scene.add(poly_volume_roof)
			scene.add(poly_volume_wall)
			scene.add(poly_volume_ground)

			//floor9
			roof_checkbox_f9.checked = false
			ground_checkbox_f9.checked = true
			wall_checkbox_f9.checked = true

			//Floor10
			roof_checkbox_f10.checked = false
			ground_checkbox_f10.checked = true
			wall_checkbox_f10.checked = true

			//connected
			conn_Roofs.checked = false 
			conn_Walls.checked = true 
			conn_Grounds.checked = true 


			//draw shared line
			check_linesf9 = [];
			check_linesf10 = [];
			for(var i = 0; i<findline1.length; i++)
			{
				check = 0
				if(findline1[i].length != 0)
				{
					for(var j = 0; j < findline1[i].length -1; j++)
					{
						
						check = j+1
						if (findline1[i][j][0] == findline1[i][check][0] )
						{
							if ( findline1[i][j][1] == undefined || findline1[i][check][1] == undefined)
							{
								continue
							}

							else
							{
								temp= [points.vertices[findline1[i][j][1]-1], points.vertices[findline1[i][check][1]-1]];
							}
						}

						else if (findline1[i][j][0] != findline1[i][check][0])
						{
							continue;
						}

						const material1 = new THREE.LineBasicMaterial( { 
							color: 'red' , 
							side: THREE.DoubleSide,
							linewidth: 1
						} );
						//console.log('i', i , '\nalpha0 (a)',findline1[i][j],'\nalpha0(b)',findline1[i][check])
						const geometry1 = new THREE.BufferGeometry().setFromPoints(temp);
						const line = new THREE.Line( geometry1, material1 );
						temp = []
						scene.add( line )
						if ( i < 47)
						{
							check_linesf9.push(line);
						}
						
						else
						{
							check_linesf10.push(line);
						}
					}
				} 
			}

			//draw shared points
			check_pointsf10 =[]
			for(var i = 0; i<shared_point.length; i++)
			{
				if(shared_point[i].length != 0)
				{
					for(var j = 0; j < shared_point[i].length ; j++)
					{
						var geometry2 = new THREE.SphereGeometry( 0.016, 32, 16 );
						var material2 = new THREE.MeshBasicMaterial( { color: 'black' } );
						var circle = new THREE.Mesh( geometry2, material2 );
						circle.position.set(round(points.vertices[shared_point[i][j][1] - 1].x , 5) , round(points.vertices[shared_point[i][j][1] - 1].y , 5), round(points.vertices[shared_point[i][j][1] - 1].z , 5))
						scene.add( circle );
						if ( i < 47)
						{
							check_pointsf9.push(circle)
						} 
						else
						{
							check_pointsf10.push(circle)
						}

					}
				}
			}

			
			//find topology of the building
			connection = topology_connection(findBP1, line_ori, shared_point)
			// connection message
			for (var i = 0; i < connection.length; i++)
			{
				if (connection[i].length ==0 )
				{
					console.log("\nThere was no connection in the BuildingPart.",i +1)
				}

				else if ( i ==0 || i== 47)
				{
					if ( i == 0)
					{
						console.log("\nFloor9's Corridor connect with", connection[i].length ,"BuildingPart.",)
					}

					else
					{
						console.log("\nFloor10's Corridor connect with", connection[i].length ,"BuildingPart.",)

					}
				}

				else
				{
					console.log("\nBuildingPart",i, "connect with", connection[i].length ,"BuildingPart.",)
				}

				for(var j = 0; j< message[i].length; j++)
				{
					if (connection[i][j][0] == 0 || connection[i][j][0] == 47)
					{
						if (connection[i][j][0] == 0)
						{
							console.log("Floor9's Corridor shared" , String(connection[i][j][1]) , connection[i][j][2] )
						}

						else
						{
							console.log("Floor10's Corridor shared" , String(connection[i][j][1]) , connection[i][j][2] )

						}
					}

					else if ( message[0][j] == 59 ||  message[0][j] == 78 ||  message[0][j] == 91 )
					{
						if (message[0][j] == 59 )
						{
							console.log("BuildingPart", message[0][j] , 'shared', '6' , 'lines' )
						}

						else if (message[0][j] == 78 )
						{
							console.log("BuildingPart", message[0][j] , 'shared', '9' , 'lines')

						}

						else if (message[0][j] == 91 )
						{
							console.log("BuildingPart", message[0][j] , 'shared', '5' , 'lines')
						}

					}
					else
					{
						console.log("BuildingPart", connection[i][j][0] , 'shared', String(connection[i][j][1]) , connection[i][j][2])
					}
					
				}
			}
			
			
		}
		var performance_b = performance.now();
	alert ("time taken: " + round((performance_b - performance_a) / 1000 , 2) + "s. \n")
	}	
  })

  
  var path_line9=[], path_line10=[]
  //analysis
  const btn4 = document.querySelector("#BetweenRoom");  
  const text1 = document.querySelector("#room1"); 
  const text2 = document.querySelector("#room2"); 
  const submit = document.querySelector("#submit"); 
  const reset = document.querySelector("#Reset"); 
  const BPinfo = document.querySelector("#BPinfo"); 

  kiraan = 0 , indi = 0
  reset.addEventListener('click', function(){

	for ( var i in path_line9)
	{
		scene.remove(path_line9[i])
	}

	for ( var i in path_line10)
	{
		scene.remove(path_line10[i])
	}
  })

  btn4.addEventListener('click',function () {
	if (floor9_check.checked == true || floor10_check.checked == true)
	{
		vol2.style.display = "none"
		vol.style.display = "none"
		text1.style.display = "block"
		text2.style.display = "block"
		submit.style.display = "block"
		reset.style.display = "block"
		BPinfo.style.display = "block"

		submit.addEventListener('click',function() {
			
			var room1 = Number(text1.value)
			var room2 = Number(text2.value)

			if (room1 == room2)
			{
				alert('Please make sure Room 1 and Room2 are not same Room')
			}

			else if (message[0].includes(room1) == true && message[0].includes(room2) == true )
			{
				kiraan = kiraan +1

				if ( kiraan == 1)
				{				
					//remove existing floor9 from scene
					removeEntitiy(poly_face_roof_f9)
					removeEntitiy(poly_face_wall_f9)
					removeEntitiy(poly_face_ground_f9)
					scene.remove(poly_volume_roof)
					scene.remove(poly_volume_wall)
					scene.remove(poly_volume_ground)

					for ( var i in check_linesf9)
					{
						scene.remove(check_linesf9[i])
					}

					for ( var i in check_pointsf9)
					{
						scene.remove(check_pointsf9[i])
					}
					//remove existing floor10 from scene
					removeEntitiy(poly_face_roof_f10)
					removeEntitiy(poly_face_wall_f10)
					removeEntitiy(poly_face_ground_f10)

					for ( var i in check_linesf10)
					{
						scene.remove(check_linesf10[i])
					}

					for ( var i in check_pointsf10)
					{
						scene.remove(check_pointsf10[i])
					}
				}

				//add mesh for each layer
				material2 = new THREE.MeshPhongMaterial({
					vertexColors: THREE.FaceColors, 
					side: THREE.DoubleSide,});

				//floor 9
				poly_face_roof_f9 = new THREE.Mesh(face_roof_f9,material2)
				poly_face_wall_f9 = new THREE.Mesh(face_wall_f9,material2)
				poly_face_ground_f9 = new THREE.Mesh(face_ground_f9,material2)

				poly_face_roof_f9.name = 'poly_face_roof_f9'
				poly_face_wall_f9.name = 'poly_face_wall_f9'
				poly_face_ground_f9.name	= 'poly_face_ground_f9'

				//floor 10
				poly_face_roof_f10 = new THREE.Mesh(face_roof_f10,material2)
				poly_face_wall_f10 = new THREE.Mesh(face_wall_f10,material2)
				poly_face_ground_f10 = new THREE.Mesh(face_ground_f10,material2)

				poly_face_roof_f10.name = 'poly_face_roof_f10'
				poly_face_wall_f10.name = 'poly_face_wall_f10'
				poly_face_ground_f10.name	= 'poly_face_ground_f10'

				if ( floor9_check.checked == true && floor10_check.checked == false )
				{
					//add scene for floor 9
					scene.add(poly_face_wall_f9)
					scene.add(poly_face_ground_f9)

					roof_checkbox_f9.checked = false
					ground_checkbox_f9.checked = true
					wall_checkbox_f9.checked = true

					colour_ = 'black'
					wall_con = findBP1[0]
					BP_con = message[0]
					findshort = find_short(room1 , room2 , wall_con, BP_con)
					wall_midpoint = findshort[0]
					MiddleCorr = findshort[1]
					
					//find path of the line
					path = findpath (wall_midpoint , MiddleCorr , room1, room2)

					//push new point
					old_len = copy_points.vertices.length
					for ( var i = 0; i < path.length ; i++)
					{
						copy_points.vertices.push( 
							new THREE.Vector3(round(path[i][0] , 2) ,round(path[i][1] , 2 ), path[i][2] )
						)
					}

					//draw path between room a to b
					distance = 0

					
					for (var i = 0 ; i < path.length-1 ; i++ )
					{
						temp= ([ copy_points.vertices[old_len + i] , copy_points.vertices[old_len + i + 1]]);
							
						Px = copy_points.vertices[old_len + i].x - copy_points.vertices[old_len + i + 1].x
						Py = copy_points.vertices[old_len + i].y - copy_points.vertices[old_len + i + 1].y
						dist = Math.sqrt( Math.pow(Px , 2) + Math.pow(Py, 2))
						if ( i != path.length - 2)
						{
							distance = distance + dist
							const material1 = new THREE.LineDashedMaterial( { 
								linewidth: 0.5,
								scale: 2,
								dashSize: 1,
								gapSize: 1,
								color: colour_ , 
								side: THREE.DoubleSide} );

							const geometry1 = new THREE.BufferGeometry().setFromPoints(temp);
							const line = new THREE.Line( geometry1, material1 );
							temp = []
							scene.add( line );
							path_line9.push(line)
						}
						


						else if ( i == path.length - 2)
						{
							distance = distance + dist
							const origin = copy_points.vertices[old_len + i];
							const dir = copy_points.vertices[old_len + i + 1];        
							const length = dist;
							const hex = 'green';
							dir.sub(origin).normalize()
							
							const arrowHelper = new THREE.ArrowHelper( dir, origin, length, hex );
							path_line9.push(arrowHelper)
							scene.add( arrowHelper );
						}
					}

					console.log("\n\nShort Path Between Room\n\n")
					console.log( "Distance from Room " + room1 , " to Room " + room2 , " is " + round(distance*10 , 2) , ' meters')
					alert(" Distance from Room " + room1 + " to Room " + room2 + " is " + round(distance*10 , 2) + ' meters')
				}

				else if (floor10_check.checked == true && floor9_check.checked == false )
				{
					//add scene for floor 9
					scene.add(poly_face_wall_f10)
					scene.add(poly_face_ground_f10)


					roof_checkbox_f10.checked = false
					ground_checkbox_f10.checked = true
					wall_checkbox_f10.checked = true

					//adjust findBP1 and message same as floor9
					var newBP =[], newmessage=[]
					for ( var i in findBP1[0])
					{
						newBP.push([findBP1[0][i][0]-47 , findBP1[0][i][1]])
					}
					
					for ( var i in message[0])
					{
						newmessage.push(message[0][i] - 47)
					}

					unreal_room1 = room1 - 47
					unreal_room2 = room2 - 47
					wall_con = newBP
					BP_con = newmessage
					colour_ = 'black'

					findshort = find_short(unreal_room1 , unreal_room2 ,wall_con ,BP_con)
					wall_midpoint = findshort[0]
					MiddleCorr = findshort[1]
					
					//find path of the line
					path = findpath (wall_midpoint , MiddleCorr , unreal_room1, unreal_room2)

					
					for ( var i in path)
					{
						path[i] = [path[i][0], path[i][1], 3.99]
					}
					
					//push new point
					old_len = copy_points.vertices.length
					for ( var i = 0; i < path.length ; i++)
					{
						copy_points.vertices.push( 
							new THREE.Vector3(round(path[i][0] , 2) ,round(path[i][1] , 2 ), path[i][2] )
						)
					}

					//draw path between room a to b
					distance = 0

					
					for (var i = 0 ; i < path.length-1 ; i++ )
					{
						temp= ([ copy_points.vertices[old_len + i] , copy_points.vertices[old_len + i + 1]]);
							
						Px = copy_points.vertices[old_len + i].x - copy_points.vertices[old_len + i + 1].x
						Py = copy_points.vertices[old_len + i].y - copy_points.vertices[old_len + i + 1].y
						dist = Math.sqrt( Math.pow(Px , 2) + Math.pow(Py, 2))
						if ( i != path.length - 2)
						{
							distance = distance + dist
							const material1 = new THREE.LineDashedMaterial( { 
								linewidth: 0.5,
								scale: 2,
								dashSize: 1,
								gapSize: 1,
								color: colour_ , 
								side: THREE.DoubleSide} );

							const geometry1 = new THREE.BufferGeometry().setFromPoints(temp);
							const line = new THREE.Line( geometry1, material1 );
							temp = []
							scene.add( line );
							path_line10.push(line)
						}
						


						else if ( i == path.length - 2)
						{
							distance = distance + dist
							const origin = copy_points.vertices[old_len + i];
							const dir = copy_points.vertices[old_len + i + 1];        
							const length = dist;
							const hex = 'green';
							dir.sub(origin).normalize()
							
							const arrowHelper = new THREE.ArrowHelper( dir, origin, length, hex );
							path_line10.push(arrowHelper)
							scene.add( arrowHelper );
						}
					}

					console.log("\n\nShort Path Between Room\n\n")
					console.log( "Distance from Room " + room1 , " to Room " + room2 , " is " + round(distance*10 , 2) , ' meters')
					alert(" Distance from Room " + room1 + " to Room " + room2 + " is " + round(distance*10 , 2) + ' meters')
				}

				else if (floor10_check.checked == true && floor9_check.checked == true )
				{
					if(kiraan == 1)
					{
						//add scene for floor 9
						scene.add(poly_face_wall_f9)
						scene.add(poly_face_ground_f9)
						scene.add(poly_face_wall_f10)
						scene.add(poly_face_ground_f10)


						roof_checkbox_f9.checked = false
						ground_checkbox_f9.checked = true
						wall_checkbox_f9.checked = true

						roof_checkbox_f10.checked = false
						ground_checkbox_f10.checked = true
						wall_checkbox_f10.checked = true
					}

					if ((room1 >= 47 && room2 >= 47) || (room1 < 47 && room2 < 47))
					{
						if(room1 < 47 && room2 < 47)
						{
							console.log('floor 9 jer hihi')

							colour_ = 'black'
							wall_con = findBP1[0]
							BP_con = message[0]
							findshort = find_short(room1 , room2 , wall_con, BP_con)
							wall_midpoint = findshort[0]
							MiddleCorr = findshort[1]
							
							//find path of the line
							path = findpath (wall_midpoint , MiddleCorr , room1, room2)
		
							//push new point
							old_len = copy_points.vertices.length
							for ( var i = 0; i < path.length ; i++)
							{
								copy_points.vertices.push( 
									new THREE.Vector3(round(path[i][0] , 2) ,round(path[i][1] , 2 ), path[i][2] )
								)
							}
		
							//draw path between room a to b
							distance = 0
		
							
							for (var i = 0 ; i < path.length-1 ; i++ )
							{
								temp= ([ copy_points.vertices[old_len + i] , copy_points.vertices[old_len + i + 1]]);
									
								Px = copy_points.vertices[old_len + i].x - copy_points.vertices[old_len + i + 1].x
								Py = copy_points.vertices[old_len + i].y - copy_points.vertices[old_len + i + 1].y
								dist = Math.sqrt( Math.pow(Px , 2) + Math.pow(Py, 2))
								if ( i != path.length - 2)
								{
									distance = distance + dist
									const material1 = new THREE.LineDashedMaterial( { 
										linewidth: 0.5,
										scale: 2,
										dashSize: 1,
										gapSize: 1,
										color: colour_ , 
										side: THREE.DoubleSide} );
		
									const geometry1 = new THREE.BufferGeometry().setFromPoints(temp);
									const line = new THREE.Line( geometry1, material1 );
									temp = []
									scene.add( line );
									path_line9.push(line)
								}
								
		
		
								else if ( i == path.length - 2)
								{
									distance = distance + dist
									const origin = copy_points.vertices[old_len + i];
									const dir = copy_points.vertices[old_len + i + 1];        
									const length = dist;
									const hex = 'green';
									dir.sub(origin).normalize()
									
									const arrowHelper = new THREE.ArrowHelper( dir, origin, length, hex );
									path_line9.push(arrowHelper)
									scene.add( arrowHelper );
								}
							}
		
							console.log("\n\nShort Path Between Room\n\n")
							console.log( "Distance from Room " + room1 , " to Room " + room2 , " is " + round(distance*10 , 2) , ' meters')
							alert(" Distance from Room " + room1 + " to Room " + room2 + " is " + round(distance*10 , 2) + ' meters')

						}

						else if (room1 >= 47 && room2 >= 47)
						{
							console.log('floor 10 jer hihi')

							//adjust findBP1 and message same as floor9
							var newBP =[], newmessage=[]
							for ( var i = 0 ; i < findBP1[0].length; i++)
							{
								if (findBP1[0][i][0] < 47 )
								{
									newBP.push([findBP1[0][i][0] , findBP1[0][i][1]])
								}
							}
							
							for ( var i= 0 ; i<message[0].length; i++)
							{
								if ( message[0][i] < 47)
								{
									newmessage.push(message[0][i])
								}
							}
							
							unreal_room1 = room1 - 47
							unreal_room2 = room2 - 47

							wall_con = newBP
							BP_con = newmessage
							colour_ = 'black'

							findshort = find_short(unreal_room1 , unreal_room2 ,wall_con ,BP_con)
							wall_midpoint = findshort[0]
							MiddleCorr = findshort[1]
							
							//find path of the line
							path = findpath (wall_midpoint , MiddleCorr , unreal_room1, unreal_room2)

							
							for ( var i in path)
							{
								path[i] = [path[i][0], path[i][1], 3.99]
							}
							
							//push new point
							old_len = copy_points.vertices.length
							for ( var i = 0; i < path.length ; i++)
							{
								copy_points.vertices.push( 
									new THREE.Vector3(round(path[i][0] , 2) ,round(path[i][1] , 2 ), path[i][2] )
								)
							}

							//draw path between room a to b
							distance = 0

							
							for (var i = 0 ; i < path.length-1 ; i++ )
							{
								temp= ([ copy_points.vertices[old_len + i] , copy_points.vertices[old_len + i + 1]]);
									
								Px = copy_points.vertices[old_len + i].x - copy_points.vertices[old_len + i + 1].x
								Py = copy_points.vertices[old_len + i].y - copy_points.vertices[old_len + i + 1].y
								dist = Math.sqrt( Math.pow(Px , 2) + Math.pow(Py, 2))
								if ( i != path.length - 2)
								{
									distance = distance + dist
									const material1 = new THREE.LineDashedMaterial( { 
										linewidth: 0.5,
										scale: 2,
										dashSize: 1,
										gapSize: 1,
										color: colour_ , 
										side: THREE.DoubleSide} );

									const geometry1 = new THREE.BufferGeometry().setFromPoints(temp);
									const line = new THREE.Line( geometry1, material1 );
									temp = []
									scene.add( line );
									path_line10.push(line)
								}
								


								else if ( i == path.length - 2)
								{
									distance = distance + dist
									const origin = copy_points.vertices[old_len + i];
									const dir = copy_points.vertices[old_len + i + 1];        
									const length = dist;
									const hex = 'green';
									dir.sub(origin).normalize()
									
									const arrowHelper = new THREE.ArrowHelper( dir, origin, length, hex );
									path_line10.push(arrowHelper)
									scene.add( arrowHelper );
								}
							}

							console.log("\n\nShort Path Between Room\n\n")
							console.log( "Distance from Room " + room1 , " to Room " + room2 , " is " + round(distance*10 , 2) , ' meters')
							alert(" Distance from Room " + room1 + " to Room " + room2 + " is " + round(distance*10 , 2) + ' meters')
						}
						
					}

					else
					{
						if (room1<47 && room2 > 47)
						{
							var newBP =[], newmessage=[], f9_to_f10L =[]
							console.log("dari Floor 9 ke Floor 10")

							for ( var i = 0 ; i < findBP1[0].length; i++)
							{
								if (findBP1[0][i][0] < 47 )
								{
									newBP.push([findBP1[0][i][0] , findBP1[0][i][1]])
								}
							}
							
							for ( var i= 0 ; i<message[0].length; i++)
							{
								if ( message[0][i] < 47)
								{
									newmessage.push(message[0][i])
								}
							}
							
							lift1 = 12
							lift2 = 31
							lift3 = 44
							unreal_room2 = room2 - 47

							wall_con = newBP
							BP_con = newmessage
							colour_ = 'black'

							f9_to_f10=[] , 
							//room1 -> lift1
							findshort = find_short(room1 , lift1 ,wall_con ,BP_con)
							wall_midpoint = findshort[0]
							MiddleCorr = findshort[1]
							path = findpath (wall_midpoint , MiddleCorr , room1, lift1)
							f9_to_f10.push(path)
							distance1 = getDist(path)

							//lift1 -> unreal_room2
							findshort = find_short(lift1 , unreal_room2 ,wall_con ,BP_con)
							wall_midpoint = findshort[0]
							MiddleCorr = findshort[1]
							path = findpath (wall_midpoint , MiddleCorr , lift1, unreal_room2)
							for ( var i in path)
							{
								path[i] = [path[i][0], path[i][1], 3.99]
							}
							f9_to_f10.push(path)
							distance2 = getDist(path)
							
							total_dist = distance1 + distance2
							f9_to_f10L.push([f9_to_f10[0], f9_to_f10[1] ,total_dist])
							
							f9_to_f10=[] 
							//room1 -> lift2
							findshort = find_short(room1 , lift2 ,wall_con ,BP_con)
							wall_midpoint = findshort[0]
							MiddleCorr = findshort[1]
							path = findpath (wall_midpoint , MiddleCorr , room1, lift2)
							f9_to_f10.push(path)
							distance1 = getDist(path)

							//lift2 -> unreal_room2
							findshort = find_short(lift2 , unreal_room2 ,wall_con ,BP_con)
							wall_midpoint = findshort[0]
							MiddleCorr = findshort[1]
							path = findpath (wall_midpoint , MiddleCorr , lift2, unreal_room2)

							for ( var i in path)
							{
								path[i] = [path[i][0], path[i][1], 3.99]
							}
							f9_to_f10.push(path)
							distance2 = getDist(path)
							
							total_dist = distance1 + distance2
							f9_to_f10L.push([f9_to_f10[0], f9_to_f10[1] ,total_dist])


							f9_to_f10=[] 
							//room1 -> lift3
							findshort = find_short(room1 , lift3 ,wall_con ,BP_con)
							wall_midpoint = findshort[0]
							MiddleCorr = findshort[1]
							path = findpath (wall_midpoint , MiddleCorr , room1, lift3)
							f9_to_f10.push(path)
							distance1 = getDist(path)

							//lift3 -> unreal_room2
							findshort = find_short(lift3 , unreal_room2 ,wall_con ,BP_con)
							wall_midpoint = findshort[0]
							MiddleCorr = findshort[1]
							path = findpath (wall_midpoint , MiddleCorr , lift3, unreal_room2)
							for ( var i in path)
							{
								path[i] = [path[i][0], path[i][1], 3.99]
							}
							f9_to_f10.push(path)
							distance2 = getDist(path)
							
							total_dist = distance1 + distance2
							f9_to_f10L.push([f9_to_f10[0], f9_to_f10[1] ,total_dist])
							
							console.log('f9_to_f10L',f9_to_f10L)
							new_short = shortest_room_to_lift(f9_to_f10L)
							
							old_len = copy_points.vertices.length, indi = 0
							for ( var i = 0; i < new_short.length - 1; i++)
							{
								for ( var j= 0; j < new_short[i].length; j++)
								{
									x = round(new_short[i][j][0] , 2)
									y = round(new_short[i][j][1] , 2 )
									z = new_short[i][j][2]
									direct = new THREE.Vector3(x,y,z)
									copy_points.vertices.push(direct)
								}
							}

							for ( var i = 0; i < new_short.length - 1; i++)
							{
								for ( var j= 0; j < new_short[i].length - 1; j++)
								{
									temp= ([ copy_points.vertices[old_len + indi] , copy_points.vertices[old_len + indi + 1]]);
									Px = copy_points.vertices[old_len + indi].x - copy_points.vertices[old_len + indi + 1].x
									Py = copy_points.vertices[old_len + indi].y - copy_points.vertices[old_len + indi + 1].y
									dist = Math.sqrt( Math.pow(Px , 2) + Math.pow(Py, 2))
									
									if ( j != new_short[i].length - 2)
									{
										const material1 = new THREE.LineDashedMaterial( { 
											linewidth: 0.5,
											scale: 2,
											dashSize: 1,
											gapSize: 1,
											color: colour_ , 
											side: THREE.DoubleSide} );

										const geometry1 = new THREE.BufferGeometry().setFromPoints(temp);
										const line = new THREE.Line( geometry1, material1 );
										temp = []
										scene.add( line );
										if ( i == 0)
										{
											path_line9.push(line)
										}

										else if ( i == 1)
										{
											path_line10.push(line)
										}
										
										
									}

									else if ( j == new_short[i].length - 2)
									{
										var origin = copy_points.vertices[old_len + indi];
										var dir = copy_points.vertices[old_len + indi + 1];   
										var length = dist;
										var hex = 'green';
										dir.sub(origin).normalize()

										var arrowHelper = new THREE.ArrowHelper( dir, origin, length, hex );
										scene.add( arrowHelper );

										if ( i == 0)
										{
											path_line9.push(arrowHelper)
										}

										else if ( i == 1)
										{
											path_line10.push(arrowHelper)
										}
										
									}
									indi = indi + 1
								}
								indi = indi + 1
							}

							console.log("\n\nShort Path Between Room\n\n")
							console.log( "Distance from Room " + room1 , " to Room " + room2 , " is ", new_short[2] ,' meters')
							alert(" Distance from Room " + room1 + " to Room " + room2 + " is " + new_short[2] + ' meters')
						}

						else if (room1 > 47 && room2 < 47)
						{
							console.log("dari Floor 10 ke Floor 9")
							var newBP =[], newmessage=[], f10_to_f9L  =[]
							console.log("dari Floor 9 ke Floor 10")

							for ( var i = 0 ; i < findBP1[0].length; i++)
							{
								if (findBP1[0][i][0] < 47 )
								{
									newBP.push([findBP1[0][i][0] , findBP1[0][i][1]])
								}
							}
							
							for ( var i= 0 ; i<message[0].length; i++)
							{
								if ( message[0][i] < 47)
								{
									newmessage.push(message[0][i])
								}
							}
							
							lift1 = 12
							lift2 = 31
							lift3 = 44
							unreal_room1 = room1 - 47

							wall_con = newBP
							BP_con = newmessage
							colour_ = 'black'

							f10_to_f9=[] , 
							//unreal_room1 -> lift1
							findshort = find_short(unreal_room1 , lift1 ,wall_con ,BP_con)
							wall_midpoint = findshort[0]
							MiddleCorr = findshort[1]
							path = findpath (wall_midpoint , MiddleCorr , unreal_room1, lift1)
							for ( var i in path)
							{
								path[i] = [path[i][0], path[i][1], 3.99]
							}

							f10_to_f9.push(path)
							distance1 = getDist(path)

							//lift1 -> room2
							findshort = find_short(lift1 , room2 ,wall_con ,BP_con)
							wall_midpoint = findshort[0]
							MiddleCorr = findshort[1]
							path = findpath (wall_midpoint , MiddleCorr , lift1, room2)
							
							f10_to_f9.push(path)
							distance2 = getDist(path)
							
							total_dist = distance1 + distance2
							f10_to_f9L.push([f10_to_f9[0], f10_to_f9[1] ,total_dist])
							
							f10_to_f9=[] 
							//unreal_room1 -> lift2
							findshort = find_short(unreal_room1 , lift2 ,wall_con ,BP_con)
							wall_midpoint = findshort[0]
							MiddleCorr = findshort[1]
							path = findpath (wall_midpoint , MiddleCorr , unreal_room1, lift2)
							
							for ( var i in path)
							{
								path[i] = [path[i][0], path[i][1], 3.99]
							}

							f10_to_f9.push(path)
							distance1 = getDist(path)

							//lift2 -> room2
							findshort = find_short(lift2 , room2 ,wall_con ,BP_con)
							wall_midpoint = findshort[0]
							MiddleCorr = findshort[1]
							path = findpath (wall_midpoint , MiddleCorr , lift2, room2)

							f10_to_f9.push(path)
							distance2 = getDist(path)
							
							total_dist = distance1 + distance2
							f10_to_f9L.push([f10_to_f9[0], f10_to_f9[1] ,total_dist])


							f10_to_f9=[] 
							//unreal_room1 -> lift3
							findshort = find_short(unreal_room1 , lift3 ,wall_con ,BP_con)
							wall_midpoint = findshort[0]
							MiddleCorr = findshort[1]
							path = findpath (wall_midpoint , MiddleCorr , unreal_room1, lift3)
							for ( var i in path)
							{
								path[i] = [path[i][0], path[i][1], 3.99]
							}

							f10_to_f9.push(path)
							distance1 = getDist(path)

							//lift3 -> room2
							findshort = find_short(lift3 , room2 ,wall_con ,BP_con)
							wall_midpoint = findshort[0]
							MiddleCorr = findshort[1]
							path = findpath (wall_midpoint , MiddleCorr , lift3, room2)
							
							f10_to_f9.push(path)
							distance2 = getDist(path)
							
							total_dist = distance1 + distance2
							f10_to_f9L.push([f10_to_f9[0], f10_to_f9[1] ,total_dist])
							
							console.log('f10_to_f9L',f10_to_f9L)
							new_short = shortest_room_to_lift(f10_to_f9L)
							
							old_len = copy_points.vertices.length, indi = 0
							for ( var i = 0; i < new_short.length - 1; i++)
							{
								for ( var j= 0; j < new_short[i].length; j++)
								{
									x = round(new_short[i][j][0] , 2)
									y = round(new_short[i][j][1] , 2 )
									z = new_short[i][j][2]
									direct = new THREE.Vector3(x,y,z)
									copy_points.vertices.push(direct)
								}
							}

							// i = 0 is floor 10
							for ( var i = 0; i < new_short.length - 1; i++)
							{
								for ( var j= 0; j < new_short[i].length - 1; j++)
								{
									temp= ([ copy_points.vertices[old_len + indi] , copy_points.vertices[old_len + indi + 1]]);
									Px = copy_points.vertices[old_len + indi].x - copy_points.vertices[old_len + indi + 1].x
									Py = copy_points.vertices[old_len + indi].y - copy_points.vertices[old_len + indi + 1].y
									dist = Math.sqrt( Math.pow(Px , 2) + Math.pow(Py, 2))
									
									if ( j != new_short[i].length - 2)
									{
										const material1 = new THREE.LineDashedMaterial( { 
											linewidth: 0.5,
											scale: 2,
											dashSize: 1,
											gapSize: 1,
											color: colour_ , 
											side: THREE.DoubleSide} );

										const geometry1 = new THREE.BufferGeometry().setFromPoints(temp);
										const line = new THREE.Line( geometry1, material1 );
										temp = []
										scene.add( line );
										if ( i == 1)
										{
											path_line9.push(line)
										}

										else if ( i == 0)
										{
											path_line10.push(line)
										}
										
										
									}

									else if ( j == new_short[i].length - 2)
									{
										var origin = copy_points.vertices[old_len + indi];
										var dir = copy_points.vertices[old_len + indi + 1];   
										var length = dist;
										var hex = 'green';
										dir.sub(origin).normalize()

										var arrowHelper = new THREE.ArrowHelper( dir, origin, length, hex );
										scene.add( arrowHelper );

										if ( i == 1)
										{
											path_line9.push(arrowHelper)
										}

										else if ( i == 0)
										{
											path_line10.push(arrowHelper)
										}
										
									}
									indi = indi + 1
								}
								indi = indi + 1
							}

							console.log("\n\nShort Path Between Room\n\n")
							console.log( "Distance from Room " + room1 , " to Room " + room2 , " is ", new_short[2] ,' meters')
							alert(" Distance from Room " + room1 + " to Room " + room2 + " is " + new_short[2] + ' meters')
						}
					}
				}
			}

			else
			{
				alert('Please enter the valid Room')
			}

		})
	}
	
	
  })

  const btn5 = document.querySelector("#Emergency");
  btn5.addEventListener('click',function (){
	

	//remove existing floor9 from scene
	removeEntitiy(poly_face_roof_f9)
	removeEntitiy(poly_face_wall_f9)
	removeEntitiy(poly_face_ground_f9)

	scene.remove(poly_volume_roof)
	scene.remove(poly_volume_wall)
	scene.remove(poly_volume_ground)

	for ( var i in check_linesf9)
	{
		scene.remove(check_linesf9[i])
	}

	for ( var i in check_pointsf9)
	{
		scene.remove(check_pointsf9[i])
	}
	//remove existing floor10 from scene
	removeEntitiy(poly_face_roof_f10)
	removeEntitiy(poly_face_wall_f10)
	removeEntitiy(poly_face_ground_f10)

	for ( var i in check_linesf10)
	{
		scene.remove(check_linesf10[i])
	}

	for ( var i in check_pointsf10)
	{
		scene.remove(check_pointsf10[i])
	}

	//add mesh for each layer
	material2 = new THREE.MeshPhongMaterial({
		vertexColors: THREE.FaceColors, 
		side: THREE.DoubleSide,});
	
	//floor 9
	poly_face_roof_f9 = new THREE.Mesh(face_roof_f9,material2)
	poly_face_wall_f9 = new THREE.Mesh(face_wall_f9,material2)
	poly_face_ground_f9 = new THREE.Mesh(face_ground_f9,material2)

	poly_face_roof_f9.name = 'poly_face_roof_f9'
	poly_face_wall_f9.name = 'poly_face_wall_f9'
	poly_face_ground_f9.name = 'poly_face_ground_f9'

	//floor 10
	poly_face_roof_f10 = new THREE.Mesh(face_roof_f10,material2)
	poly_face_wall_f10 = new THREE.Mesh(face_wall_f10,material2)
	poly_face_ground_f10 = new THREE.Mesh(face_ground_f10,material2)

	poly_face_roof_f10.name = 'poly_face_roof_f10'
	poly_face_wall_f10.name = 'poly_face_wall_f10'
	poly_face_ground_f10.name	= 'poly_face_ground_f10'

	text1.style.display = "none"
	text2.style.display = "none"
	submit.style.display = "none"
	reset.style.display = "none"
	BPinfo.style.display = "none"
	vol.style.display = "none"
	vol2.style.display = "none"

	if ( floor9_check.checked == true && floor10_check.checked == false)	
	{
		//add scene for floor 9
		scene.add(poly_face_wall_f9)
		scene.add(poly_face_ground_f9)
		
		roof_checkbox_f9.checked = false
		wall_checkbox_f9.checked = true
		ground_checkbox_f9.checked = true
		//common property
		lift1 = 12
		lift2 = 31
		lift3 = 44

		newBP =[], newmessage =[]
		for ( var i = 0 ; i < findBP1[0].length; i++)
		{
			if (findBP1[0][i][0] < 47 )
			{
				newBP.push([findBP1[0][i][0] , findBP1[0][i][1]])
			}
		}
		
		for ( var i= 0 ; i<message[0].length; i++)
		{
			if ( message[0][i] < 47)
			{
				newmessage.push(message[0][i])
			}
		}

		// List of wall that intercept with corridor
		wall_con = newBP
		BP_con = newmessage

		//find wall in common property  that intercept with corridor
		var new_arr = [] , total = 0 , storewall =[] , check=0 , storewall2 =[] , storewall3 =[] 
		for ( var i = 0 ; i < wall_con.length; i++)
		{
			if ( total == 0)
			{
				if (lift1 == wall_con[i][0])
				{
					storewall.push(wall_con[i])
					check = i+1
					if (lift1 != wall_con[check][0])
					{
						right = find_right_wall(storewall)	
						total  = 1
						new_arr.push(right)				
					}
				}
			}

			else if(total == 1)
			{
				if (lift2 == wall_con[i][0])
				{
					storewall2.push(wall_con[i])
					check = i+1
					
					if (check >= wall_con.length)
					{
						check = wall_con.length -  wall_con.length
					}

					if (lift2 != wall_con[check][0])
					{
						right = find_right_wall(storewall2)	
						total  = 1 + 1
						new_arr.push(right)	
				
					}			
				}
			}
			
			//for 3 common property
			
			else if (total == 2)
			{
				if (lift3 == wall_con[i][0])
				{
					storewall3.push(wall_con[i])
					check = i+1
					
					if (check >= wall_con.length)
					{
						check = wall_con.length -  wall_con.length
					}

					if (lift3 != wall_con[check][0])
					{
						right = find_right_wall(storewall3)	
						total  = total + 1
						new_arr.push(right)	
				
					}			
				}
			}
			
		}
		
		//find each BP's wall that intercept with corridor's wall
		store=[] , new_store = []
		for ( var i = 0 ; i < wall_con.length; i++)
		{

			
			if (lift1 == wall_con[i][0] || lift2 == wall_con[i][0] || lift3 == wall_con[i][0] )
			{
				continue;
			}

			else
			{
				
				store.push(wall_con[i])
				check = i+1
				if (check >= wall_con.length)
				{
					check = wall_con.length -  wall_con.length
				}

				if (wall_con[i][0] != wall_con[check][0])
				{
					right = find_right_wall(store)
					new_store.push(right)
					store = []
				}
			}
		}

		//find midpoint for each wall and each lift
		wall_midpoint = find_middle(new_store)
		//console.log('wall_midpoint : ',wall_midpoint)
		lift_midpoint = find_middle(new_arr)
		line_lift1 = lift_midpoint[0]
		line_lift2 = lift_midpoint[1]
		line_lift3 = lift_midpoint[2]

		//console.log('line_lift1',line_lift1)
		//find nearby stair
		var room1 =[] , property =[] , j=0
		for (var i = 0; i<BP_con.length; i++)
		{

			if (BP_con[i] == lift1 || BP_con[i] == lift2 || BP_con[i] == lift3)
			{
				continue
			}

			else
			{
				X_to_L1 = line_lift1[0] - wall_midpoint[j][0]
				X_to_L2 = line_lift2[0] - wall_midpoint[j][0]
				X_to_L3 = line_lift3[0] - wall_midpoint[j][0]

				Y_to_L1 = line_lift1[1] - wall_midpoint[j][1]
				Y_to_L2 = line_lift2[1] - wall_midpoint[j][1]
				Y_to_L3 = line_lift3[1] - wall_midpoint[j][1]

				DistL1 =  Math.sqrt( Math.pow(X_to_L1 , 2) + Math.pow(Y_to_L1, 2))
				DistL2 =  Math.sqrt( Math.pow(X_to_L2 , 2) + Math.pow(Y_to_L2, 2))
				DistL3 =  Math.sqrt( Math.pow(X_to_L3 , 2) + Math.pow(Y_to_L3, 2))

				//console.log( "BP: ", BP_con[i] ,"DistL1 : ", DistL1)
				//console.log( "BP: ", BP_con[i] ,"DistL2 : ", DistL2)
				//console.log( "BP: ", BP_con[i] ,"DistL3 : ", DistL3)

				if(DistL1 <= DistL2 && DistL1 <= DistL3)
				{
					room1.push(BP_con[i])
					property.push(lift1)
				}

				else if (DistL2 <= DistL1 && DistL2 <= DistL3)
				{
					room1.push(BP_con[i])
					property.push(lift2)
				}

				else if (DistL3 <= DistL1 && DistL3 <= DistL2)
				{
					room1.push(BP_con[i])
					property.push(lift3)
				}
			}

			j = j +1
		}

		for ( var k = 0; k< room1.length ; k++)
		{
			var a = room1[k]
			var b = property[k]

			if ( b == lift1)
			{
				colour_ = 'purple'
			}

			else if ( b == lift2)
			{
				colour_ = 'red'
			}

			else
			{
				colour_ = 'black'
			}

			findshort = find_short(a , b , wall_con, BP_con)
			wall_midpoint = findshort[0]
			MiddleCorr = findshort[1]

			path = findpath (wall_midpoint , MiddleCorr , a, b)

			//push new point
			old_len = copy_points.vertices.length
			for ( var i = 0; i < path.length ; i++)
			{
				copy_points.vertices.push( 
					new THREE.Vector3(round(path[i][0] , 2) ,round(path[i][1] , 2 ), path[i][2] )
				)
			}

			//draw path between room a to b
			distance = 0

			
			for (var i = 0 ; i < path.length-1 ; i++ )
			{
				temp= ([ copy_points.vertices[old_len + i] , copy_points.vertices[old_len + i + 1]]);
					
				Px = copy_points.vertices[old_len + i].x - copy_points.vertices[old_len + i + 1].x
				Py = copy_points.vertices[old_len + i].y - copy_points.vertices[old_len + i + 1].y
				dist = Math.sqrt( Math.pow(Px , 2) + Math.pow(Py, 2))
				if ( i != path.length - 2)
				{
					distance = distance + dist
					const material1 = new THREE.LineDashedMaterial( { 
						linewidth: 0.5,
						scale: 2,
						dashSize: 1,
						gapSize: 1,
						color: colour_ , 
						side: THREE.DoubleSide} );

					const geometry1 = new THREE.BufferGeometry().setFromPoints(temp);
					const line = new THREE.Line( geometry1, material1 );
					temp = []
					scene.add( line );
					path_line9.push(line)
				}
				


				else if ( i == path.length - 2)
				{
					distance = distance + dist
					const origin = copy_points.vertices[old_len + i];
					const dir = copy_points.vertices[old_len + i + 1];        
					const length = dist;
					const hex = 'green';
					dir.sub(origin).normalize()
					
					const arrowHelper = new THREE.ArrowHelper( dir, origin, length, hex );
					path_line9.push(arrowHelper)
					scene.add( arrowHelper );
				}
			}
			console.log( "\nDistance from Room " + a , "to stairs " + b , " is " + round(distance*10 , 2) , ' meters')
		}
	}

	if (floor10_check.checked == true)
	{
		if(floor10_check.checked == true && floor9_check.checked == false)
		{
			//add scene for floor 10
			scene.add(poly_face_wall_f10)
			scene.add(poly_face_ground_f10)

			roof_checkbox_f10.checked = false
			wall_checkbox_f10.checked = true
			ground_checkbox_f10.checked = true
			//common property
			lift1 = 12
			lift2 = 31
			lift3 = 44

			newBP =[], newmessage =[]
			for ( var i = 0 ; i < findBP1[0].length; i++)
			{
				newBP.push([findBP1[0][i][0] - 47 , findBP1[0][i][1]])
			}
			
			for ( var i= 0 ; i<message[0].length; i++)
			{
				newmessage.push(message[0][i] - 47)
			}

			// List of wall that intercept with corridor
			wall_con = newBP
			BP_con = newmessage

			//find wall in common property  that intercept with corridor
			var new_arr = [] , total = 0 , storewall =[] , check=0 , storewall2 =[] , storewall3 =[] 
			for ( var i = 0 ; i < wall_con.length; i++)
			{
				if ( total == 0)
				{
					if (lift1 == wall_con[i][0])
					{
						storewall.push(wall_con[i])
						check = i+1
						if (lift1 != wall_con[check][0])
						{
							right = find_right_wall(storewall)	
							total  = 1
							new_arr.push(right)				
						}
					}
				}

				else if(total == 1)
				{
					if (lift2 == wall_con[i][0])
					{
						storewall2.push(wall_con[i])
						check = i+1
						
						if (check >= wall_con.length)
						{
							check = wall_con.length -  wall_con.length
						}

						if (lift2 != wall_con[check][0])
						{
							right = find_right_wall(storewall2)	
							total  = 1 + 1
							new_arr.push(right)	
					
						}			
					}
				}
				
				//for 3 common property
				
				else if (total == 2)
				{
					if (lift3 == wall_con[i][0])
					{
						storewall3.push(wall_con[i])
						check = i+1
						
						if (check >= wall_con.length)
						{
							check = wall_con.length -  wall_con.length
						}

						if (lift3 != wall_con[check][0])
						{
							right = find_right_wall(storewall3)	
							total  = total + 1
							new_arr.push(right)	
					
						}			
					}
				}
				
			}
			
			//find each BP's wall that intercept with corridor's wall
			store=[] , new_store = []
			for ( var i = 0 ; i < wall_con.length; i++)
			{

				
				if (lift1 == wall_con[i][0] || lift2 == wall_con[i][0] || lift3 == wall_con[i][0] )
				{
					continue;
				}

				else
				{
					
					store.push(wall_con[i])
					check = i+1
					if (check >= wall_con.length)
					{
						check = wall_con.length -  wall_con.length
					}

					if (wall_con[i][0] != wall_con[check][0])
					{
						right = find_right_wall(store)
						new_store.push(right)
						store = []
					}
				}
			}

			//find midpoint for each wall and each lift
			wall_midpoint = find_middle(new_store)
			//console.log('wall_midpoint : ',wall_midpoint)
			lift_midpoint = find_middle(new_arr)
			line_lift1 = lift_midpoint[0]
			line_lift2 = lift_midpoint[1]
			line_lift3 = lift_midpoint[2]

			//console.log('line_lift1',line_lift1)
			//find nearby stair
			var room1 =[] , property =[] , j=0
			for (var i = 0; i<BP_con.length; i++)
			{

				if (BP_con[i] == lift1 || BP_con[i] == lift2 || BP_con[i] == lift3)
				{
					continue
				}

				else
				{
					X_to_L1 = line_lift1[0] - wall_midpoint[j][0]
					X_to_L2 = line_lift2[0] - wall_midpoint[j][0]
					X_to_L3 = line_lift3[0] - wall_midpoint[j][0]

					Y_to_L1 = line_lift1[1] - wall_midpoint[j][1]
					Y_to_L2 = line_lift2[1] - wall_midpoint[j][1]
					Y_to_L3 = line_lift3[1] - wall_midpoint[j][1]

					DistL1 =  Math.sqrt( Math.pow(X_to_L1 , 2) + Math.pow(Y_to_L1, 2))
					DistL2 =  Math.sqrt( Math.pow(X_to_L2 , 2) + Math.pow(Y_to_L2, 2))
					DistL3 =  Math.sqrt( Math.pow(X_to_L3 , 2) + Math.pow(Y_to_L3, 2))

					//console.log( "BP: ", BP_con[i] ,"DistL1 : ", DistL1)
					//console.log( "BP: ", BP_con[i] ,"DistL2 : ", DistL2)
					//console.log( "BP: ", BP_con[i] ,"DistL3 : ", DistL3)

					if(DistL1 <= DistL2 && DistL1 <= DistL3)
					{
						room1.push(BP_con[i])
						property.push(lift1)
					}

					else if (DistL2 <= DistL1 && DistL2 <= DistL3)
					{
						room1.push(BP_con[i])
						property.push(lift2)
					}

					else if (DistL3 <= DistL1 && DistL3 <= DistL2)
					{
						room1.push(BP_con[i])
						property.push(lift3)
					}
				}

				j = j +1
			}

			for ( var k = 0; k< room1.length ; k++)
			{
				var a = room1[k]
				var b = property[k]

				if ( b == lift1)
				{
					colour_ = 'purple'
				}

				else if ( b == lift2)
				{
					colour_ = 'red'
				}

				else
				{
					colour_ = 'black'
				}

				findshort = find_short(a , b , wall_con, BP_con)
				wall_midpoint = findshort[0]
				MiddleCorr = findshort[1]

				path = findpath (wall_midpoint , MiddleCorr , a, b)

				for ( var i in path)
				{
					path[i] = [path[i][0], path[i][1], 3.99]
				}
				//push new point
				old_len = copy_points.vertices.length
				for ( var i = 0; i < path.length ; i++)
				{
					copy_points.vertices.push( 
						new THREE.Vector3(round(path[i][0] , 2) ,round(path[i][1] , 2 ), path[i][2] )
					)
				}

				//draw path between room a to b
				distance = 0

				
				for (var i = 0 ; i < path.length-1 ; i++ )
				{
					temp= ([ copy_points.vertices[old_len + i] , copy_points.vertices[old_len + i + 1]]);
						
					Px = copy_points.vertices[old_len + i].x - copy_points.vertices[old_len + i + 1].x
					Py = copy_points.vertices[old_len + i].y - copy_points.vertices[old_len + i + 1].y
					dist = Math.sqrt( Math.pow(Px , 2) + Math.pow(Py, 2))
					if ( i != path.length - 2)
					{
						distance = distance + dist
						const material1 = new THREE.LineDashedMaterial( { 
							linewidth: 0.5,
							scale: 2,
							dashSize: 1,
							gapSize: 1,
							color: colour_ , 
							side: THREE.DoubleSide} );

						const geometry1 = new THREE.BufferGeometry().setFromPoints(temp);
						const line = new THREE.Line( geometry1, material1 );
						temp = []
						scene.add( line );
						path_line9.push(line)
					}
					


					else if ( i == path.length - 2)
					{
						distance = distance + dist
						const origin = copy_points.vertices[old_len + i];
						const dir = copy_points.vertices[old_len + i + 1];        
						const length = dist;
						const hex = 'green';
						dir.sub(origin).normalize()
						
						const arrowHelper = new THREE.ArrowHelper( dir, origin, length, hex );
						path_line9.push(arrowHelper)
						scene.add( arrowHelper );
					}
				}
				console.log( "\nDistance from Room " + (a + 47) , "to stairs " + (b + 47 ), " is " + round(distance*10 , 2) , ' meters')
			}

		}

		else if (floor10_check.checked == true && floor9_check.checked == true)
		{
			scene.add(poly_face_wall_f9)
			scene.add(poly_face_ground_f9)
			scene.add(poly_face_wall_f10)
			scene.add(poly_face_ground_f10)

			roof_checkbox_f9.checked = false
			wall_checkbox_f9.checked = true
			ground_checkbox_f9.checked = true

			roof_checkbox_f10.checked = false
			wall_checkbox_f10.checked = true
			ground_checkbox_f10.checked = true
			//common property
			lift1 = 12
			lift2 = 31
			lift3 = 44

			newBP =[], newmessage =[]
			for ( var i = 0 ; i < findBP1[0].length; i++)
			{
				if (findBP1[0][i][0] < 47 )
				{
					newBP.push([findBP1[0][i][0] , findBP1[0][i][1]])
				}
			}
			
			for ( var i= 0 ; i<message[0].length; i++)
			{
				if ( message[0][i] < 47)
				{
					newmessage.push(message[0][i])
				}
			}

			// List of wall that intercept with corridor
			wall_con = newBP
			BP_con = newmessage

			//find wall in common property  that intercept with corridor
			var new_arr = [] , total = 0 , storewall =[] , check=0 , storewall2 =[] , storewall3 =[] 
			for ( var i = 0 ; i < wall_con.length; i++)
			{
				if ( total == 0)
				{
					if (lift1 == wall_con[i][0])
					{
						storewall.push(wall_con[i])
						check = i+1
						if (lift1 != wall_con[check][0])
						{
							right = find_right_wall(storewall)	
							total  = 1
							new_arr.push(right)				
						}
					}
				}

				else if(total == 1)
				{
					if (lift2 == wall_con[i][0])
					{
						storewall2.push(wall_con[i])
						check = i+1
						
						if (check >= wall_con.length)
						{
							check = wall_con.length -  wall_con.length
						}

						if (lift2 != wall_con[check][0])
						{
							right = find_right_wall(storewall2)	
							total  = 1 + 1
							new_arr.push(right)	
					
						}			
					}
				}
				
				//for 3 common property
				
				else if (total == 2)
				{
					if (lift3 == wall_con[i][0])
					{
						storewall3.push(wall_con[i])
						check = i+1
						
						if (check >= wall_con.length)
						{
							check = wall_con.length -  wall_con.length
						}

						if (lift3 != wall_con[check][0])
						{
							right = find_right_wall(storewall3)	
							total  = total + 1
							new_arr.push(right)	
					
						}			
					}
				}
				
			}
			
			//find each BP's wall that intercept with corridor's wall
			store=[] , new_store = []
			for ( var i = 0 ; i < wall_con.length; i++)
			{

				
				if (lift1 == wall_con[i][0] || lift2 == wall_con[i][0] || lift3 == wall_con[i][0] )
				{
					continue;
				}

				else
				{
					
					store.push(wall_con[i])
					check = i+1
					if (check >= wall_con.length)
					{
						check = wall_con.length -  wall_con.length
					}

					if (wall_con[i][0] != wall_con[check][0])
					{
						right = find_right_wall(store)
						new_store.push(right)
						store = []
					}
				}
			}

			//find midpoint for each wall and each lift
			wall_midpoint = find_middle(new_store)
			//console.log('wall_midpoint : ',wall_midpoint)
			lift_midpoint = find_middle(new_arr)
			line_lift1 = lift_midpoint[0]
			line_lift2 = lift_midpoint[1]
			line_lift3 = lift_midpoint[2]

			//console.log('line_lift1',line_lift1)
			//find nearby stair
			var room1 =[] , property =[] , j=0
			for (var i = 0; i<BP_con.length; i++)
			{

				if (BP_con[i] == lift1 || BP_con[i] == lift2 || BP_con[i] == lift3)
				{
					continue
				}

				else
				{
					X_to_L1 = line_lift1[0] - wall_midpoint[j][0]
					X_to_L2 = line_lift2[0] - wall_midpoint[j][0]
					X_to_L3 = line_lift3[0] - wall_midpoint[j][0]

					Y_to_L1 = line_lift1[1] - wall_midpoint[j][1]
					Y_to_L2 = line_lift2[1] - wall_midpoint[j][1]
					Y_to_L3 = line_lift3[1] - wall_midpoint[j][1]

					DistL1 =  Math.sqrt( Math.pow(X_to_L1 , 2) + Math.pow(Y_to_L1, 2))
					DistL2 =  Math.sqrt( Math.pow(X_to_L2 , 2) + Math.pow(Y_to_L2, 2))
					DistL3 =  Math.sqrt( Math.pow(X_to_L3 , 2) + Math.pow(Y_to_L3, 2))

					//console.log( "BP: ", BP_con[i] ,"DistL1 : ", DistL1)
					//console.log( "BP: ", BP_con[i] ,"DistL2 : ", DistL2)
					//console.log( "BP: ", BP_con[i] ,"DistL3 : ", DistL3)

					if(DistL1 <= DistL2 && DistL1 <= DistL3)
					{
						room1.push(BP_con[i])
						property.push(lift1)
					}

					else if (DistL2 <= DistL1 && DistL2 <= DistL3)
					{
						room1.push(BP_con[i])
						property.push(lift2)
					}

					else if (DistL3 <= DistL1 && DistL3 <= DistL2)
					{
						room1.push(BP_con[i])
						property.push(lift3)
					}
				}

				j = j +1
			}


			for ( m = 0; m < 2;m++)
			{
				Floor = m + 9
				console.log( "\nEmergency Path for Floor", String(Floor) )
				for ( var k = 0; k< room1.length ; k++)
				{
					var a = room1[k]
					var b = property[k]

					if ( b == lift1)
					{
						colour_ = 'purple'
					}

					else if ( b == lift2)
					{
						colour_ = 'red'
					}

					else
					{
						colour_ = 'black'
					}

					findshort = find_short(a , b , wall_con, BP_con)
					wall_midpoint = findshort[0]
					MiddleCorr = findshort[1]

					path = findpath (wall_midpoint , MiddleCorr , a, b)

					if ( m == 1)
					{
						for ( var n in path)
						{
							path[n] = [path[n][0], path[n][1], 3.99]
						}
					}

					//push new point
					old_len = copy_points.vertices.length , indi = 0
					for ( var i = 0; i < path.length ; i++)
					{
						copy_points.vertices.push( 
							new THREE.Vector3(round(path[i][0] , 2) ,round(path[i][1] , 2 ), path[i][2] )
						)
					}

					//draw path between room a to b
					distance = 0

					
					for (var i = 0 ; i < path.length-1 ; i++ )
					{
						temp= ([ copy_points.vertices[old_len + indi] , copy_points.vertices[old_len + indi + 1]]);
							
						Px = copy_points.vertices[old_len + indi].x - copy_points.vertices[old_len + indi + 1].x
						Py = copy_points.vertices[old_len + indi].y - copy_points.vertices[old_len + indi + 1].y
						dist = Math.sqrt( Math.pow(Px , 2) + Math.pow(Py, 2))
						if ( i != path.length - 2)
						{
							distance = distance + dist
							const material1 = new THREE.LineDashedMaterial( { 
								linewidth: 0.5,
								scale: 2,
								dashSize: 1,
								gapSize: 1,
								color: colour_ , 
								side: THREE.DoubleSide} );

							const geometry1 = new THREE.BufferGeometry().setFromPoints(temp);
							const line = new THREE.Line( geometry1, material1 );
							temp = []
							scene.add( line );
							if ( m == 0)
							{
								path_line9.push(line)
							}

							else if ( m == 1)
							{
								path_line10.push(line)
							}
						}
						


						else if ( i == path.length - 2)
						{
							distance = distance + dist
							const origin = copy_points.vertices[old_len + indi];
							const dir = copy_points.vertices[old_len + indi + 1];        
							const length = dist;
							const hex = 'green';
							dir.sub(origin).normalize()
							
							const arrowHelper = new THREE.ArrowHelper( dir, origin, length, hex );
							
							scene.add( arrowHelper );
							if ( m == 0)
							{
								path_line9.push(arrowHelper)
							}

							else if ( m == 1)
							{
								path_line10.push(arrowHelper)
							}
						}
					
						indi = indi + 1
					}

					if ( m == 0)
					{
						console.log( "Distance from Room " + a , "to stairs " + b , " is " + round(distance*10 , 2) , ' meters')
					}

					else if ( m == 1)
					{
						console.log( "Distance from Room " + (a + 47) , "to stairs " + (b +47), " is " + round(distance*10 , 2) , ' meters')
					}
				}
			}
		}
	}

  })
  
// axes
//scene.add( new THREE.AxesHelper( 20 ) );

//setup the camera
const controls = new THREE.OrbitControls(camera, renderer.domElement);
var get = getStats(points.vertices)
var minX = get[0]
var minY = get[1]
var minZ = get[2]
var avgX = get[3]
var avgY = get[4]
var avgZ = get[5]

controls.target.set(avgX,avgY,avgZ);

//enable movement parallel to ground
controls.screenSpacePanning = true;
//camera.position.set(95.18923405112446 /10,  -30.956398337114543 /10,  55.7 /10)
camera.position.set(50.18923405112446 /10,  -200.956398337114543 /10,  100.7 /10)
camera.up.set(0, 0, 1);
controls.update()

//add light source
const light = new THREE.DirectionalLight( 0xFFFFFF , 1 );
light.position.set(-6,6,16)
light.target.position.set(5,-3,0)
light.target.updateMatrixWorld()

//setup shadow
light.castShadow = true;
light.shadow.mapSize.width = 512; // default
light.shadow.mapSize.height = 512; // default
light.shadow.camera.near = 0.5; // default
light.shadow.camera.far = 100; // default
// light helper
const helper = new THREE.DirectionalLightHelper( light, 1 );
scene.add(light);

//hemisphere light light dari atas dan bawah
var hemilight = new THREE.HemisphereLight('white', 'gray', 0.4);
scene.add(hemilight)

//ambient light
var ambient = new THREE.AmbientLight(0x404040)
scene.add(ambient)
// add grid
const size = 60
const divisions = 100;
const gridHelper = new THREE.GridHelper( size, divisions );
gridHelper.rotation.x=Math.PI/2;
gridHelper.position.set(0,0,-1)
//scene.add( gridHelper );


//add plane
var texture_ground = new THREE.TextureLoader().load ('bg/Location Snapshot.jpg')
var geometryPlane = new THREE.PlaneGeometry(65,65);
var materialPlane = new THREE.MeshStandardMaterial({ map: texture_ground, side : THREE.DoubleSide})
//var materialPlane = new THREE.MeshStandardMaterial({ color: 'white' , transparent:false , opacity:0.5})
var plane = new THREE.Mesh ( geometryPlane, materialPlane );
//plane.rotation.x = -Math.PI/2;
plane.position.set(0,-2,-1)
plane.receiveShadow = true;
scene.add( plane )



//add model
// model
var model , obje
var loader  = new THREE.OBJLoader()
var MTLLoader = new THREE.MTLLoader()
MTLLoader.setPath( 'obj/' )
MTLLoader.load( 'BagunanBesar.mtl', function ( materials ) {

    materials.preload();
    loader.setMaterials( materials )
    loader.setPath( 'obj/' )
    loader.load( 'BagunanBesar.obj', function ( object ) 
    {
		object.traverse (function (obj) {
			obj.castShadow = true
			obj.receiveShadow = true

			if (obj.isMesh)	{
				obj.material.color.set('gray')
				
				obje = obj
				receive()	
			}
		})
		object.scale.setScalar(0.1)
		model = object
        scene.add( object)
		onboi()
		
    });
} );

//calling object in OBJLoader
const Building_Check = document.getElementById("Building")
Building_Check.addEventListener('change',function()
{
	onboi()
})

function receive()
{

	if ( floor9_check.checked == false || floor10_check.checked == false)
	{
		obje.material.transparent = false
	}

	else
	{
		obje.material.transparent = true
		obje.material.opacity = 0.91
	}
}

function onboi()
{
	if (Building_Check.checked == false)
	{
		scene.remove(model)
	}

	if (Building_Check.checked == true)
	{
		scene.add(model)
	}
	
}

//check the performance
var stats = new Stats();
stats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom
document.body.appendChild( stats.dom );
stats.domElement.style.cssText = 'position:absolute; bottom:0px; left:40px;  ';

THREEx.WindowResize(renderer, camera);

controls.addEventListener("change", () => {
if (this.renderer) this.renderer.render(this.scene, camera);
});

controls.update();

var astro 
const raycaster = new THREE.Raycaster();
const pointer = new THREE.Vector2();

/*
window.addEventListener('mousemove' , event => {
	// calculate pointer position in normalized device coordinates
	// (-1 to +1) for both components
	pointer.x = ( event.clientX / window.innerWidth ) * 2 - 1;
	pointer.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
    raycaster.setFromCamera( pointer, camera );
    const intersects = raycaster.intersectObjects( scene.children );
	tryjer = triangle_index()
	roof = tryjer[0]
	wall = tryjer[1]
	ground = tryjer[2]
    if (info_click.checked == true )
	{
		for ( let i = 0; i < intersects.length; i ++ )
		{
			if(intersects[i].object.name == 'poly_face_roof_f9' 
			|| intersects[i].object.name == 'poly_face_wall_f9' 
			|| intersects[i].object.name == 'poly_face_ground_f9'
			|| intersects[i].object.name == 'poly_face_roof_f10'
			|| intersects[i].object.name == 'poly_face_wall_f10'
			|| intersects[i].object.name == 'poly_face_ground_f10')
			{
				console.log(intersects)
				break;
			}	
		}
	}
})
*/
window.addEventListener('click' , event => {
	// calculate pointer position in normalized device coordinates
	// (-1 to +1) for both components
	pointer.x = ( event.clientX / window.innerWidth ) * 2 - 1;
	pointer.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
    raycaster.setFromCamera( pointer, camera );
    const intersects = raycaster.intersectObjects( scene.children );
    if (info_click.checked == true )
	{

		for ( let i = 0; i < intersects.length; i ++ )
		{
			if(intersects[i].object.name == 'poly_face_roof_f9' 
			|| intersects[i].object.name == 'poly_face_wall_f9' 
			|| intersects[i].object.name == 'poly_face_ground_f9'
			|| intersects[i].object.name == 'poly_face_roof_f10'
			|| intersects[i].object.name == 'poly_face_wall_f10'
			|| intersects[i].object.name == 'poly_face_ground_f10')
			{
				astro = intersects[i]
				click_checker()
				break;
			}	
		}
	}
})

const info_click= document.getElementById("info_click");
function click_checker()
{
	surface_list = display_surface()
	tryjer = triangle_index()
	roof = tryjer[0]
	wall = tryjer[1]
	ground = tryjer[2]
	new_conn = conn_format()
	//console.log('surface_list',surface_list)
	if ( astro.object.name == 'poly_face_roof_f9' )
	{
		for ( var i =0; i < roof.length; i++)
		{
			if ( i == 0)
			{
				BP = ["Floor9's", " Corridor"]
			}

			else
			{
				BP = ["BuildingPart ", i]
			}
			faceindex = astro.faceIndex + 1
			if (connection.length == 0)
			{
				if (faceindex <= roof[i])
				{
					alert( BP[0] + BP[1] + "\n" +
					"\nRoof Surface :" + surface_list[i][0] + 
					"\nWall Surface :" + surface_list[i][1] + 
					"\nGround Surface :" + surface_list[i][2]
					)
					break;		
				}
			}

			else if (connection.length > 0)
			{
				if (faceindex <= roof[i])
				{
					alert( BP[0] + BP[1] + " shared with "+ new_conn[i].length +" BuildingPart\n" +
					new_conn[i].join("")
					)
					break;		
				}
			}
		}
	}

	else if ( astro.object.name == 'poly_face_wall_f9' )
	{
		for ( var i =0; i < wall.length; i++)
		{
			if ( i == 0)
			{
				BP = ["Floor9's", " Corridor"]
			}

			else
			{
				BP = ["BuildingPart ", i]
			}

			faceindex = astro.faceIndex + 1
			if (connection.length == 0)
			{
				if (faceindex <= wall[i])
				{
					alert( BP[0] + BP[1] + "\n" +
					"\nRoof Surface :" + surface_list[i][0] + 
					"\nWall Surface :" + surface_list[i][1] + 
					"\nGround Surface :" + surface_list[i][2]
					)
					break;		
				}
			}

			else if (connection.length > 0)
			{
				if (faceindex <= wall[i])
				{
					alert( BP[0] + BP[1] + " shared with "+ new_conn[i].length +" BuildingPart\n" +
					new_conn[i].join("")
					)
					break;		
				}
			}
		}

	}

	else if ( astro.object.name == 'poly_face_ground_f9' )
	{
		for ( var i =0; i < ground.length; i++)
		{
			if ( i == 0)
			{
				BP = ["Floor9's", " Corridor"]
			}

			else
			{
				BP = ["BuildingPart ", i]
			}

			faceindex = astro.faceIndex + 1
			if (connection.length == 0)
			{
				if (faceindex <= ground[i])
				{
					alert( BP[0] + BP[1] + "\n" +
					"\nRoof Surface :" + surface_list[i][0] + 
					"\nWall Surface :" + surface_list[i][1] + 
					"\nGround Surface :" + surface_list[i][2]
					)
					break;		
				}
			}

			else if (connection.length > 0)
			{
				if (faceindex <= ground[i])
				{
					alert( BP[0] + BP[1] + " shared with "+ new_conn[i].length +" BuildingPart\n" +
					new_conn[i].join("")
					)
					break;		
				}
			}
		}
	}

	else if ( astro.object.name == 'poly_face_roof_f10' )
	{
		for ( var i =0; i < roof.length; i++)
		{
			if ( i == 47)
			{
				BP = ["Floor10's", " Corridor"]
			}

			else
			{
				BP = ["BuildingPart ", i]
			}

			faceindex = astro.faceIndex + 1 + 554
			if (connection.length == 0)
			{
				if (faceindex <= roof[i])
				{
					alert( BP[0] + BP[1] + "\n" +
					"\nRoof Surface :" + surface_list[i][0] + 
					"\nWall Surface :" + surface_list[i][1] + 
					"\nGround Surface :" + surface_list[i][2]
					)
					break;		
				}
			}

			else if (connection.length > 0)
			{
				if (faceindex <= roof[i])
				{
					if ( connection.length <= 47)
					{
						alert( BP[0] + BP[1] + " shared with "+ new_conn[i - 47].length +" BuildingPart\n" +
						new_conn[i - 47].join("")
						)
						break;	
					}

					else
					{
						alert( BP[0] + BP[1] + " shared with "+ new_conn[i].length +" BuildingPart\n" +
						new_conn[i].join("")
						)
						break;
					}		
				}
			}
		}
	}

	else if ( astro.object.name == 'poly_face_wall_f10' )
	{
		for ( var i =0; i < wall.length; i++)
		{
			if ( i == 47)
			{
				BP = ["Floor10's", " Corridor"]
			}

			else
			{
				BP = ["BuildingPart ", i]
			}
			faceindex = astro.faceIndex + 1 + 1274
			if (connection.length == 0)
			{
				if (faceindex <= wall[i])
				{
					alert( BP[0] + BP[1] + "\n" +
					"\nRoof Surface :" + surface_list[i][0] + 
					"\nWall Surface :" + surface_list[i][1] + 
					"\nGround Surface :" + surface_list[i][2]
					)
					break;		
				}
			}

			else if (connection.length > 0)
			{
				if (faceindex <= wall[i])
				{
					if ( connection.length <= 47)
					{
						alert( BP[0] + BP[1] + " shared with "+ new_conn[i - 47].length +" BuildingPart\n" +
						new_conn[i - 47].join("")
						)
						break;	
					}

					else
					{
						alert( BP[0] + BP[1] + " shared with "+ new_conn[i].length +" BuildingPart\n" +
						new_conn[i].join("")
						)
						break;
					}		
				}
			}
		}

	}

	else if ( astro.object.name == 'poly_face_ground_f10' )
	{
		for ( var i =0; i < ground.length; i++)
		{
			if ( i == 47 || i == 0)
			{
				BP = ["Floor10's", " Corridor"]
			}

			else
			{
				BP = ["BuildingPart ", i]
			}
			faceindex = astro.faceIndex  + 1 + 554
			if (connection.length == 0)
			{
				if (faceindex <= ground[i])
				{
					alert( BP[0] + BP[1] + "\n" +
					"\nRoof Surface :" + surface_list[i][0] + 
					"\nWall Surface :" + surface_list[i][1] + 
					"\nGround Surface :" + surface_list[i][2]
					)
					break;		
				}
			}

			else if (connection.length > 0)
			{
				if (faceindex <= ground[i])
				{
					if ( connection.length <= 47)
					{
						alert( BP[0] + BP[1] + " shared with "+ new_conn[i - 47].length +" BuildingPart\n" +
						new_conn[i - 47].join("")
						)
						break;	
					}

					else
					{
						alert( BP[0] + BP[1] + " shared with "+ new_conn[i].length +" BuildingPart\n" +
						new_conn[i].join("")
						)
						break;
					}
						
				}
			}
		}
	}

	//console.log(astro, '\n', astro)
}

//show and hide for both floor
var texture_Floor9= new THREE.TextureLoader().load ('BP_img/InkedFloor9_LI.jpg')
var texture_Floor10 = new THREE.TextureLoader().load ('BP_img/try.png')
var geometryFloor = new THREE.PlaneGeometry(20,4);
var materialFloor9 = new THREE.MeshBasicMaterial({ map: texture_Floor9 , side : THREE.DoubleSide})
var materialFloor10 = new THREE.MeshBasicMaterial({ map: texture_Floor10 , side : THREE.DoubleSide})

var plane_f9 = new THREE.Mesh ( geometryFloor, materialFloor9 );
var plane_f10 = new THREE.Mesh ( geometryFloor, materialFloor10 );

plane_f9.rotation.x = Math.PI/2;
plane_f9.position.set(5,6,5)

plane_f10.rotation.x = Math.PI/2;
plane_f10.position.set(5,6,9.2)


var show1
function show_hidef9()
{
	if ( show1 == 1)
	{
		scene.remove( plane_f9 )
		scene.remove( plane_f10 )
		return show1 = 0
	}

	else
	{
		scene.add( plane_f9 )
		scene.add( plane_f10 )
		return show1 = 1
	}
}
function animate() 
{
	stats.begin();
	// monitored code goes here

	stats.end();
	requestAnimationFrame( animate );
	controls.update();
	renderer.render( scene, camera );

}

animate()


